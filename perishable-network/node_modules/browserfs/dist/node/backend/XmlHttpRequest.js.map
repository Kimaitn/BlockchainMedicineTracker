{"version":3,"file":"XmlHttpRequest.js","sourceRoot":"","sources":["../../../src/backend/XmlHttpRequest.ts"],"names":[],"mappings":";;;;;AAAA,4BAAyC,qBAAqB,CAAC,CAAA;AAC/D,0BAAkC,mBAAmB,CAAC,CAAA;AACtD,0BAAmC,mBAAmB,CAAC,CAAA;AACvD,qBAA2B,cAAc,CAAC,CAAA;AAG1C,6BAAyB,yBAAyB,CAAC,CAAA;AACnD,oBAAqF,gBAAgB,CAAC,CAAA;AACtG,2BAAiD,uBAAuB,CAAC,CAAA;AAEzE;;;;GAIG;AACH,qBAAqB,IAAY,EAAE,QAAgB,EAAE,EAAsC;IACzF,IAAI,CAAC;QACH,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;IACpC,CAAE;IAAA,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACX,EAAE,CAAC,CAAC,CAAC,CAAC;IACR,CAAC;AACH,CAAC;AAED;;GAEG;AACH;IAA4C,kCAAc;IAOxD;;;;;;OAMG;IACH,wBAAY,eAAgC,EAAE,SAAsB;QAAtB,yBAAsB,GAAtB,cAAsB;QAClE,iBAAO,CAAC;QACR,EAAE,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC;YACrB,eAAe,GAAG,YAAY,CAAC;QACjC,CAAC;QACD,gDAAgD;QAChD,EAAE,CAAC,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,IAAI,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;YAC3E,SAAS,GAAG,SAAS,GAAG,GAAG,CAAC;QAC9B,CAAC;QACD,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAE3B,IAAI,OAAO,GAAW,IAAI,CAAC;QAC3B,EAAE,CAAC,CAAC,OAAM,CAAC,eAAe,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC;YACzC,OAAO,GAAG,IAAI,CAAC,gBAAgB,CAAU,eAAe,EAAE,MAAM,CAAC,CAAC;YAClE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;gBACb,MAAM,IAAI,KAAK,CAAC,mDAAmD,CAAC,CAAC;YACvE,CAAC;QACH,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,OAAO,GAAG,eAAe,CAAC;QAC5B,CAAC;QAED,IAAI,CAAC,MAAM,GAAG,sBAAS,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;IAC/C,CAAC;IAnCa,0BAAW,GAAzB;QACE,MAAM,CAAC,OAAM,CAAC,cAAc,CAAC,KAAK,WAAW,IAAI,cAAc,KAAK,IAAI,CAAC;IAC3E,CAAC;IAmCM,8BAAK,GAAZ;QACE,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,UAAS,IAAW;YAC3C,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACvB,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACI,8CAAqB,GAA5B,UAA6B,IAAY,EAAE,EAA0C;QACnF,sBAAgB,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC;IAC9C,CAAC;IACM,6CAAoB,GAA3B,UAA4B,IAAY;QACtC,MAAM,CAAC,qBAAe,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;IAChD,CAAC;IAEM,gCAAO,GAAd;QACE,MAAM,CAAC,gBAAgB,CAAC;IAC1B,CAAC;IAEM,kCAAS,GAAhB,UAAiB,IAAY,EAAE,EAAyC;QACtE,4EAA4E;QAC5E,uBAAuB;QACvB,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACX,CAAC;IAEM,mCAAU,GAAjB;QACE,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAEM,sCAAa,GAApB;QACE,MAAM,CAAC,KAAK,CAAC;IACf,CAAC;IAEM,sCAAa,GAApB;QACE,MAAM,CAAC,KAAK,CAAC;IACf,CAAC;IAEM,sCAAa,GAApB;QACE,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAED;;;;OAIG;IACI,oCAAW,GAAlB,UAAmB,IAAY,EAAE,MAAc;QAC7C,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QACvC,EAAE,CAAC,CAAC,wBAAW,CAAQ,KAAK,CAAC,CAAC,CAAC,CAAC;YAC9B,EAAE,CAAC,CAAC,KAAK,KAAK,IAAI,CAAC,CAAC,CAAC;gBACnB,MAAM,oBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YAC9B,CAAC;YACD,IAAI,KAAK,GAAG,KAAK,CAAC,OAAO,EAAE,CAAC;YAC5B,KAAK,CAAC,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC;YAC3B,KAAK,CAAC,QAAQ,GAAG,MAAM,CAAC;QAC1B,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,MAAM,oBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAC9B,CAAC;IACH,CAAC;IAEM,6BAAI,GAAX,UAAY,IAAY,EAAE,OAAgB,EAAE,EAAuC;QACjF,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QACvC,EAAE,CAAC,CAAC,KAAK,KAAK,IAAI,CAAC,CAAC,CAAC;YACnB,MAAM,CAAC,EAAE,CAAC,oBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;QACnC,CAAC;QACD,IAAI,KAAY,CAAC;QACjB,EAAE,CAAC,CAAC,wBAAW,CAAQ,KAAK,CAAC,CAAC,CAAC,CAAC;YAC9B,KAAK,GAAG,KAAK,CAAC,OAAO,EAAE,CAAC;YACxB,mFAAmF;YACnF,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC;gBACnB,IAAI,CAAC,qBAAqB,CAAC,IAAI,EAAE,UAAS,CAAW,EAAE,IAAa;oBAClE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wBACN,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;oBACf,CAAC;oBACD,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC;oBAClB,EAAE,CAAC,IAAI,EAAE,KAAK,CAAC,KAAK,EAAE,CAAC,CAAC;gBAC1B,CAAC,CAAC,CAAC;YACL,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,EAAE,CAAC,IAAI,EAAE,KAAK,CAAC,KAAK,EAAE,CAAC,CAAC;YAC1B,CAAC;QACH,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,uBAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAC7B,KAAK,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC;YACzB,EAAE,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QAClB,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,EAAE,CAAC,oBAAQ,CAAC,SAAS,CAAC,qBAAS,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC;QACjD,CAAC;IACH,CAAC;IAEM,iCAAQ,GAAf,UAAgB,IAAY,EAAE,OAAgB;QAC5C,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QACvC,EAAE,CAAC,CAAC,KAAK,KAAK,IAAI,CAAC,CAAC,CAAC;YACnB,MAAM,oBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAC9B,CAAC;QACD,IAAI,KAAY,CAAC;QACjB,EAAE,CAAC,CAAC,wBAAW,CAAQ,KAAK,CAAC,CAAC,CAAC,CAAC;YAC9B,KAAK,GAAG,KAAK,CAAC,OAAO,EAAE,CAAC;YACxB,mFAAmF;YACnF,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC;gBACnB,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC;YAC/C,CAAC;QACH,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,uBAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAC7B,KAAK,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC;QAC3B,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,MAAM,oBAAQ,CAAC,SAAS,CAAC,qBAAS,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;QACnD,CAAC;QACD,MAAM,CAAC,KAAK,CAAC;IACf,CAAC;IAEM,6BAAI,GAAX,UAAY,IAAY,EAAE,KAAe,EAAE,IAAY,EAAE,EAAsC;QAC7F,2DAA2D;QAC3D,EAAE,CAAC,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;YACxB,MAAM,CAAC,EAAE,CAAC,IAAI,oBAAQ,CAAC,qBAAS,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC;QACjD,CAAC;QACD,IAAI,KAAK,GAAG,IAAI,CAAC;QACjB,2CAA2C;QAC3C,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QACvC,EAAE,CAAC,CAAC,KAAK,KAAK,IAAI,CAAC,CAAC,CAAC;YACnB,MAAM,CAAC,EAAE,CAAC,oBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;QACnC,CAAC;QACD,EAAE,CAAC,CAAC,wBAAW,CAAQ,KAAK,CAAC,CAAC,CAAC,CAAC;YAC9B,IAAI,OAAK,GAAG,KAAK,CAAC,OAAO,EAAE,CAAC;YAC5B,MAAM,CAAC,CAAC,KAAK,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;gBACjC,KAAK,sBAAU,CAAC,eAAe,CAAC;gBAChC,KAAK,sBAAU,CAAC,aAAa;oBAC3B,MAAM,CAAC,EAAE,CAAC,oBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;gBACnC,KAAK,sBAAU,CAAC,GAAG;oBACjB,8BAA8B;oBAC9B,oDAAoD;oBACpD,EAAE,CAAC,CAAC,OAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;wBACnB,MAAM,CAAC,EAAE,CAAC,IAAI,EAAE,IAAI,yBAAU,CAAC,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,OAAK,CAAC,KAAK,EAAE,EAAE,OAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;oBACrF,CAAC;oBACD,qDAAqD;oBACrD,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,QAAQ,EAAE,UAAS,GAAa,EAAE,MAAe;wBAC5E,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;4BACR,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;wBACjB,CAAC;wBACD,qCAAqC;wBACrC,OAAK,CAAC,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC;wBAC3B,OAAK,CAAC,QAAQ,GAAG,MAAM,CAAC;wBACxB,MAAM,CAAC,EAAE,CAAC,IAAI,EAAE,IAAI,yBAAU,CAAC,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,OAAK,CAAC,KAAK,EAAE,EAAE,MAAM,CAAC,CAAC,CAAC;oBAC7E,CAAC,CAAC,CAAC;oBACH,KAAK,CAAC;gBACR;oBACE,MAAM,CAAC,EAAE,CAAC,IAAI,oBAAQ,CAAC,qBAAS,CAAC,MAAM,EAAE,0BAA0B,CAAC,CAAC,CAAC;YAC1E,CAAC;QACH,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,MAAM,CAAC,EAAE,CAAC,oBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;QACnC,CAAC;IACH,CAAC;IAEM,iCAAQ,GAAf,UAAgB,IAAY,EAAE,KAAe,EAAE,IAAY;QACzD,2DAA2D;QAC3D,EAAE,CAAC,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;YACxB,MAAM,IAAI,oBAAQ,CAAC,qBAAS,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QAC5C,CAAC;QACD,2CAA2C;QAC3C,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QACvC,EAAE,CAAC,CAAC,KAAK,KAAK,IAAI,CAAC,CAAC,CAAC;YACnB,MAAM,oBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAC9B,CAAC;QACD,EAAE,CAAC,CAAC,wBAAW,CAAQ,KAAK,CAAC,CAAC,CAAC,CAAC;YAC9B,IAAI,KAAK,GAAG,KAAK,CAAC,OAAO,EAAE,CAAC;YAC5B,MAAM,CAAC,CAAC,KAAK,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;gBACjC,KAAK,sBAAU,CAAC,eAAe,CAAC;gBAChC,KAAK,sBAAU,CAAC,aAAa;oBAC3B,MAAM,oBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBAC9B,KAAK,sBAAU,CAAC,GAAG;oBACjB,8BAA8B;oBAC9B,oDAAoD;oBACpD,EAAE,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;wBACnB,MAAM,CAAC,IAAI,yBAAU,CAAC,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC,KAAK,EAAE,EAAE,KAAK,CAAC,QAAQ,CAAC,CAAC;oBAC1E,CAAC;oBACD,qDAAqD;oBACrD,IAAI,MAAM,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;oBACnD,qCAAqC;oBACrC,KAAK,CAAC,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC;oBAC3B,KAAK,CAAC,QAAQ,GAAG,MAAM,CAAC;oBACxB,MAAM,CAAC,IAAI,yBAAU,CAAC,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC,KAAK,EAAE,EAAE,MAAM,CAAC,CAAC;gBAClE;oBACE,MAAM,IAAI,oBAAQ,CAAC,qBAAS,CAAC,MAAM,EAAE,0BAA0B,CAAC,CAAC;YACrE,CAAC;QACH,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,MAAM,oBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAC9B,CAAC;IACH,CAAC;IAEM,gCAAO,GAAd,UAAe,IAAY,EAAE,EAA6C;QACxE,IAAI,CAAC;YACH,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC;QACnC,CAAE;QAAA,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACX,EAAE,CAAC,CAAC,CAAC,CAAC;QACR,CAAC;IACH,CAAC;IAEM,oCAAW,GAAlB,UAAmB,IAAY;QAC7B,sBAAsB;QACtB,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QACvC,EAAE,CAAC,CAAC,KAAK,KAAK,IAAI,CAAC,CAAC,CAAC;YACnB,MAAM,oBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAC9B,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,uBAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAC7B,MAAM,CAAC,KAAK,CAAC,UAAU,EAAE,CAAC;QAC5B,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,MAAM,oBAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC/B,CAAC;IACH,CAAC;IAED;;OAEG;IACI,iCAAQ,GAAf,UAAgB,KAAa,EAAE,QAAgB,EAAE,IAAc,EAAE,EAAuC;QACtG,gCAAgC;QAChC,IAAI,KAAK,GAAG,EAAE,CAAC;QACf,YAAY;QACZ,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,UAAS,GAAa,EAAE,EAAS;YAC7D,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACR,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;YACjB,CAAC;YACD,EAAE,GAAG,UAAS,GAAa,EAAE,GAAY;gBACvC,EAAE,CAAC,KAAK,CAAC,UAAS,IAAS;oBACzB,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;wBACT,GAAG,GAAG,IAAI,CAAC;oBACb,CAAC;oBACD,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;gBACzB,CAAC,CAAC,CAAC;YACL,CAAC,CAAC;YACF,IAAI,MAAM,GAAgC,EAAE,CAAC;YAC7C,IAAI,MAAM,GAAY,MAAM,CAAC,SAAS,EAAE,CAAC;YACzC,EAAE,CAAC,CAAC,QAAQ,KAAK,IAAI,CAAC,CAAC,CAAC;gBACtB,EAAE,CAAC,GAAG,EAAE,mBAAY,CAAC,MAAM,CAAC,CAAC,CAAC;YAChC,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,WAAW,CAAC,MAAM,EAAE,QAAQ,EAAE,EAAE,CAAC,CAAC;YACpC,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACI,qCAAY,GAAnB,UAAoB,KAAa,EAAE,QAAgB,EAAE,IAAc;QACjE,YAAY;QACZ,IAAI,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;QAC3C,IAAI,CAAC;YACH,IAAI,MAAM,GAAgC,EAAE,CAAC;YAC7C,IAAI,MAAM,GAAY,MAAM,CAAC,SAAS,EAAE,CAAC;YACzC,EAAE,CAAC,CAAC,QAAQ,KAAK,IAAI,CAAC,CAAC,CAAC;gBACtB,MAAM,CAAC,mBAAY,CAAC,MAAM,CAAC,CAAC;YAC9B,CAAC;YACD,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QACnC,CAAC;gBAAS,CAAC;YACT,EAAE,CAAC,SAAS,EAAE,CAAC;QACjB,CAAC;IACH,CAAC;IAEO,mCAAU,GAAlB,UAAmB,QAAgB;QACjC,EAAE,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;YAC/B,QAAQ,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QAC/B,CAAC;QACD,MAAM,CAAC,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;IACnC,CAAC;IAQO,0CAAiB,GAAzB,UAA0B,CAAS,EAAE,IAAY,EAAE,EAAuC;QACxF,uBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;IAClD,CAAC;IAQO,yCAAgB,GAAxB,UAAyB,CAAS,EAAE,IAAY;QAC9C,MAAM,CAAC,sBAAgB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;IACpD,CAAC;IACH,qBAAC;AAAD,CAAC,AA9TD,CAA4C,4BAAc,GA8TzD;AA9TD;mCA8TC,CAAA","sourcesContent":["import {BaseFileSystem, FileSystem} from '../core/file_system';\nimport {ApiError, ErrorCode} from '../core/api_error';\nimport {FileFlag, ActionType} from '../core/file_flag';\nimport {copyingSlice} from '../core/util';\nimport {File} from '../core/file';\nimport Stats from '../core/node_fs_stats';\nimport {NoSyncFile} from '../generic/preload_file';\nimport {asyncDownloadFile, syncDownloadFile, getFileSizeAsync, getFileSizeSync} from '../generic/xhr';\nimport {FileIndex, isFileInode, isDirInode} from '../generic/file_index';\n\n/**\n * Try to convert the given buffer into a string, and pass it to the callback.\n * Optimization that removes the needed try/catch into a helper function, as\n * this is an uncommon case.\n */\nfunction tryToString(buff: Buffer, encoding: string, cb: (e: ApiError, rv?: string) => void) {\n  try {\n    cb(null, buff.toString(encoding));\n  } catch (e) {\n    cb(e);\n  }\n}\n\n/**\n * A simple filesystem backed by XmlHttpRequests.\n */\nexport default class XmlHttpRequest extends BaseFileSystem implements FileSystem {\n  public static isAvailable(): boolean {\n    return typeof(XMLHttpRequest) !== \"undefined\" && XMLHttpRequest !== null;\n  }\n\n  public prefixUrl: string;\n  private _index: FileIndex<{}>;\n  /**\n   * Constructs the file system.\n   * @param listingUrlOrObj index object or the path to the JSON file index generated by\n   *   tools/XHRIndexer.coffee. This can be relative to the current webpage URL\n   *   or absolutely specified.\n   * @param prefixUrl The url prefix to use for all web-server requests.\n   */\n  constructor(listingUrlOrObj: string | Object, prefixUrl: string = '') {\n    super();\n    if (!listingUrlOrObj) {\n      listingUrlOrObj = 'index.json';\n    }\n    // prefix_url must end in a directory separator.\n    if (prefixUrl.length > 0 && prefixUrl.charAt(prefixUrl.length - 1) !== '/') {\n      prefixUrl = prefixUrl + '/';\n    }\n    this.prefixUrl = prefixUrl;\n\n    let listing: Object = null;\n    if (typeof(listingUrlOrObj) === \"string\") {\n      listing = this._requestFileSync(<string> listingUrlOrObj, 'json');\n      if (!listing) {\n        throw new Error(\"Unable to find listing at URL: ${listingUrlOrObj}\");\n      }\n    } else {\n      listing = listingUrlOrObj;\n    }\n\n    this._index = FileIndex.fromListing(listing);\n  }\n\n  public empty(): void {\n    this._index.fileIterator(function(file: Stats) {\n      file.fileData = null;\n    });\n  }\n\n  /**\n   * Only requests the HEAD content, for the file size.\n   */\n  public _requestFileSizeAsync(path: string, cb: (err: ApiError, size?: number) => void): void {\n    getFileSizeAsync(this.getXhrPath(path), cb);\n  }\n  public _requestFileSizeSync(path: string): number {\n    return getFileSizeSync(this.getXhrPath(path));\n  }\n\n  public getName(): string {\n    return 'XmlHttpRequest';\n  }\n\n  public diskSpace(path: string, cb: (total: number, free: number) => void): void {\n    // Read-only file system. We could calculate the total space, but that's not\n    // important right now.\n    cb(0, 0);\n  }\n\n  public isReadOnly(): boolean {\n    return true;\n  }\n\n  public supportsLinks(): boolean {\n    return false;\n  }\n\n  public supportsProps(): boolean {\n    return false;\n  }\n\n  public supportsSynch(): boolean {\n    return true;\n  }\n\n  /**\n   * Special XHR function: Preload the given file into the index.\n   * @param [String] path\n   * @param [BrowserFS.Buffer] buffer\n   */\n  public preloadFile(path: string, buffer: Buffer): void {\n    let inode = this._index.getInode(path);\n    if (isFileInode<Stats>(inode)) {\n      if (inode === null) {\n        throw ApiError.ENOENT(path);\n      }\n      let stats = inode.getData();\n      stats.size = buffer.length;\n      stats.fileData = buffer;\n    } else {\n      throw ApiError.EISDIR(path);\n    }\n  }\n\n  public stat(path: string, isLstat: boolean, cb: (e: ApiError, stat?: Stats) => void): void {\n    let inode = this._index.getInode(path);\n    if (inode === null) {\n      return cb(ApiError.ENOENT(path));\n    }\n    let stats: Stats;\n    if (isFileInode<Stats>(inode)) {\n      stats = inode.getData();\n      // At this point, a non-opened file will still have default stats from the listing.\n      if (stats.size < 0) {\n        this._requestFileSizeAsync(path, function(e: ApiError, size?: number) {\n          if (e) {\n            return cb(e);\n          }\n          stats.size = size;\n          cb(null, stats.clone());\n        });\n      } else {\n        cb(null, stats.clone());\n      }\n    } else if (isDirInode(inode)) {\n      stats = inode.getStats();\n      cb(null, stats);\n    } else {\n      cb(ApiError.FileError(ErrorCode.EINVAL, path));\n    }\n  }\n\n  public statSync(path: string, isLstat: boolean): Stats {\n    let inode = this._index.getInode(path);\n    if (inode === null) {\n      throw ApiError.ENOENT(path);\n    }\n    let stats: Stats;\n    if (isFileInode<Stats>(inode)) {\n      stats = inode.getData();\n      // At this point, a non-opened file will still have default stats from the listing.\n      if (stats.size < 0) {\n        stats.size = this._requestFileSizeSync(path);\n      }\n    } else if (isDirInode(inode)) {\n      stats = inode.getStats();\n    } else {\n      throw ApiError.FileError(ErrorCode.EINVAL, path);\n    }\n    return stats;\n  }\n\n  public open(path: string, flags: FileFlag, mode: number, cb: (e: ApiError, file?: File) => void): void {\n    // INVARIANT: You can't write to files on this file system.\n    if (flags.isWriteable()) {\n      return cb(new ApiError(ErrorCode.EPERM, path));\n    }\n    let _this = this;\n    // Check if the path exists, and is a file.\n    let inode = this._index.getInode(path);\n    if (inode === null) {\n      return cb(ApiError.ENOENT(path));\n    }\n    if (isFileInode<Stats>(inode)) {\n      let stats = inode.getData();\n      switch (flags.pathExistsAction()) {\n        case ActionType.THROW_EXCEPTION:\n        case ActionType.TRUNCATE_FILE:\n          return cb(ApiError.EEXIST(path));\n        case ActionType.NOP:\n          // Use existing file contents.\n          // XXX: Uh, this maintains the previously-used flag.\n          if (stats.fileData) {\n            return cb(null, new NoSyncFile(_this, path, flags, stats.clone(), stats.fileData));\n          }\n          // @todo be lazier about actually requesting the file\n          this._requestFileAsync(path, 'buffer', function(err: ApiError, buffer?: Buffer) {\n            if (err) {\n              return cb(err);\n            }\n            // we don't initially have file sizes\n            stats.size = buffer.length;\n            stats.fileData = buffer;\n            return cb(null, new NoSyncFile(_this, path, flags, stats.clone(), buffer));\n          });\n          break;\n        default:\n          return cb(new ApiError(ErrorCode.EINVAL, 'Invalid FileMode object.'));\n      }\n    } else {\n      return cb(ApiError.EISDIR(path));\n    }\n  }\n\n  public openSync(path: string, flags: FileFlag, mode: number): File {\n    // INVARIANT: You can't write to files on this file system.\n    if (flags.isWriteable()) {\n      throw new ApiError(ErrorCode.EPERM, path);\n    }\n    // Check if the path exists, and is a file.\n    let inode = this._index.getInode(path);\n    if (inode === null) {\n      throw ApiError.ENOENT(path);\n    }\n    if (isFileInode<Stats>(inode)) {\n      let stats = inode.getData();\n      switch (flags.pathExistsAction()) {\n        case ActionType.THROW_EXCEPTION:\n        case ActionType.TRUNCATE_FILE:\n          throw ApiError.EEXIST(path);\n        case ActionType.NOP:\n          // Use existing file contents.\n          // XXX: Uh, this maintains the previously-used flag.\n          if (stats.fileData) {\n            return new NoSyncFile(this, path, flags, stats.clone(), stats.fileData);\n          }\n          // @todo be lazier about actually requesting the file\n          let buffer = this._requestFileSync(path, 'buffer');\n          // we don't initially have file sizes\n          stats.size = buffer.length;\n          stats.fileData = buffer;\n          return new NoSyncFile(this, path, flags, stats.clone(), buffer);\n        default:\n          throw new ApiError(ErrorCode.EINVAL, 'Invalid FileMode object.');\n      }\n    } else {\n      throw ApiError.EISDIR(path);\n    }\n  }\n\n  public readdir(path: string, cb: (e: ApiError, listing?: string[]) => void): void {\n    try {\n      cb(null, this.readdirSync(path));\n    } catch (e) {\n      cb(e);\n    }\n  }\n\n  public readdirSync(path: string): string[] {\n    // Check if it exists.\n    let inode = this._index.getInode(path);\n    if (inode === null) {\n      throw ApiError.ENOENT(path);\n    } else if (isDirInode(inode)) {\n      return inode.getListing();\n    } else {\n      throw ApiError.ENOTDIR(path);\n    }\n  }\n\n  /**\n   * We have the entire file as a buffer; optimize readFile.\n   */\n  public readFile(fname: string, encoding: string, flag: FileFlag, cb: (err: ApiError, data?: any) => void): void {\n    // Wrap cb in file closing code.\n    let oldCb = cb;\n    // Get file.\n    this.open(fname, flag, 0x1a4, function(err: ApiError, fd?: File) {\n      if (err) {\n        return cb(err);\n      }\n      cb = function(err: ApiError, arg?: Buffer) {\n        fd.close(function(err2: any) {\n          if (!err) {\n            err = err2;\n          }\n          return oldCb(err, arg);\n        });\n      };\n      let fdCast = <NoSyncFile<XmlHttpRequest>> fd;\n      let fdBuff = <Buffer> fdCast.getBuffer();\n      if (encoding === null) {\n        cb(err, copyingSlice(fdBuff));\n      } else {\n        tryToString(fdBuff, encoding, cb);\n      }\n    });\n  }\n\n  /**\n   * Specially-optimized readfile.\n   */\n  public readFileSync(fname: string, encoding: string, flag: FileFlag): any {\n    // Get file.\n    let fd = this.openSync(fname, flag, 0x1a4);\n    try {\n      let fdCast = <NoSyncFile<XmlHttpRequest>> fd;\n      let fdBuff = <Buffer> fdCast.getBuffer();\n      if (encoding === null) {\n        return copyingSlice(fdBuff);\n      }\n      return fdBuff.toString(encoding);\n    } finally {\n      fd.closeSync();\n    }\n  }\n\n  private getXhrPath(filePath: string): string {\n    if (filePath.charAt(0) === '/') {\n      filePath = filePath.slice(1);\n    }\n    return this.prefixUrl + filePath;\n  }\n\n  /**\n   * Asynchronously download the given file.\n   */\n  private _requestFileAsync(p: string, type: 'buffer', cb: (err: ApiError, data?: Buffer) => void): void;\n  private _requestFileAsync(p: string, type: 'json', cb: (err: ApiError, data?: any) => void): void;\n  private _requestFileAsync(p: string, type: string, cb: (err: ApiError, data?: any) => void): void;\n  private _requestFileAsync(p: string, type: string, cb: (err: ApiError, data?: any) => void): void {\n    asyncDownloadFile(this.getXhrPath(p), type, cb);\n  }\n\n  /**\n   * Synchronously download the given file.\n   */\n  private _requestFileSync(p: string, type: 'buffer'): Buffer;\n  private _requestFileSync(p: string, type: 'json'): any;\n  private _requestFileSync(p: string, type: string): any;\n  private _requestFileSync(p: string, type: string): any {\n    return syncDownloadFile(this.getXhrPath(p), type);\n  }\n}\n"]}