/// <reference types="node" />
import { BaseFileSystem, FileSystem } from '../core/file_system';
import { ApiError } from '../core/api_error';
import { FileFlag } from '../core/file_flag';
import { File } from '../core/file';
import Stats from '../core/node_fs_stats';
/**
 * A simple filesystem backed by XmlHttpRequests.
 */
export default class XmlHttpRequest extends BaseFileSystem implements FileSystem {
    static isAvailable(): boolean;
    prefixUrl: string;
    private _index;
    /**
     * Constructs the file system.
     * @param listingUrlOrObj index object or the path to the JSON file index generated by
     *   tools/XHRIndexer.coffee. This can be relative to the current webpage URL
     *   or absolutely specified.
     * @param prefixUrl The url prefix to use for all web-server requests.
     */
    constructor(listingUrlOrObj: string | Object, prefixUrl?: string);
    empty(): void;
    /**
     * Only requests the HEAD content, for the file size.
     */
    _requestFileSizeAsync(path: string, cb: (err: ApiError, size?: number) => void): void;
    _requestFileSizeSync(path: string): number;
    getName(): string;
    diskSpace(path: string, cb: (total: number, free: number) => void): void;
    isReadOnly(): boolean;
    supportsLinks(): boolean;
    supportsProps(): boolean;
    supportsSynch(): boolean;
    /**
     * Special XHR function: Preload the given file into the index.
     * @param [String] path
     * @param [BrowserFS.Buffer] buffer
     */
    preloadFile(path: string, buffer: Buffer): void;
    stat(path: string, isLstat: boolean, cb: (e: ApiError, stat?: Stats) => void): void;
    statSync(path: string, isLstat: boolean): Stats;
    open(path: string, flags: FileFlag, mode: number, cb: (e: ApiError, file?: File) => void): void;
    openSync(path: string, flags: FileFlag, mode: number): File;
    readdir(path: string, cb: (e: ApiError, listing?: string[]) => void): void;
    readdirSync(path: string): string[];
    /**
     * We have the entire file as a buffer; optimize readFile.
     */
    readFile(fname: string, encoding: string, flag: FileFlag, cb: (err: ApiError, data?: any) => void): void;
    /**
     * Specially-optimized readfile.
     */
    readFileSync(fname: string, encoding: string, flag: FileFlag): any;
    private getXhrPath(filePath);
    /**
     * Asynchronously download the given file.
     */
    private _requestFileAsync(p, type, cb);
    private _requestFileAsync(p, type, cb);
    private _requestFileAsync(p, type, cb);
    /**
     * Synchronously download the given file.
     */
    private _requestFileSync(p, type);
    private _requestFileSync(p, type);
    private _requestFileSync(p, type);
}
