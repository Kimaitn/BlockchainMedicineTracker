{"version":3,"file":"IndexedDB.js","sourceRoot":"","sources":["../../../src/backend/IndexedDB.ts"],"names":[],"mappings":"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","sourcesContent":["import {AsyncKeyValueROTransaction, AsyncKeyValueRWTransaction, AsyncKeyValueStore, AsyncKeyValueFileSystem} from '../generic/key_value_filesystem';\nimport {ApiError, ErrorCode} from '../core/api_error';\nimport global from '../core/global';\nimport {arrayBuffer2Buffer, buffer2ArrayBuffer} from '../core/util';\n/**\n * Get the indexedDB constructor for the current browser.\n */\nconst indexedDB: IDBFactory = global.indexedDB ||\n                          (<any> global).mozIndexedDB ||\n                          (<any> global).webkitIndexedDB ||\n                          global.msIndexedDB;\n\n/**\n * Converts a DOMException or a DOMError from an IndexedDB event into a\n * standardized BrowserFS API error.\n */\nfunction convertError(e: {name: string}, message: string = e.toString()): ApiError {\n  switch (e.name) {\n    case \"NotFoundError\":\n      return new ApiError(ErrorCode.ENOENT, message);\n    case \"QuotaExceededError\":\n      return new ApiError(ErrorCode.ENOSPC, message);\n    default:\n      // The rest do not seem to map cleanly to standard error codes.\n      return new ApiError(ErrorCode.EIO, message);\n  }\n}\n\n/**\n * Produces a new onerror handler for IDB. Our errors are always fatal, so we\n * handle them generically: Call the user-supplied callback with a translated\n * version of the error, and let the error bubble up.\n */\nfunction onErrorHandler(cb: (e: ApiError) => void, code: ErrorCode = ErrorCode.EIO, message: string = null): (e?: any) => void {\n  return function (e?: any): void {\n    // Prevent the error from canceling the transaction.\n    e.preventDefault();\n    cb(new ApiError(code, message));\n  };\n}\n\nexport class IndexedDBROTransaction implements AsyncKeyValueROTransaction {\n  constructor(public tx: IDBTransaction, public store: IDBObjectStore) { }\n\n  public get(key: string, cb: (e: ApiError, data?: Buffer) => void): void {\n    try {\n      let r: IDBRequest = this.store.get(key);\n      r.onerror = onErrorHandler(cb);\n      r.onsuccess = (event) => {\n        // IDB returns the value 'undefined' when you try to get keys that\n        // don't exist. The caller expects this behavior.\n        let result: any = (<any> event.target).result;\n        if (result === undefined) {\n          cb(null, result);\n        } else {\n          // IDB data is stored as an ArrayBuffer\n          cb(null, arrayBuffer2Buffer(result));\n        }\n      };\n    } catch (e) {\n      cb(convertError(e));\n    }\n  }\n}\n\nexport class IndexedDBRWTransaction extends IndexedDBROTransaction implements AsyncKeyValueRWTransaction, AsyncKeyValueROTransaction {\n  constructor(tx: IDBTransaction, store: IDBObjectStore) {\n    super(tx, store);\n  }\n\n  public put(key: string, data: Buffer, overwrite: boolean, cb: (e: ApiError, committed?: boolean) => void): void {\n    try {\n      let arraybuffer = buffer2ArrayBuffer(data),\n        r: IDBRequest;\n      if (overwrite) {\n        r = this.store.put(arraybuffer, key);\n      } else {\n        // 'add' will never overwrite an existing key.\n        r = this.store.add(arraybuffer, key);\n      }\n      // XXX: NEED TO RETURN FALSE WHEN ADD HAS A KEY CONFLICT. NO ERROR.\n      r.onerror = onErrorHandler(cb);\n      r.onsuccess = (event) => {\n        cb(null, true);\n      };\n    } catch (e) {\n      cb(convertError(e));\n    }\n  }\n\n  public del(key: string, cb: (e?: ApiError) => void): void {\n    try {\n      // NOTE: IE8 has a bug with identifiers named 'delete' unless used as a string\n      // like this.\n      // http://stackoverflow.com/a/26479152\n      let r: IDBRequest = this.store['delete'](key);\n      r.onerror = onErrorHandler(cb);\n      r.onsuccess = (event) => {\n        cb();\n      };\n    } catch (e) {\n      cb(convertError(e));\n    }\n  }\n\n  public commit(cb: (e?: ApiError) => void): void {\n    // Return to the event loop to commit the transaction.\n    setTimeout(cb, 0);\n  }\n\n  public abort(cb: (e?: ApiError) => void): void {\n    let _e: ApiError;\n    try {\n      this.tx.abort();\n    } catch (e) {\n      _e = convertError(e);\n    } finally {\n      cb(_e);\n    }\n  }\n}\n\nexport class IndexedDBStore implements AsyncKeyValueStore {\n  private db: IDBDatabase;\n\n  /**\n   * Constructs an IndexedDB file system.\n   * @param cb Called once the database is instantiated and ready for use.\n   *   Passes an error if there was an issue instantiating the database.\n   * @param objectStoreName The name of this file system. You can have\n   *   multiple IndexedDB file systems operating at once, but each must have\n   *   a different name.\n   */\n  constructor(cb: (e: ApiError, store?: IndexedDBStore) => void, private storeName: string = 'browserfs') {\n    let openReq: IDBOpenDBRequest = indexedDB.open(this.storeName, 1);\n\n    openReq.onupgradeneeded = (event) => {\n      let db: IDBDatabase = (<any> event.target).result;\n      // Huh. This should never happen; we're at version 1. Why does another\n      // database exist?\n      if (db.objectStoreNames.contains(this.storeName)) {\n        db.deleteObjectStore(this.storeName);\n      }\n      db.createObjectStore(this.storeName);\n    };\n\n    openReq.onsuccess = (event) => {\n      this.db = (<any> event.target).result;\n      cb(null, this);\n    };\n\n    openReq.onerror = onErrorHandler(cb, ErrorCode.EACCES);\n  }\n\n  public name(): string {\n    return \"IndexedDB - \" + this.storeName;\n  }\n\n  public clear(cb: (e?: ApiError) => void): void {\n    try {\n      let tx = this.db.transaction(this.storeName, 'readwrite'),\n        objectStore = tx.objectStore(this.storeName),\n        r: IDBRequest = objectStore.clear();\n      r.onsuccess = (event) => {\n        // Use setTimeout to commit transaction.\n        setTimeout(cb, 0);\n      };\n      r.onerror = onErrorHandler(cb);\n    } catch (e) {\n      cb(convertError(e));\n    }\n  }\n\n  public beginTransaction(type: 'readonly'): AsyncKeyValueROTransaction;\n  public beginTransaction(type: 'readwrite'): AsyncKeyValueRWTransaction;\n  public beginTransaction(type: string = 'readonly'): AsyncKeyValueROTransaction {\n    let tx = this.db.transaction(this.storeName, type),\n      objectStore = tx.objectStore(this.storeName);\n    if (type === 'readwrite') {\n      return new IndexedDBRWTransaction(tx, objectStore);\n    } else if (type === 'readonly') {\n      return new IndexedDBROTransaction(tx, objectStore);\n    } else {\n      throw new ApiError(ErrorCode.EINVAL, 'Invalid transaction type.');\n    }\n  }\n}\n\n/**\n * A file system that uses the IndexedDB key value file system.\n */\nexport default class IndexedDBFileSystem extends AsyncKeyValueFileSystem {\n  public static isAvailable(): boolean {\n    // In Safari's private browsing mode, indexedDB.open returns NULL.\n    // In Firefox, it throws an exception.\n    // In Chrome, it \"just works\", and clears the database when you leave the page.\n    // Untested: Opera, IE.\n    try {\n      return typeof indexedDB !== 'undefined' && null !== indexedDB.open(\"__browserfs_test__\");\n    } catch (e) {\n      return false;\n    }\n  }\n  constructor(cb: (e: ApiError, fs?: IndexedDBFileSystem) => void, storeName?: string) {\n    super();\n    let store = new IndexedDBStore((e): void => {\n      if (e) {\n        cb(e);\n      } else {\n        this.init(store, (e?) => {\n          cb(e, this);\n        });\n      }\n    }, storeName);\n  }\n}\n"]}