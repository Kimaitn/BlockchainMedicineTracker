{"version":3,"file":"FS.js","sourceRoot":"","sources":["../../../src/core/FS.ts"],"names":[],"mappings":"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","sourcesContent":["import {File} from './file';\nimport {ApiError, ErrorCode} from './api_error';\nimport {FileSystem} from './file_system';\nimport {FileFlag} from './file_flag';\nimport * as path from 'path';\nimport Stats from './node_fs_stats';\n\n// Typing info only.\nimport * as _fs from 'fs';\n\n/**\n * Wraps a callback function. Used for unit testing. Defaults to a NOP.\n */\nlet wrapCb = function<T extends Function>(cb: T, numArgs: number): T {\n  return cb;\n};\n\nfunction normalizeMode(mode: number | string, def: number): number {\n  switch (typeof mode) {\n    case 'number':\n      // (path, flag, mode, cb?)\n      return <number> mode;\n    case 'string':\n      // (path, flag, modeString, cb?)\n      let trueMode = parseInt(<string> mode, 8);\n      if (!isNaN(trueMode)) {\n        return trueMode;\n      }\n      // Invalid string.\n      return def;\n    default:\n      return def;\n  }\n}\n\nfunction normalizeTime(time: number | Date): Date {\n  if (time instanceof Date) {\n    return time;\n  } else if (typeof time === 'number') {\n    return new Date(time * 1000);\n  } else {\n    throw new ApiError(ErrorCode.EINVAL, `Invalid time.`);\n  }\n}\n\nfunction normalizePath(p: string): string {\n  // Node doesn't allow null characters in paths.\n  if (p.indexOf('\\u0000') >= 0) {\n    throw new ApiError(ErrorCode.EINVAL, 'Path must be a string without null bytes.');\n  } else if (p === '') {\n    throw new ApiError(ErrorCode.EINVAL, 'Path must not be empty.');\n  }\n  return path.resolve(p);\n}\n\nfunction normalizeOptions(options: any, defEnc: string, defFlag: string, defMode: number): {encoding: string; flag: string; mode: number} {\n  switch (typeof options) {\n    case 'object':\n      return {\n        encoding: typeof options['encoding'] !== 'undefined' ? options['encoding'] : defEnc,\n        flag: typeof options['flag'] !== 'undefined' ? options['flag'] : defFlag,\n        mode: normalizeMode(options['mode'], defMode)\n      };\n    case 'string':\n      return {\n        encoding: options,\n        flag: defFlag,\n        mode: defMode\n      };\n    default:\n      return {\n        encoding: defEnc,\n        flag: defFlag,\n        mode: defMode\n      };\n  }\n}\n\n// The default callback is a NOP.\nfunction nopCb() {\n  // NOP.\n}\n\n/**\n * The node frontend to all filesystems.\n * This layer handles:\n *\n * * Sanity checking inputs.\n * * Normalizing paths.\n * * Resetting stack depth for asynchronous operations which may not go through\n *   the browser by wrapping all input callbacks using `setImmediate`.\n * * Performing the requested operation through the filesystem or the file\n *   descriptor, as appropriate.\n * * Handling optional arguments and setting default arguments.\n * @see http://nodejs.org/api/fs.html\n * @class\n */\nexport default class FS {\n  /* tslint:disable:variable-name */\n  // Exported fs.Stats.\n  public static Stats = Stats;\n  /* tslint:enable:variable-name */\n\n  public F_OK: number = 0;\n  public R_OK: number = 4;\n  public W_OK: number = 2;\n  public X_OK: number = 1;\n\n  private root: FileSystem = null;\n  private fdMap: {[fd: number]: File} = {};\n  private nextFd = 100;\n\n  public initialize(rootFS: FileSystem): FileSystem {\n    if (!(<any> rootFS).constructor.isAvailable()) {\n      throw new ApiError(ErrorCode.EINVAL, 'Tried to instantiate BrowserFS with an unavailable file system.');\n    }\n    return this.root = rootFS;\n  }\n\n  /**\n   * converts Date or number to a fractional UNIX timestamp\n   * Grabbed from NodeJS sources (lib/fs.js)\n   */\n  public _toUnixTimestamp(time: Date | number): number {\n    if (typeof time === 'number') {\n      return time;\n    } else if (time instanceof Date) {\n      return time.getTime() / 1000;\n    }\n    throw new Error(\"Cannot parse time: \" + time);\n  }\n\n  /**\n   * **NONSTANDARD**: Grab the FileSystem instance that backs this API.\n   * @return [BrowserFS.FileSystem | null] Returns null if the file system has\n   *   not been initialized.\n   */\n  public getRootFS(): FileSystem {\n    if (this.root) {\n      return this.root;\n    } else {\n      return null;\n    }\n  }\n\n  // FILE OR DIRECTORY METHODS\n\n  /**\n   * Asynchronous rename. No arguments other than a possible exception are given\n   * to the completion callback.\n   * @param [String] oldPath\n   * @param [String] newPath\n   * @param [Function(BrowserFS.ApiError)] callback\n   */\n  public rename(oldPath: string, newPath: string, cb: (err?: ApiError) => void = nopCb): void {\n    let newCb = wrapCb(cb, 1);\n    try {\n      this.root.rename(normalizePath(oldPath), normalizePath(newPath), newCb);\n    } catch (e) {\n      newCb(e);\n    }\n  }\n\n  /**\n   * Synchronous rename.\n   * @param [String] oldPath\n   * @param [String] newPath\n   */\n  public renameSync(oldPath: string, newPath: string): void {\n    this.root.renameSync(normalizePath(oldPath), normalizePath(newPath));\n  }\n\n  /**\n   * Test whether or not the given path exists by checking with the file system.\n   * Then call the callback argument with either true or false.\n   * @example Sample invocation\n   *   fs.exists('/etc/passwd', function (exists) {\n   *     util.debug(exists ? \"it's there\" : \"no passwd!\");\n   *   });\n   * @param [String] path\n   * @param [Function(Boolean)] callback\n   */\n  public exists(path: string, cb: (exists: boolean) => void = nopCb): void {\n    let newCb = wrapCb(cb, 1);\n    try {\n      return this.root.exists(normalizePath(path), newCb);\n    } catch (e) {\n      // Doesn't return an error. If something bad happens, we assume it just\n      // doesn't exist.\n      return newCb(false);\n    }\n  }\n\n  /**\n   * Test whether or not the given path exists by checking with the file system.\n   * @param [String] path\n   * @return [boolean]\n   */\n  public existsSync(path: string): boolean {\n    try {\n      return this.root.existsSync(normalizePath(path));\n    } catch (e) {\n      // Doesn't return an error. If something bad happens, we assume it just\n      // doesn't exist.\n      return false;\n    }\n  }\n\n  /**\n   * Asynchronous `stat`.\n   * @param [String] path\n   * @param [Function(BrowserFS.ApiError, BrowserFS.node.fs.Stats)] callback\n   */\n  public stat(path: string, cb: (err: ApiError, stats?: Stats) => any = nopCb): void {\n    let newCb = wrapCb(cb, 2);\n    try {\n      return this.root.stat(normalizePath(path), false, newCb);\n    } catch (e) {\n      return newCb(e, null);\n    }\n  }\n\n  /**\n   * Synchronous `stat`.\n   * @param [String] path\n   * @return [BrowserFS.node.fs.Stats]\n   */\n  public statSync(path: string): Stats {\n    return this.root.statSync(normalizePath(path), false);\n  }\n\n  /**\n   * Asynchronous `lstat`.\n   * `lstat()` is identical to `stat()`, except that if path is a symbolic link,\n   * then the link itself is stat-ed, not the file that it refers to.\n   * @param [String] path\n   * @param [Function(BrowserFS.ApiError, BrowserFS.node.fs.Stats)] callback\n   */\n  public lstat(path: string, cb: (err: ApiError, stats?: Stats) => any = nopCb): void {\n    let newCb = wrapCb(cb, 2);\n    try {\n      return this.root.stat(normalizePath(path), true, newCb);\n    } catch (e) {\n      return newCb(e, null);\n    }\n  }\n\n  /**\n   * Synchronous `lstat`.\n   * `lstat()` is identical to `stat()`, except that if path is a symbolic link,\n   * then the link itself is stat-ed, not the file that it refers to.\n   * @param [String] path\n   * @return [BrowserFS.node.fs.Stats]\n   */\n  public lstatSync(path: string): Stats {\n    return this.root.statSync(normalizePath(path), true);\n  }\n\n  // FILE-ONLY METHODS\n\n  /**\n   * Asynchronous `truncate`.\n   * @param [String] path\n   * @param [Number] len\n   * @param [Function(BrowserFS.ApiError)] callback\n   */\n  public truncate(path: string, cb?: (err?: ApiError) => void): void;\n  public truncate(path: string, len: number, cb?: (err?: ApiError) => void): void;\n  public truncate(path: string, arg2: any = 0, cb: (err?: ApiError) => void = nopCb): void {\n    let len = 0;\n    if (typeof arg2 === 'function') {\n      cb = arg2;\n    } else if (typeof arg2 === 'number') {\n      len = arg2;\n    }\n\n    let newCb = wrapCb(cb, 1);\n    try {\n      if (len < 0) {\n        throw new ApiError(ErrorCode.EINVAL);\n      }\n      return this.root.truncate(normalizePath(path), len, newCb);\n    } catch (e) {\n      return newCb(e);\n    }\n  }\n\n  /**\n   * Synchronous `truncate`.\n   * @param [String] path\n   * @param [Number] len\n   */\n  public truncateSync(path: string, len: number = 0): void {\n    if (len < 0) {\n      throw new ApiError(ErrorCode.EINVAL);\n    }\n    return this.root.truncateSync(normalizePath(path), len);\n  }\n\n  /**\n   * Asynchronous `unlink`.\n   * @param [String] path\n   * @param [Function(BrowserFS.ApiError)] callback\n   */\n  public unlink(path: string, cb: (err?: ApiError) => void = nopCb): void {\n    let newCb = wrapCb(cb, 1);\n    try {\n      return this.root.unlink(normalizePath(path), newCb);\n    } catch (e) {\n      return newCb(e);\n    }\n  }\n\n  /**\n   * Synchronous `unlink`.\n   * @param [String] path\n   */\n  public unlinkSync(path: string): void {\n    return this.root.unlinkSync(normalizePath(path));\n  }\n\n  /**\n   * Asynchronous file open.\n   * Exclusive mode ensures that path is newly created.\n   *\n   * `flags` can be:\n   *\n   * * `'r'` - Open file for reading. An exception occurs if the file does not exist.\n   * * `'r+'` - Open file for reading and writing. An exception occurs if the file does not exist.\n   * * `'rs'` - Open file for reading in synchronous mode. Instructs the filesystem to not cache writes.\n   * * `'rs+'` - Open file for reading and writing, and opens the file in synchronous mode.\n   * * `'w'` - Open file for writing. The file is created (if it does not exist) or truncated (if it exists).\n   * * `'wx'` - Like 'w' but opens the file in exclusive mode.\n   * * `'w+'` - Open file for reading and writing. The file is created (if it does not exist) or truncated (if it exists).\n   * * `'wx+'` - Like 'w+' but opens the file in exclusive mode.\n   * * `'a'` - Open file for appending. The file is created if it does not exist.\n   * * `'ax'` - Like 'a' but opens the file in exclusive mode.\n   * * `'a+'` - Open file for reading and appending. The file is created if it does not exist.\n   * * `'ax+'` - Like 'a+' but opens the file in exclusive mode.\n   *\n   * @see http://www.manpagez.com/man/2/open/\n   * @param [String] path\n   * @param [String] flags\n   * @param [Number?] mode defaults to `0644`\n   * @param [Function(BrowserFS.ApiError, BrowserFS.File)] callback\n   */\n  public open(path: string, flag: string, cb?: (err: ApiError, fd?: number) => any): void;\n  public open(path: string, flag: string, mode: number|string, cb?: (err: ApiError, fd?: number) => any): void;\n  public open(path: string, flag: string, arg2?: any, cb: (err: ApiError, fd?: number) => any = nopCb): void {\n    let mode = normalizeMode(arg2, 0x1a4);\n    cb = typeof arg2 === 'function' ? arg2 : cb;\n    let newCb = wrapCb(cb, 2);\n    try {\n      this.root.open(normalizePath(path), FileFlag.getFileFlag(flag), mode, (e: ApiError, file?: File) => {\n        if (file) {\n          newCb(e, this.getFdForFile(file));\n        } else {\n          newCb(e);\n        }\n      });\n    } catch (e) {\n      newCb(e, null);\n    }\n  }\n\n  /**\n   * Synchronous file open.\n   * @see http://www.manpagez.com/man/2/open/\n   * @param [String] path\n   * @param [String] flags\n   * @param [Number?] mode defaults to `0644`\n   * @return [BrowserFS.File]\n   */\n  public openSync(path: string, flag: string, mode: number|string = 0x1a4): number {\n    return this.getFdForFile(\n      this.root.openSync(normalizePath(path), FileFlag.getFileFlag(flag), normalizeMode(mode, 0x1a4)));\n  }\n\n  /**\n   * Asynchronously reads the entire contents of a file.\n   * @example Usage example\n   *   fs.readFile('/etc/passwd', function (err, data) {\n   *     if (err) throw err;\n   *     console.log(data);\n   *   });\n   * @param [String] filename\n   * @param [Object?] options\n   * @option options [String] encoding The string encoding for the file contents. Defaults to `null`.\n   * @option options [String] flag Defaults to `'r'`.\n   * @param [Function(BrowserFS.ApiError, String | BrowserFS.node.Buffer)] callback If no encoding is specified, then the raw buffer is returned.\n   */\n  public readFile(filename: string, cb: (err: ApiError, data?: Buffer) => void ): void;\n  public readFile(filename: string, options: { flag?: string; }, callback: (err: ApiError, data: Buffer) => void): void;\n  public readFile(filename: string, options: { encoding: string; flag?: string; }, callback: (err: ApiError, data: string) => void): void;\n  public readFile(filename: string, encoding: string, cb?: (err: ApiError, data?: string) => void ): void;\n  public readFile(filename: string, arg2: any = {}, cb: (err: ApiError, data?: any) => void = nopCb ) {\n    let options = normalizeOptions(arg2, null, 'r', null);\n    cb = typeof arg2 === 'function' ? arg2 : cb;\n    let newCb = wrapCb(cb, 2);\n    try {\n      let flag = FileFlag.getFileFlag(options['flag']);\n      if (!flag.isReadable()) {\n        return newCb(new ApiError(ErrorCode.EINVAL, 'Flag passed to readFile must allow for reading.'));\n      }\n      return this.root.readFile(normalizePath(filename), options.encoding, flag, newCb);\n    } catch (e) {\n      return newCb(e, null);\n    }\n  }\n\n  /**\n   * Synchronously reads the entire contents of a file.\n   * @param [String] filename\n   * @param [Object?] options\n   * @option options [String] encoding The string encoding for the file contents. Defaults to `null`.\n   * @option options [String] flag Defaults to `'r'`.\n   * @return [String | BrowserFS.node.Buffer]\n   */\n  public readFileSync(filename: string, options?: { flag?: string; }): Buffer;\n  public readFileSync(filename: string, options: { encoding: string; flag?: string; }): string;\n  public readFileSync(filename: string, encoding: string): string;\n  public readFileSync(filename: string, arg2: any = {}): any {\n    let options = normalizeOptions(arg2, null, 'r', null);\n    let flag = FileFlag.getFileFlag(options.flag);\n    if (!flag.isReadable()) {\n      throw new ApiError(ErrorCode.EINVAL, 'Flag passed to readFile must allow for reading.');\n    }\n    return this.root.readFileSync(normalizePath(filename), options.encoding, flag);\n  }\n\n  /**\n   * Asynchronously writes data to a file, replacing the file if it already\n   * exists.\n   *\n   * The encoding option is ignored if data is a buffer.\n   *\n   * @example Usage example\n   *   fs.writeFile('message.txt', 'Hello Node', function (err) {\n   *     if (err) throw err;\n   *     console.log('It\\'s saved!');\n   *   });\n   * @param [String] filename\n   * @param [String | BrowserFS.node.Buffer] data\n   * @param [Object?] options\n   * @option options [String] encoding Defaults to `'utf8'`.\n   * @option options [Number] mode Defaults to `0644`.\n   * @option options [String] flag Defaults to `'w'`.\n   * @param [Function(BrowserFS.ApiError)] callback\n   */\n  public writeFile(filename: string, data: any, cb?: (err?: ApiError) => void): void;\n  public writeFile(filename: string, data: any, encoding?: string, cb?: (err?: ApiError) => void): void;\n  public writeFile(filename: string, data: any, options?: { encoding?: string; mode?: string | number; flag?: string; }, cb?: (err?: ApiError) => void): void;\n  public writeFile(filename: string, data: any, arg3: any = {}, cb: (err?: ApiError) => void = nopCb): void {\n    let options = normalizeOptions(arg3, 'utf8', 'w', 0x1a4);\n    cb = typeof arg3 === 'function' ? arg3 : cb;\n    let newCb = wrapCb(cb, 1);\n    try {\n      let flag = FileFlag.getFileFlag(options.flag);\n      if (!flag.isWriteable()) {\n        return newCb(new ApiError(ErrorCode.EINVAL, 'Flag passed to writeFile must allow for writing.'));\n      }\n      return this.root.writeFile(normalizePath(filename), data, options.encoding, flag, options.mode, newCb);\n    } catch (e) {\n      return newCb(e);\n    }\n  }\n\n  /**\n   * Synchronously writes data to a file, replacing the file if it already\n   * exists.\n   *\n   * The encoding option is ignored if data is a buffer.\n   * @param [String] filename\n   * @param [String | BrowserFS.node.Buffer] data\n   * @param [Object?] options\n   * @option options [String] encoding Defaults to `'utf8'`.\n   * @option options [Number] mode Defaults to `0644`.\n   * @option options [String] flag Defaults to `'w'`.\n   */\n  public writeFileSync(filename: string, data: any, options?: { encoding?: string; mode?: number | string; flag?: string; }): void;\n  public writeFileSync(filename: string, data: any, encoding?: string): void;\n  public writeFileSync(filename: string, data: any, arg3?: any): void {\n    let options = normalizeOptions(arg3, 'utf8', 'w', 0x1a4);\n    let flag = FileFlag.getFileFlag(options.flag);\n    if (!flag.isWriteable()) {\n      throw new ApiError(ErrorCode.EINVAL, 'Flag passed to writeFile must allow for writing.');\n    }\n    return this.root.writeFileSync(normalizePath(filename), data, options.encoding, flag, options.mode);\n  }\n\n  /**\n   * Asynchronously append data to a file, creating the file if it not yet\n   * exists.\n   *\n   * @example Usage example\n   *   fs.appendFile('message.txt', 'data to append', function (err) {\n   *     if (err) throw err;\n   *     console.log('The \"data to append\" was appended to file!');\n   *   });\n   * @param [String] filename\n   * @param [String | BrowserFS.node.Buffer] data\n   * @param [Object?] options\n   * @option options [String] encoding Defaults to `'utf8'`.\n   * @option options [Number] mode Defaults to `0644`.\n   * @option options [String] flag Defaults to `'a'`.\n   * @param [Function(BrowserFS.ApiError)] callback\n   */\n  public appendFile(filename: string, data: any, cb?: (err: ApiError) => void): void;\n  public appendFile(filename: string, data: any, options?: { encoding?: string; mode?: number|string; flag?: string; }, cb?: (err: ApiError) => void): void;\n  public appendFile(filename: string, data: any, encoding?: string, cb?: (err: ApiError) => void): void;\n  public appendFile(filename: string, data: any, arg3?: any, cb: (err: ApiError) => void = nopCb): void {\n    let options = normalizeOptions(arg3, 'utf8', 'a', 0x1a4);\n    cb = typeof arg3 === 'function' ? arg3 : cb;\n    let newCb = wrapCb(cb, 1);\n    try {\n      let flag = FileFlag.getFileFlag(options.flag);\n      if (!flag.isAppendable()) {\n        return newCb(new ApiError(ErrorCode.EINVAL, 'Flag passed to appendFile must allow for appending.'));\n      }\n      this.root.appendFile(normalizePath(filename), data, options.encoding, flag, options.mode, newCb);\n    } catch (e) {\n      newCb(e);\n    }\n  }\n\n  /**\n   * Asynchronously append data to a file, creating the file if it not yet\n   * exists.\n   *\n   * @example Usage example\n   *   fs.appendFile('message.txt', 'data to append', function (err) {\n   *     if (err) throw err;\n   *     console.log('The \"data to append\" was appended to file!');\n   *   });\n   * @param [String] filename\n   * @param [String | BrowserFS.node.Buffer] data\n   * @param [Object?] options\n   * @option options [String] encoding Defaults to `'utf8'`.\n   * @option options [Number] mode Defaults to `0644`.\n   * @option options [String] flag Defaults to `'a'`.\n   */\n  public appendFileSync(filename: string, data: any, options?: { encoding?: string; mode?: number | string; flag?: string; }): void;\n  public appendFileSync(filename: string, data: any, encoding?: string): void;\n  public appendFileSync(filename: string, data: any, arg3?: any): void {\n    let options = normalizeOptions(arg3, 'utf8', 'a', 0x1a4);\n    let flag = FileFlag.getFileFlag(options.flag);\n    if (!flag.isAppendable()) {\n      throw new ApiError(ErrorCode.EINVAL, 'Flag passed to appendFile must allow for appending.');\n    }\n    return this.root.appendFileSync(normalizePath(filename), data, options.encoding, flag, options.mode);\n  }\n\n  // FILE DESCRIPTOR METHODS\n\n  /**\n   * Asynchronous `fstat`.\n   * `fstat()` is identical to `stat()`, except that the file to be stat-ed is\n   * specified by the file descriptor `fd`.\n   * @param [BrowserFS.File] fd\n   * @param [Function(BrowserFS.ApiError, BrowserFS.node.fs.Stats)] callback\n   */\n  public fstat(fd: number, cb: (err: ApiError, stats?: Stats) => any = nopCb): void {\n    let newCb = wrapCb(cb, 2);\n    try {\n      let file = this.fd2file(fd);\n      file.stat(newCb);\n    } catch (e) {\n      newCb(e);\n    }\n  }\n\n  /**\n   * Synchronous `fstat`.\n   * `fstat()` is identical to `stat()`, except that the file to be stat-ed is\n   * specified by the file descriptor `fd`.\n   * @param [BrowserFS.File] fd\n   * @return [BrowserFS.node.fs.Stats]\n   */\n  public fstatSync(fd: number): Stats {\n    return this.fd2file(fd).statSync();\n  }\n\n  /**\n   * Asynchronous close.\n   * @param [BrowserFS.File] fd\n   * @param [Function(BrowserFS.ApiError)] callback\n   */\n  public close(fd: number, cb: (e?: ApiError) => void = nopCb): void {\n    let newCb = wrapCb(cb, 1);\n    try {\n      this.fd2file(fd).close((e: ApiError) => {\n        if (!e) {\n          this.closeFd(fd);\n        }\n        newCb(e);\n      });\n    } catch (e) {\n      newCb(e);\n    }\n  }\n\n  /**\n   * Synchronous close.\n   * @param [BrowserFS.File] fd\n   */\n  public closeSync(fd: number): void {\n    this.fd2file(fd).closeSync();\n    this.closeFd(fd);\n  }\n\n  /**\n   * Asynchronous ftruncate.\n   * @param [BrowserFS.File] fd\n   * @param [Number] len\n   * @param [Function(BrowserFS.ApiError)] callback\n   */\n  public ftruncate(fd: number, cb?: (err?: ApiError) => void): void;\n  public ftruncate(fd: number, len?: number, cb?: (err?: ApiError) => void): void;\n  public ftruncate(fd: number, arg2?: any, cb: (err?: ApiError) => void = nopCb): void {\n    let length = typeof arg2 === 'number' ? arg2 : 0;\n    cb = typeof arg2 === 'function' ? arg2 : cb;\n    let newCb = wrapCb(cb, 1);\n    try {\n      let file = this.fd2file(fd);\n      if (length < 0) {\n        throw new ApiError(ErrorCode.EINVAL);\n      }\n      file.truncate(length, newCb);\n    } catch (e) {\n      newCb(e);\n    }\n  }\n\n  /**\n   * Synchronous ftruncate.\n   * @param [BrowserFS.File] fd\n   * @param [Number] len\n   */\n  public ftruncateSync(fd: number, len: number = 0): void {\n    let file = this.fd2file(fd);\n    if (len < 0) {\n      throw new ApiError(ErrorCode.EINVAL);\n    }\n    file.truncateSync(len);\n  }\n\n  /**\n   * Asynchronous fsync.\n   * @param [BrowserFS.File] fd\n   * @param [Function(BrowserFS.ApiError)] callback\n   */\n  public fsync(fd: number, cb: (err?: ApiError) => void = nopCb): void {\n    let newCb = wrapCb(cb, 1);\n    try {\n      this.fd2file(fd).sync(newCb);\n    } catch (e) {\n      newCb(e);\n    }\n  }\n\n  /**\n   * Synchronous fsync.\n   * @param [BrowserFS.File] fd\n   */\n  public fsyncSync(fd: number): void {\n    this.fd2file(fd).syncSync();\n  }\n\n  /**\n   * Asynchronous fdatasync.\n   * @param [BrowserFS.File] fd\n   * @param [Function(BrowserFS.ApiError)] callback\n   */\n  public fdatasync(fd: number, cb: (err?: ApiError) => void = nopCb): void {\n    let newCb = wrapCb(cb, 1);\n    try {\n      this.fd2file(fd).datasync(newCb);\n    } catch (e) {\n      newCb(e);\n    }\n  }\n\n  /**\n   * Synchronous fdatasync.\n   * @param [BrowserFS.File] fd\n   */\n  public fdatasyncSync(fd: number): void {\n    this.fd2file(fd).datasyncSync();\n  }\n\n  /**\n   * Write buffer to the file specified by `fd`.\n   * Note that it is unsafe to use fs.write multiple times on the same file\n   * without waiting for the callback.\n   * @param [BrowserFS.File] fd\n   * @param [BrowserFS.node.Buffer] buffer Buffer containing the data to write to\n   *   the file.\n   * @param [Number] offset Offset in the buffer to start reading data from.\n   * @param [Number] length The amount of bytes to write to the file.\n   * @param [Number] position Offset from the beginning of the file where this\n   *   data should be written. If position is null, the data will be written at\n   *   the current position.\n   * @param [Function(BrowserFS.ApiError, Number, BrowserFS.node.Buffer)]\n   *   callback The number specifies the number of bytes written into the file.\n   */\n  public write(fd: number, buffer: Buffer, offset: number, length: number, cb?: (err: ApiError, written: number, buffer: Buffer) => void): void;\n  public write(fd: number, buffer: Buffer, offset: number, length: number, position: number, cb?: (err: ApiError, written: number, buffer: Buffer) => void): void;\n  public write(fd: number, data: any, cb?: (err: ApiError, written: number, str: string) => any): void;\n  public write(fd: number, data: any, position: number, cb?: (err: ApiError, written: number, str: string) => any): void;\n  public write(fd: number, data: any, position: number, encoding: string, cb?: (err: ApiError, written: number, str: string) => void): void;\n  public write(fd: number, arg2: any, arg3?: any, arg4?: any, arg5?: any, cb: (err: ApiError, written?: number, buffer?: Buffer) => void = nopCb): void {\n    let buffer: Buffer, offset: number, length: number, position: number = null;\n    if (typeof arg2 === 'string') {\n      // Signature 1: (fd, string, [position?, [encoding?]], cb?)\n      let encoding = 'utf8';\n      switch (typeof arg3) {\n        case 'function':\n          // (fd, string, cb)\n          cb = arg3;\n          break;\n        case 'number':\n          // (fd, string, position, encoding?, cb?)\n          position = arg3;\n          encoding = typeof arg4 === 'string' ? arg4 : 'utf8';\n          cb = typeof arg5 === 'function' ? arg5 : cb;\n          break;\n        default:\n          // ...try to find the callback and get out of here!\n          cb = typeof arg4 === 'function' ? arg4 : typeof arg5 === 'function' ? arg5 : cb;\n          return cb(new ApiError(ErrorCode.EINVAL, 'Invalid arguments.'));\n      }\n      buffer = new Buffer(arg2, encoding);\n      offset = 0;\n      length = buffer.length;\n    } else {\n      // Signature 2: (fd, buffer, offset, length, position?, cb?)\n      buffer = arg2;\n      offset = arg3;\n      length = arg4;\n      position = typeof arg5 === 'number' ? arg5 : null;\n      cb = typeof arg5 === 'function' ? arg5 : cb;\n    }\n\n    let newCb = wrapCb(cb, 3);\n    try {\n      let file = this.fd2file(fd);\n      if (position === undefined || position === null) {\n        position = file.getPos();\n      }\n      file.write(buffer, offset, length, position, newCb);\n    } catch (e) {\n      newCb(e);\n    }\n  }\n\n  /**\n   * Write buffer to the file specified by `fd`.\n   * Note that it is unsafe to use fs.write multiple times on the same file\n   * without waiting for it to return.\n   * @param [BrowserFS.File] fd\n   * @param [BrowserFS.node.Buffer] buffer Buffer containing the data to write to\n   *   the file.\n   * @param [Number] offset Offset in the buffer to start reading data from.\n   * @param [Number] length The amount of bytes to write to the file.\n   * @param [Number] position Offset from the beginning of the file where this\n   *   data should be written. If position is null, the data will be written at\n   *   the current position.\n   * @return [Number]\n   */\n  public writeSync(fd: number, buffer: Buffer, offset: number, length: number, position?: number): number;\n  public writeSync(fd: number, data: string, position?: number, encoding?: string): number;\n  public writeSync(fd: number, arg2: any, arg3?: any, arg4?: any, arg5?: any): number {\n    let buffer: Buffer, offset: number = 0, length: number, position: number;\n    if (typeof arg2 === 'string') {\n      // Signature 1: (fd, string, [position?, [encoding?]])\n      position = typeof arg3 === 'number' ? arg3 : null;\n      let encoding = typeof arg4 === 'string' ? arg4 : 'utf8';\n      offset = 0;\n      buffer = new Buffer(arg2, encoding);\n      length = buffer.length;\n    } else {\n      // Signature 2: (fd, buffer, offset, length, position?)\n      buffer = arg2;\n      offset = arg3;\n      length = arg4;\n      position = typeof arg5 === 'number' ? arg5 : null;\n    }\n\n    let file = this.fd2file(fd);\n    if (position === undefined || position === null) {\n      position = file.getPos();\n    }\n    return file.writeSync(buffer, offset, length, position);\n  }\n\n  /**\n   * Read data from the file specified by `fd`.\n   * @param [BrowserFS.File] fd\n   * @param [BrowserFS.node.Buffer] buffer The buffer that the data will be\n   *   written to.\n   * @param [Number] offset The offset within the buffer where writing will\n   *   start.\n   * @param [Number] length An integer specifying the number of bytes to read.\n   * @param [Number] position An integer specifying where to begin reading from\n   *   in the file. If position is null, data will be read from the current file\n   *   position.\n   * @param [Function(BrowserFS.ApiError, Number, BrowserFS.node.Buffer)]\n   *   callback The number is the number of bytes read\n   */\n  public read(fd: number, length: number, position: number, encoding: string, cb?: (err: ApiError, data?: string, bytesRead?: number) => void): void;\n  public read(fd: number, buffer: Buffer, offset: number, length: number, position: number, cb?: (err: ApiError, bytesRead?: number, buffer?: Buffer) => void): void;\n  public read(fd: number, arg2: any, arg3: any, arg4: any, arg5?: any, cb: (err: ApiError, arg2?: any, arg3?: any) => void = nopCb): void {\n    let position: number, offset: number, length: number, buffer: Buffer, newCb: (err: ApiError, bytesRead?: number, buffer?: Buffer) => void;\n    if (typeof arg2 === 'number') {\n      // legacy interface\n      // (fd, length, position, encoding, callback)\n      length = arg2;\n      position = arg3;\n      let encoding = arg4;\n      cb = typeof arg5 === 'function' ? arg5 : cb;\n      offset = 0;\n      buffer = new Buffer(length);\n      // XXX: Inefficient.\n      // Wrap the cb so we shelter upper layers of the API from these\n      // shenanigans.\n      newCb = wrapCb((function(err: any, bytesRead: number, buf: Buffer) {\n        if (err) {\n          return cb(err);\n        }\n        cb(err, buf.toString(encoding), bytesRead);\n      }), 3);\n    } else {\n      buffer = arg2;\n      offset = arg3;\n      length = arg4;\n      position = arg5;\n      newCb = wrapCb(cb, 3);\n    }\n\n    try {\n      let file = this.fd2file(fd);\n      if (position === undefined || position === null) {\n        position = file.getPos();\n      }\n      file.read(buffer, offset, length, position, newCb);\n    } catch (e) {\n      newCb(e);\n    }\n  }\n\n  /**\n   * Read data from the file specified by `fd`.\n   * @param [BrowserFS.File] fd\n   * @param [BrowserFS.node.Buffer] buffer The buffer that the data will be\n   *   written to.\n   * @param [Number] offset The offset within the buffer where writing will\n   *   start.\n   * @param [Number] length An integer specifying the number of bytes to read.\n   * @param [Number] position An integer specifying where to begin reading from\n   *   in the file. If position is null, data will be read from the current file\n   *   position.\n   * @return [Number]\n   */\n  public readSync(fd: number, length: number, position: number, encoding: string): string;\n  public readSync(fd: number, buffer: Buffer, offset: number, length: number, position: number): number;\n  public readSync(fd: number, arg2: any, arg3: any, arg4: any, arg5?: any): any {\n    let shenanigans = false;\n    let buffer: Buffer, offset: number, length: number, position: number, encoding: string;\n    if (typeof arg2 === 'number') {\n      length = arg2;\n      position = arg3;\n      encoding = arg4;\n      offset = 0;\n      buffer = new Buffer(length);\n      shenanigans = true;\n    } else {\n      buffer = arg2;\n      offset = arg3;\n      length = arg4;\n      position = arg5;\n    }\n    let file = this.fd2file(fd);\n    if (position === undefined || position === null) {\n      position = file.getPos();\n    }\n\n    let rv = file.readSync(buffer, offset, length, position);\n    if (!shenanigans) {\n      return rv;\n    } else {\n      return [buffer.toString(encoding), rv];\n    }\n  }\n\n  /**\n   * Asynchronous `fchown`.\n   * @param [BrowserFS.File] fd\n   * @param [Number] uid\n   * @param [Number] gid\n   * @param [Function(BrowserFS.ApiError)] callback\n   */\n  public fchown(fd: number, uid: number, gid: number, callback: (e?: ApiError) => void = nopCb): void {\n    let newCb = wrapCb(callback, 1);\n    try {\n      this.fd2file(fd).chown(uid, gid, newCb);\n    } catch (e) {\n      newCb(e);\n    }\n  }\n\n  /**\n   * Synchronous `fchown`.\n   * @param [BrowserFS.File] fd\n   * @param [Number] uid\n   * @param [Number] gid\n   */\n  public fchownSync(fd: number, uid: number, gid: number): void {\n    this.fd2file(fd).chownSync(uid, gid);\n  }\n\n  /**\n   * Asynchronous `fchmod`.\n   * @param [BrowserFS.File] fd\n   * @param [Number] mode\n   * @param [Function(BrowserFS.ApiError)] callback\n   */\n  public fchmod(fd: number, mode: string | number, cb?: (e?: ApiError) => void): void {\n    let newCb = wrapCb(cb, 1);\n    try {\n      let numMode = typeof mode === 'string' ? parseInt(mode, 8) : mode;\n      this.fd2file(fd).chmod(numMode, newCb);\n    } catch (e) {\n      newCb(e);\n    }\n  }\n\n  /**\n   * Synchronous `fchmod`.\n   * @param [BrowserFS.File] fd\n   * @param [Number] mode\n   */\n  public fchmodSync(fd: number, mode: number | string): void {\n    let numMode = typeof mode === 'string' ? parseInt(mode, 8) : mode;\n    this.fd2file(fd).chmodSync(numMode);\n  }\n\n  /**\n   * Change the file timestamps of a file referenced by the supplied file\n   * descriptor.\n   * @param [BrowserFS.File] fd\n   * @param [Date] atime\n   * @param [Date] mtime\n   * @param [Function(BrowserFS.ApiError)] callback\n   */\n  public futimes(fd: number, atime: number | Date, mtime: number | Date, cb: (e?: ApiError) => void = nopCb): void {\n    let newCb = wrapCb(cb, 1);\n    try {\n      let file = this.fd2file(fd);\n      if (typeof atime === 'number') {\n        atime = new Date(atime * 1000);\n      }\n      if (typeof mtime === 'number') {\n        mtime = new Date(mtime * 1000);\n      }\n      file.utimes(atime, mtime, newCb);\n    } catch (e) {\n      newCb(e);\n    }\n  }\n\n  /**\n   * Change the file timestamps of a file referenced by the supplied file\n   * descriptor.\n   * @param [BrowserFS.File] fd\n   * @param [Date] atime\n   * @param [Date] mtime\n   */\n  public futimesSync(fd: number, atime: number | Date, mtime: number | Date): void {\n    this.fd2file(fd).utimesSync(normalizeTime(atime), normalizeTime(mtime));\n  }\n\n  // DIRECTORY-ONLY METHODS\n\n  /**\n   * Asynchronous `rmdir`.\n   * @param [String] path\n   * @param [Function(BrowserFS.ApiError)] callback\n   */\n  public rmdir(path: string, cb: (e?: ApiError) => void = nopCb): void {\n    let newCb = wrapCb(cb, 1);\n    try {\n      path = normalizePath(path);\n      this.root.rmdir(path, newCb);\n    } catch (e) {\n      newCb(e);\n    }\n  }\n\n  /**\n   * Synchronous `rmdir`.\n   * @param [String] path\n   */\n  public rmdirSync(path: string): void {\n    path = normalizePath(path);\n    return this.root.rmdirSync(path);\n  }\n\n  /**\n   * Asynchronous `mkdir`.\n   * @param [String] path\n   * @param [Number?] mode defaults to `0777`\n   * @param [Function(BrowserFS.ApiError)] callback\n   */\n  public mkdir(path: string, mode?: any, cb: (e?: ApiError) => void = nopCb): void {\n    if (typeof mode === 'function') {\n      cb = mode;\n      mode = 0x1ff;\n    }\n    let newCb = wrapCb(cb, 1);\n    try {\n      path = normalizePath(path);\n      this.root.mkdir(path, mode, newCb);\n    } catch (e) {\n      newCb(e);\n    }\n  }\n\n  /**\n   * Synchronous `mkdir`.\n   * @param [String] path\n   * @param [Number?] mode defaults to `0777`\n   */\n  public mkdirSync(path: string, mode?: number | string): void {\n    this.root.mkdirSync(normalizePath(path), normalizeMode(mode, 0x1ff));\n  }\n\n  /**\n   * Asynchronous `readdir`. Reads the contents of a directory.\n   * The callback gets two arguments `(err, files)` where `files` is an array of\n   * the names of the files in the directory excluding `'.'` and `'..'`.\n   * @param [String] path\n   * @param [Function(BrowserFS.ApiError, String[])] callback\n   */\n  public readdir(path: string, cb: (err: ApiError, files?: string[]) => void = nopCb): void {\n    let newCb = <(err: ApiError, files?: string[]) => void> wrapCb(cb, 2);\n    try {\n      path = normalizePath(path);\n      this.root.readdir(path, newCb);\n    } catch (e) {\n      newCb(e);\n    }\n  }\n\n  /**\n   * Synchronous `readdir`. Reads the contents of a directory.\n   * @param [String] path\n   * @return [String[]]\n   */\n  public readdirSync(path: string): string[] {\n    path = normalizePath(path);\n    return this.root.readdirSync(path);\n  }\n\n  // SYMLINK METHODS\n\n  /**\n   * Asynchronous `link`.\n   * @param [String] srcpath\n   * @param [String] dstpath\n   * @param [Function(BrowserFS.ApiError)] callback\n   */\n  public link(srcpath: string, dstpath: string, cb: (e?: ApiError) => void = nopCb): void {\n    let newCb = wrapCb(cb, 1);\n    try {\n      srcpath = normalizePath(srcpath);\n      dstpath = normalizePath(dstpath);\n      this.root.link(srcpath, dstpath, newCb);\n    } catch (e) {\n      newCb(e);\n    }\n  }\n\n  /**\n   * Synchronous `link`.\n   * @param [String] srcpath\n   * @param [String] dstpath\n   */\n  public linkSync(srcpath: string, dstpath: string): void {\n    srcpath = normalizePath(srcpath);\n    dstpath = normalizePath(dstpath);\n    return this.root.linkSync(srcpath, dstpath);\n  }\n\n  /**\n   * Asynchronous `symlink`.\n   * @param [String] srcpath\n   * @param [String] dstpath\n   * @param [String?] type can be either `'dir'` or `'file'` (default is `'file'`)\n   * @param [Function(BrowserFS.ApiError)] callback\n   */\n  public symlink(srcpath: string, dstpath: string, cb?: (e?: ApiError) => void): void;\n  public symlink(srcpath: string, dstpath: string, type?: string, cb?: (e?: ApiError) => void): void;\n  public symlink(srcpath: string, dstpath: string, arg3?: any, cb: (e?: ApiError) => void = nopCb): void {\n    let type = typeof arg3 === 'string' ? arg3 : 'file';\n    cb = typeof arg3 === 'function' ? arg3 : cb;\n    let newCb = wrapCb(cb, 1);\n    try {\n      if (type !== 'file' && type !== 'dir') {\n        return newCb(new ApiError(ErrorCode.EINVAL, \"Invalid type: \" + type));\n      }\n      srcpath = normalizePath(srcpath);\n      dstpath = normalizePath(dstpath);\n      this.root.symlink(srcpath, dstpath, type, newCb);\n    } catch (e) {\n      newCb(e);\n    }\n  }\n\n  /**\n   * Synchronous `symlink`.\n   * @param [String] srcpath\n   * @param [String] dstpath\n   * @param [String?] type can be either `'dir'` or `'file'` (default is `'file'`)\n   */\n  public symlinkSync(srcpath: string, dstpath: string, type?: string): void {\n    if (!type) {\n      type = 'file';\n    } else if (type !== 'file' && type !== 'dir') {\n      throw new ApiError(ErrorCode.EINVAL, \"Invalid type: \" + type);\n    }\n    srcpath = normalizePath(srcpath);\n    dstpath = normalizePath(dstpath);\n    return this.root.symlinkSync(srcpath, dstpath, type);\n  }\n\n  /**\n   * Asynchronous readlink.\n   * @param [String] path\n   * @param [Function(BrowserFS.ApiError, String)] callback\n   */\n  public readlink(path: string, cb: (err: ApiError, linkString?: string) => any = nopCb): void {\n    let newCb = wrapCb(cb, 2);\n    try {\n      path = normalizePath(path);\n      this.root.readlink(path, newCb);\n    } catch (e) {\n      newCb(e);\n    }\n  }\n\n  /**\n   * Synchronous readlink.\n   * @param [String] path\n   * @return [String]\n   */\n  public readlinkSync(path: string): string {\n    path = normalizePath(path);\n    return this.root.readlinkSync(path);\n  }\n\n  // PROPERTY OPERATIONS\n\n  /**\n   * Asynchronous `chown`.\n   * @param [String] path\n   * @param [Number] uid\n   * @param [Number] gid\n   * @param [Function(BrowserFS.ApiError)] callback\n   */\n  public chown(path: string, uid: number, gid: number, cb: (e?: ApiError) => void = nopCb): void {\n    let newCb = wrapCb(cb, 1);\n    try {\n      path = normalizePath(path);\n      this.root.chown(path, false, uid, gid, newCb);\n    } catch (e) {\n      newCb(e);\n    }\n  }\n\n  /**\n   * Synchronous `chown`.\n   * @param [String] path\n   * @param [Number] uid\n   * @param [Number] gid\n   */\n  public chownSync(path: string, uid: number, gid: number): void {\n    path = normalizePath(path);\n    this.root.chownSync(path, false, uid, gid);\n  }\n\n  /**\n   * Asynchronous `lchown`.\n   * @param [String] path\n   * @param [Number] uid\n   * @param [Number] gid\n   * @param [Function(BrowserFS.ApiError)] callback\n   */\n  public lchown(path: string, uid: number, gid: number, cb: (e?: ApiError) => void = nopCb): void {\n    let newCb = wrapCb(cb, 1);\n    try {\n      path = normalizePath(path);\n      this.root.chown(path, true, uid, gid, newCb);\n    } catch (e) {\n      newCb(e);\n    }\n  }\n\n  /**\n   * Synchronous `lchown`.\n   * @param [String] path\n   * @param [Number] uid\n   * @param [Number] gid\n   */\n  public lchownSync(path: string, uid: number, gid: number): void {\n    path = normalizePath(path);\n    this.root.chownSync(path, true, uid, gid);\n  }\n\n  /**\n   * Asynchronous `chmod`.\n   * @param [String] path\n   * @param [Number] mode\n   * @param [Function(BrowserFS.ApiError)] callback\n   */\n  public chmod(path: string, mode: number | string, cb: (e?: ApiError) => void = nopCb): void {\n    let newCb = wrapCb(cb, 1);\n    try {\n      let numMode = normalizeMode(mode, -1);\n      if (numMode < 0) {\n        throw new ApiError(ErrorCode.EINVAL, `Invalid mode.`);\n      }\n      this.root.chmod(normalizePath(path), false, numMode, newCb);\n    } catch (e) {\n      newCb(e);\n    }\n  }\n\n  /**\n   * Synchronous `chmod`.\n   * @param [String] path\n   * @param [Number] mode\n   */\n  public chmodSync(path: string, mode: string|number): void {\n    let numMode = normalizeMode(mode, -1);\n    if (numMode < 0) {\n      throw new ApiError(ErrorCode.EINVAL, `Invalid mode.`);\n    }\n    path = normalizePath(path);\n    this.root.chmodSync(path, false, numMode);\n  }\n\n  /**\n   * Asynchronous `lchmod`.\n   * @param [String] path\n   * @param [Number] mode\n   * @param [Function(BrowserFS.ApiError)] callback\n   */\n  public lchmod(path: string, mode: number|string, cb: (e?: ApiError) => void = nopCb): void {\n    let newCb = wrapCb(cb, 1);\n    try {\n      let numMode = normalizeMode(mode, -1);\n      if (numMode < 0) {\n        throw new ApiError(ErrorCode.EINVAL, `Invalid mode.`);\n      }\n      this.root.chmod(normalizePath(path), true, numMode, newCb);\n    } catch (e) {\n      newCb(e);\n    }\n  }\n\n  /**\n   * Synchronous `lchmod`.\n   * @param [String] path\n   * @param [Number] mode\n   */\n  public lchmodSync(path: string, mode: number|string): void {\n    let numMode = normalizeMode(mode, -1);\n    if (numMode < 1) {\n      throw new ApiError(ErrorCode.EINVAL, `Invalid mode.`);\n    }\n    this.root.chmodSync(normalizePath(path), true, numMode);\n  }\n\n  /**\n   * Change file timestamps of the file referenced by the supplied path.\n   * @param [String] path\n   * @param [Date] atime\n   * @param [Date] mtime\n   * @param [Function(BrowserFS.ApiError)] callback\n   */\n  public utimes(path: string, atime: number|Date, mtime: number|Date, cb: (e?: ApiError) => void = nopCb): void {\n    let newCb = wrapCb(cb, 1);\n    try {\n      this.root.utimes(normalizePath(path), normalizeTime(atime), normalizeTime(mtime), newCb);\n    } catch (e) {\n      newCb(e);\n    }\n  }\n\n  /**\n   * Change file timestamps of the file referenced by the supplied path.\n   * @param [String] path\n   * @param [Date] atime\n   * @param [Date] mtime\n   */\n  public utimesSync(path: string, atime: number|Date, mtime: number|Date): void {\n    this.root.utimesSync(normalizePath(path), normalizeTime(atime), normalizeTime(mtime));\n  }\n\n  /**\n   * Asynchronous `realpath`. The callback gets two arguments\n   * `(err, resolvedPath)`. May use `process.cwd` to resolve relative paths.\n   *\n   * @example Usage example\n   *   let cache = {'/etc':'/private/etc'};\n   *   fs.realpath('/etc/passwd', cache, function (err, resolvedPath) {\n   *     if (err) throw err;\n   *     console.log(resolvedPath);\n   *   });\n   *\n   * @param [String] path\n   * @param [Object?] cache An object literal of mapped paths that can be used to\n   *   force a specific path resolution or avoid additional `fs.stat` calls for\n   *   known real paths.\n   * @param [Function(BrowserFS.ApiError, String)] callback\n   */\n  public realpath(path: string, cb?: (err: ApiError, resolvedPath?: string) => any): void;\n  public realpath(path: string, cache: {[path: string]: string}, cb: (err: ApiError, resolvedPath?: string) => any): void;\n  public realpath(path: string, arg2?: any, cb: (err: ApiError, resolvedPath?: string) => any = nopCb): void {\n    let cache = typeof(arg2) === 'object' ? arg2 : {};\n    cb = typeof(arg2) === 'function' ? arg2 : nopCb;\n    let newCb = <(err: ApiError, resolvedPath?: string) => any> wrapCb(cb, 2);\n    try {\n      path = normalizePath(path);\n      this.root.realpath(path, cache, newCb);\n    } catch (e) {\n      newCb(e);\n    }\n  }\n\n  /**\n   * Synchronous `realpath`.\n   * @param [String] path\n   * @param [Object?] cache An object literal of mapped paths that can be used to\n   *   force a specific path resolution or avoid additional `fs.stat` calls for\n   *   known real paths.\n   * @return [String]\n   */\n  public realpathSync(path: string, cache: {[path: string]: string} = {}): string {\n    path = normalizePath(path);\n    return this.root.realpathSync(path, cache);\n  }\n\n  public watchFile(filename: string, listener: (curr: Stats, prev: Stats) => void): void;\n  public watchFile(filename: string, options: { persistent?: boolean; interval?: number; }, listener: (curr: Stats, prev: Stats) => void): void;\n  public watchFile(filename: string, arg2: any, listener: (curr: Stats, prev: Stats) => void = nopCb): void {\n    throw new ApiError(ErrorCode.ENOTSUP);\n  }\n\n  public unwatchFile(filename: string, listener: (curr: Stats, prev: Stats) => void = nopCb): void {\n    throw new ApiError(ErrorCode.ENOTSUP);\n  }\n\n  public watch(filename: string, listener?: (event: string, filename: string) => any): _fs.FSWatcher;\n  public watch(filename: string, options: { persistent?: boolean; }, listener?: (event: string, filename: string) => any): _fs.FSWatcher;\n  public watch(filename: string, arg2: any, listener: (event: string, filename: string) => any = nopCb): _fs.FSWatcher {\n    throw new ApiError(ErrorCode.ENOTSUP);\n  }\n\n  public access(path: string, callback: (err: ApiError) => void): void;\n  public access(path: string, mode: number, callback: (err: ApiError) => void): void;\n  public access(path: string, arg2: any, cb: (e: ApiError) => void = nopCb): void {\n    throw new ApiError(ErrorCode.ENOTSUP);\n  }\n\n  public accessSync(path: string, mode?: number): void {\n    throw new ApiError(ErrorCode.ENOTSUP);\n  }\n\n  public createReadStream(path: string, options?: {\n        flags?: string;\n        encoding?: string;\n        fd?: number;\n        mode?: number;\n        autoClose?: boolean;\n    }): _fs.ReadStream {\n    throw new ApiError(ErrorCode.ENOTSUP);\n  }\n\n  public createWriteStream(path: string, options?: {\n        flags?: string;\n        encoding?: string;\n        fd?: number;\n        mode?: number;\n    }): _fs.WriteStream {\n    throw new ApiError(ErrorCode.ENOTSUP);\n  }\n\n  /**\n   * For unit testing. Passes all incoming callbacks to cbWrapper for wrapping.\n   */\n  public wrapCallbacks(cbWrapper: (cb: Function, args: number) => Function) {\n    wrapCb = cbWrapper;\n  }\n\n  private getFdForFile(file: File): number {\n    let fd = this.nextFd++;\n    this.fdMap[fd] = file;\n    return fd;\n  }\n  private fd2file(fd: number): File {\n    let rv = this.fdMap[fd];\n    if (rv) {\n      return rv;\n    } else {\n      throw new ApiError(ErrorCode.EBADF, 'Invalid file descriptor.');\n    }\n  }\n  private closeFd(fd: number): void {\n    delete this.fdMap[fd];\n  }\n}\n\nexport interface FSModule extends FS {\n  /**\n   * The FS constructor.\n   */\n  FS: typeof FS;\n  /**\n   * Retrieve the FS object backing the fs module.\n   */\n  getFSModule(): FS;\n  /**\n   * Set the FS object backing the fs module.\n   */\n  changeFSModule(newFs: FS): void;\n}\n"]}