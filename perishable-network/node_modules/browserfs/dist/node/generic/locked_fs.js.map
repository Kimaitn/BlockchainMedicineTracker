{"version":3,"file":"locked_fs.js","sourceRoot":"","sources":["../../../src/generic/locked_fs.ts"],"names":[],"mappings":"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","sourcesContent":["import Mutex from './mutex';\nimport {FileSystem} from '../core/file_system';\nimport {ApiError} from '../core/api_error';\nimport {FileFlag} from '../core/file_flag';\nimport {default as Stats} from '../core/node_fs_stats';\nimport {File} from '../core/file';\n\n/**\n * This class serializes access to an underlying async filesystem.\n * For example, on an OverlayFS instance with an async lower\n * directory operations like rename and rmdir may involve multiple\n * requests involving both the upper and lower filesystems -- they\n * are not executed in a single atomic step.  OverlayFS uses this\n * LockedFS to avoid having to reason about the correctness of\n * multiple requests interleaving.\n */\nexport default class LockedFS<T extends FileSystem> implements FileSystem {\n  private _fs: T;\n  private _mu: Mutex;\n\n  constructor(fs: T) {\n    this._fs = fs;\n    this._mu = new Mutex();\n  }\n\n  public getName(): string {\n    return 'LockedFS<' + this._fs.getName()  + '>';\n  }\n\n  public getFSUnlocked(): T {\n    return this._fs;\n  }\n\n  public initialize(cb: (err?: ApiError) => void): void {\n    // FIXME: check to see if FS supports initialization\n    (<any> this._fs).initialize(cb);\n  }\n\n  public diskSpace(p: string, cb: (total: number, free: number) => any): void {\n    // FIXME: should this lock?\n    this._fs.diskSpace(p, cb);\n  }\n\n  public isReadOnly(): boolean {\n    return this._fs.isReadOnly();\n  }\n\n  public supportsLinks(): boolean {\n    return this._fs.supportsLinks();\n  }\n\n  public supportsProps(): boolean {\n    return this._fs.supportsProps();\n  }\n\n  public supportsSynch(): boolean {\n    return this._fs.supportsSynch();\n  }\n\n  public rename(oldPath: string, newPath: string, cb: (err?: ApiError) => void): void {\n    this._mu.lock(() => {\n      this._fs.rename(oldPath, newPath, (err?: ApiError) => {\n        this._mu.unlock();\n        cb(err);\n      });\n    });\n  }\n\n  public renameSync(oldPath: string, newPath: string): void {\n    if (this._mu.isLocked()) {\n      throw new Error('invalid sync call');\n    }\n    return this._fs.renameSync(oldPath, newPath);\n  }\n\n  public stat(p: string, isLstat: boolean, cb: (err: ApiError, stat?: Stats) => void): void {\n    this._mu.lock(() => {\n      this._fs.stat(p, isLstat, (err?: ApiError, stat?: Stats) => {\n        this._mu.unlock();\n        cb(err, stat);\n      });\n    });\n  }\n\n  public statSync(p: string, isLstat: boolean): Stats {\n    if (this._mu.isLocked()) {\n      throw new Error('invalid sync call');\n    }\n    return this._fs.statSync(p, isLstat);\n  }\n\n  public open(p: string, flag: FileFlag, mode: number, cb: (err: ApiError, fd?: File) => any): void {\n    this._mu.lock(() => {\n      this._fs.open(p, flag, mode, (err?: ApiError, fd?: File) => {\n        this._mu.unlock();\n        cb(err, fd);\n      });\n    });\n  }\n\n  public openSync(p: string, flag: FileFlag, mode: number): File {\n    if (this._mu.isLocked()) {\n      throw new Error('invalid sync call');\n    }\n    return this._fs.openSync(p, flag, mode);\n  }\n\n  public unlink(p: string, cb: Function): void {\n    this._mu.lock(() => {\n      this._fs.unlink(p, (err?: ApiError) => {\n        this._mu.unlock();\n        cb(err);\n      });\n    });\n  }\n\n  public unlinkSync(p: string): void {\n    if (this._mu.isLocked()) {\n      throw new Error('invalid sync call');\n    }\n    return this._fs.unlinkSync(p);\n  }\n\n  public rmdir(p: string, cb: Function): void {\n    this._mu.lock(() => {\n      this._fs.rmdir(p, (err?: ApiError) => {\n        this._mu.unlock();\n        cb(err);\n      });\n    });\n  }\n\n  public rmdirSync(p: string): void {\n    if (this._mu.isLocked()) {\n      throw new Error('invalid sync call');\n    }\n    return this._fs.rmdirSync(p);\n  }\n\n  public mkdir(p: string, mode: number, cb: Function): void {\n    this._mu.lock(() => {\n      this._fs.mkdir(p, mode, (err?: ApiError) => {\n        this._mu.unlock();\n        cb(err);\n      });\n    });\n  }\n\n  public mkdirSync(p: string, mode: number): void {\n    if (this._mu.isLocked()) {\n      throw new Error('invalid sync call');\n    }\n    return this._fs.mkdirSync(p, mode);\n  }\n\n  public readdir(p: string, cb: (err: ApiError, files?: string[]) => void): void {\n    this._mu.lock(() => {\n      this._fs.readdir(p, (err?: ApiError, files?: string[]) => {\n        this._mu.unlock();\n        cb(err, files);\n      });\n    });\n  }\n\n  public readdirSync(p: string): string[] {\n    if (this._mu.isLocked()) {\n      throw new Error('invalid sync call');\n    }\n    return this._fs.readdirSync(p);\n  }\n\n  public exists(p: string, cb: (exists: boolean) => void): void {\n    this._mu.lock(() => {\n      this._fs.exists(p, (exists: boolean) => {\n        this._mu.unlock();\n        cb(exists);\n      });\n    });\n  }\n\n  public existsSync(p: string): boolean {\n    if (this._mu.isLocked()) {\n      throw new Error('invalid sync call');\n    }\n    return this._fs.existsSync(p);\n  }\n\n  public realpath(p: string, cache: {[path: string]: string}, cb: (err: ApiError, resolvedPath?: string) => any): void {\n    this._mu.lock(() => {\n      this._fs.realpath(p, cache, (err?: ApiError, resolvedPath?: string) => {\n        this._mu.unlock();\n        cb(err, resolvedPath);\n      });\n    });\n  }\n\n  public realpathSync(p: string, cache: {[path: string]: string}): string {\n    if (this._mu.isLocked()) {\n      throw new Error('invalid sync call');\n    }\n    return this._fs.realpathSync(p, cache);\n  }\n\n  public truncate(p: string, len: number, cb: Function): void {\n    this._mu.lock(() => {\n      this._fs.truncate(p, len, (err?: ApiError) => {\n        this._mu.unlock();\n        cb(err);\n      });\n    });\n  }\n\n  public truncateSync(p: string, len: number): void {\n    if (this._mu.isLocked()) {\n      throw new Error('invalid sync call');\n    }\n    return this._fs.truncateSync(p, len);\n  }\n\n  public readFile(fname: string, encoding: string, flag: FileFlag, cb: (err: ApiError, data?: any) => void): void {\n    this._mu.lock(() => {\n      this._fs.readFile(fname, encoding, flag, (err?: ApiError, data?: any) => {\n        this._mu.unlock();\n        cb(err, data);\n      });\n    });\n  }\n\n  public readFileSync(fname: string, encoding: string, flag: FileFlag): any {\n    if (this._mu.isLocked()) {\n      throw new Error('invalid sync call');\n    }\n    return this._fs.readFileSync(fname, encoding, flag);\n  }\n\n  public writeFile(fname: string, data: any, encoding: string, flag: FileFlag, mode: number, cb: (err: ApiError) => void): void {\n    this._mu.lock(() => {\n      this._fs.writeFile(fname, data, encoding, flag, mode, (err?: ApiError) => {\n        this._mu.unlock();\n        cb(err);\n      });\n    });\n  }\n\n  public writeFileSync(fname: string, data: any, encoding: string, flag: FileFlag, mode: number): void {\n    if (this._mu.isLocked()) {\n      throw new Error('invalid sync call');\n    }\n    return this._fs.writeFileSync(fname, data, encoding, flag, mode);\n  }\n\n  public appendFile(fname: string, data: any, encoding: string, flag: FileFlag, mode: number, cb: (err: ApiError) => void): void {\n    this._mu.lock(() => {\n      this._fs.appendFile(fname, data, encoding, flag, mode, (err?: ApiError) => {\n        this._mu.unlock();\n        cb(err);\n      });\n    });\n  }\n\n  public appendFileSync(fname: string, data: any, encoding: string, flag: FileFlag, mode: number): void {\n    if (this._mu.isLocked()) {\n      throw new Error('invalid sync call');\n    }\n    return this._fs.appendFileSync(fname, data, encoding, flag, mode);\n  }\n\n  public chmod(p: string, isLchmod: boolean, mode: number, cb: Function): void {\n    this._mu.lock(() => {\n      this._fs.chmod(p, isLchmod, mode, (err?: ApiError) => {\n        this._mu.unlock();\n        cb(err);\n      });\n    });\n  }\n\n  public chmodSync(p: string, isLchmod: boolean, mode: number): void {\n    if (this._mu.isLocked()) {\n      throw new Error('invalid sync call');\n    }\n    return this._fs.chmodSync(p, isLchmod, mode);\n  }\n\n  public chown(p: string, isLchown: boolean, uid: number, gid: number, cb: Function): void {\n    this._mu.lock(() => {\n      this._fs.chown(p, isLchown, uid, gid, (err?: ApiError) => {\n        this._mu.unlock();\n        cb(err);\n      });\n    });\n  }\n\n  public chownSync(p: string, isLchown: boolean, uid: number, gid: number): void {\n    if (this._mu.isLocked()) {\n      throw new Error('invalid sync call');\n    }\n    return this._fs.chownSync(p, isLchown, uid, gid);\n  }\n\n  public utimes(p: string, atime: Date, mtime: Date, cb: Function): void {\n    this._mu.lock(() => {\n      this._fs.utimes(p, atime, mtime, (err?: ApiError) => {\n        this._mu.unlock();\n        cb(err);\n      });\n    });\n  }\n\n  public utimesSync(p: string, atime: Date, mtime: Date): void {\n    if (this._mu.isLocked()) {\n      throw new Error('invalid sync call');\n    }\n    return this._fs.utimesSync(p, atime, mtime);\n  }\n\n  public link(srcpath: string, dstpath: string, cb: Function): void {\n    this._mu.lock(() => {\n      this._fs.link(srcpath, dstpath, (err?: ApiError) => {\n        this._mu.unlock();\n        cb(err);\n      });\n    });\n  }\n\n  public linkSync(srcpath: string, dstpath: string): void {\n    if (this._mu.isLocked()) {\n      throw new Error('invalid sync call');\n    }\n    return this._fs.linkSync(srcpath, dstpath);\n  }\n\n  public symlink(srcpath: string, dstpath: string, type: string, cb: Function): void {\n    this._mu.lock(() => {\n      this._fs.symlink(srcpath, dstpath, type, (err?: ApiError) => {\n        this._mu.unlock();\n        cb(err);\n      });\n    });\n  }\n\n  public symlinkSync(srcpath: string, dstpath: string, type: string): void {\n    if (this._mu.isLocked()) {\n      throw new Error('invalid sync call');\n    }\n    return this._fs.symlinkSync(srcpath, dstpath, type);\n  }\n\n  public readlink(p: string, cb: Function): void {\n    this._mu.lock(() => {\n      this._fs.readlink(p, (err?: ApiError, linkString?: string) => {\n        this._mu.unlock();\n        cb(err, linkString);\n      });\n    });\n  }\n\n  public readlinkSync(p: string): string {\n    if (this._mu.isLocked()) {\n      throw new Error('invalid sync call');\n    }\n    return this._fs.readlinkSync(p);\n  }\n}\n"]}