{"version":3,"file":"key_value_filesystem.js","sourceRoot":"","sources":["../../../src/generic/key_value_filesystem.ts"],"names":[],"mappings":"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","sourcesContent":["import {BaseFileSystem, SynchronousFileSystem} from '../core/file_system';\nimport {ApiError, ErrorCode} from '../core/api_error';\nimport {default as Stats, FileType} from '../core/node_fs_stats';\nimport {File}  from '../core/file';\nimport {FileFlag} from  '../core/file_flag';\nimport * as path from 'path';\nimport Inode from '../generic/inode';\nimport PreloadFile from '../generic/preload_file';\nconst ROOT_NODE_ID: string = \"/\";\n\n/**\n * Generates a random ID.\n */\nfunction GenerateRandomID(): string {\n  // From http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    let r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);\n    return v.toString(16);\n  });\n}\n\n/**\n * Helper function. Checks if 'e' is defined. If so, it triggers the callback\n * with 'e' and returns false. Otherwise, returns true.\n */\nfunction noError(e: ApiError, cb: (e: ApiError) => void): boolean {\n  if (e) {\n    cb(e);\n    return false;\n  }\n  return true;\n}\n\n/**\n * Helper function. Checks if 'e' is defined. If so, it aborts the transaction,\n * triggers the callback with 'e', and returns false. Otherwise, returns true.\n */\nfunction noErrorTx(e: ApiError, tx: AsyncKeyValueRWTransaction, cb: (e: ApiError) => void): boolean {\n  if (e) {\n    tx.abort(() => {\n      cb(e);\n    });\n    return false;\n  }\n  return true;\n}\n\n/**\n * Represents a *synchronous* key-value store.\n */\nexport interface SyncKeyValueStore {\n  /**\n   * The name of the key-value store.\n   */\n  name(): string;\n  /**\n   * Empties the key-value store completely.\n   */\n  clear(): void;\n  /**\n   * Begins a new read-only transaction.\n   */\n  beginTransaction(type: \"readonly\"): SyncKeyValueROTransaction;\n  /**\n   * Begins a new read-write transaction.\n   */\n  beginTransaction(type: \"readwrite\"): SyncKeyValueRWTransaction;\n  beginTransaction(type: string): SyncKeyValueROTransaction;\n}\n\n/**\n * A read-only transaction for a synchronous key value store.\n */\nexport interface SyncKeyValueROTransaction {\n  /**\n   * Retrieves the data at the given key. Throws an ApiError if an error occurs\n   * or if the key does not exist.\n   * @param key The key to look under for data.\n   * @return The data stored under the key, or undefined if not present.\n   */\n  get(key: string): Buffer;\n}\n\n/**\n * A read-write transaction for a synchronous key value store.\n */\nexport interface SyncKeyValueRWTransaction extends SyncKeyValueROTransaction {\n  /**\n   * Adds the data to the store under the given key.\n   * @param key The key to add the data under.\n   * @param data The data to add to the store.\n   * @param overwrite If 'true', overwrite any existing data. If 'false',\n   *   avoids storing the data if the key exists.\n   * @return True if storage succeeded, false otherwise.\n   */\n  put(key: string, data: Buffer, overwrite: boolean): boolean;\n  /**\n   * Deletes the data at the given key.\n   * @param key The key to delete from the store.\n   */\n  del(key: string): void;\n  /**\n   * Commits the transaction.\n   */\n  commit(): void;\n  /**\n   * Aborts and rolls back the transaction.\n   */\n  abort(): void;\n}\n\n/**\n * An interface for simple synchronous key-value stores that don't have special\n * support for transactions and such.\n */\nexport interface SimpleSyncStore {\n  get(key: string): Buffer;\n  put(key: string, data: Buffer, overwrite: boolean): boolean;\n  del(key: string): void;\n}\n\n/**\n * A simple RW transaction for simple synchronous key-value stores.\n */\nexport class SimpleSyncRWTransaction implements SyncKeyValueRWTransaction {\n  /**\n   * Stores data in the keys we modify prior to modifying them.\n   * Allows us to roll back commits.\n   */\n  private originalData: { [key: string]: Buffer } = {};\n  /**\n   * List of keys modified in this transaction, if any.\n   */\n  private modifiedKeys: string[] = [];\n\n  constructor(private store: SimpleSyncStore) { }\n\n  public get(key: string): Buffer {\n    let val = this.store.get(key);\n    this.stashOldValue(key, val);\n    return val;\n  }\n\n  public put(key: string, data: Buffer, overwrite: boolean): boolean {\n    this.markModified(key);\n    return this.store.put(key, data, overwrite);\n  }\n\n  public del(key: string): void {\n    this.markModified(key);\n    this.store.del(key);\n  }\n\n  public commit(): void {/* NOP */}\n\n  public abort(): void {\n    // Rollback old values.\n    let i: number, key: string, value: Buffer;\n    for (i = 0; i < this.modifiedKeys.length; i++) {\n      key = this.modifiedKeys[i];\n      value = this.originalData[key];\n      if (value === null) {\n        // Key didn't exist.\n        this.store.del(key);\n      } else {\n        // Key existed. Store old value.\n        this.store.put(key, value, true);\n      }\n    }\n  }\n\n  /**\n   * Stashes given key value pair into `originalData` if it doesn't already\n   * exist. Allows us to stash values the program is requesting anyway to\n   * prevent needless `get` requests if the program modifies the data later\n   * on during the transaction.\n   */\n  private stashOldValue(key: string, value: Buffer) {\n    // Keep only the earliest value in the transaction.\n    if (!this.originalData.hasOwnProperty(key)) {\n      this.originalData[key] = value;\n    }\n  }\n\n  /**\n   * Marks the given key as modified, and stashes its value if it has not been\n   * stashed already.\n   */\n  private markModified(key: string) {\n    if (this.modifiedKeys.indexOf(key) === -1) {\n      this.modifiedKeys.push(key);\n      if (!this.originalData.hasOwnProperty(key)) {\n        this.originalData[key] = this.store.get(key);\n      }\n    }\n  }\n}\n\nexport interface SyncKeyValueFileSystemOptions {\n  /**\n   * The actual key-value store to read from/write to.\n   */\n  store: SyncKeyValueStore;\n  /**\n   * Should the file system support properties (mtime/atime/ctime/chmod/etc)?\n   * Enabling this slightly increases the storage space per file, and adds\n   * atime updates every time a file is accessed, mtime updates every time\n   * a file is modified, and permission checks on every operation.\n   *\n   * Defaults to *false*.\n   */\n  // supportProps?: boolean;\n  /**\n   * Should the file system support links?\n   */\n  // supportLinks?: boolean;\n}\n\nexport class SyncKeyValueFile extends PreloadFile<SyncKeyValueFileSystem> implements File {\n  constructor(_fs: SyncKeyValueFileSystem, _path: string, _flag: FileFlag, _stat: Stats, contents?: Buffer) {\n    super(_fs, _path, _flag, _stat, contents);\n  }\n\n  public syncSync(): void {\n    if (this.isDirty()) {\n      this._fs._syncSync(this.getPath(), this.getBuffer(), this.getStats());\n      this.resetDirty();\n    }\n  }\n\n  public closeSync(): void {\n    this.syncSync();\n  }\n}\n\n/**\n * A \"Synchronous key-value file system\". Stores data to/retrieves data from an\n * underlying key-value store.\n *\n * We use a unique ID for each node in the file system. The root node has a\n * fixed ID.\n * @todo Introduce Node ID caching.\n * @todo Check modes.\n */\nexport class SyncKeyValueFileSystem extends SynchronousFileSystem {\n  public static isAvailable(): boolean { return true; }\n\n  private store: SyncKeyValueStore;\n\n  constructor(options: SyncKeyValueFileSystemOptions) {\n    super();\n    this.store = options.store;\n    // INVARIANT: Ensure that the root exists.\n    this.makeRootDirectory();\n  }\n\n  public getName(): string { return this.store.name(); }\n  public isReadOnly(): boolean { return false; }\n  public supportsSymlinks(): boolean { return false; }\n  public supportsProps(): boolean { return false; }\n  public supportsSynch(): boolean { return true; }\n\n  /**\n   * Delete all contents stored in the file system.\n   */\n  public empty(): void {\n    this.store.clear();\n    // INVARIANT: Root always exists.\n    this.makeRootDirectory();\n  }\n\n  public renameSync(oldPath: string, newPath: string): void {\n    let tx = this.store.beginTransaction('readwrite'),\n      oldParent = path.dirname(oldPath), oldName = path.basename(oldPath),\n      newParent = path.dirname(newPath), newName = path.basename(newPath),\n      // Remove oldPath from parent's directory listing.\n      oldDirNode = this.findINode(tx, oldParent),\n      oldDirList = this.getDirListing(tx, oldParent, oldDirNode);\n\n    if (!oldDirList[oldName]) {\n      throw ApiError.ENOENT(oldPath);\n    }\n    let nodeId: string = oldDirList[oldName];\n    delete oldDirList[oldName];\n\n    // Invariant: Can't move a folder inside itself.\n    // This funny little hack ensures that the check passes only if oldPath\n    // is a subpath of newParent. We append '/' to avoid matching folders that\n    // are a substring of the bottom-most folder in the path.\n    if ((newParent + '/').indexOf(oldPath + '/') === 0) {\n      throw new ApiError(ErrorCode.EBUSY, oldParent);\n    }\n\n    // Add newPath to parent's directory listing.\n    let newDirNode: Inode, newDirList: typeof oldDirList;\n    if (newParent === oldParent) {\n      // Prevent us from re-grabbing the same directory listing, which still\n      // contains oldName.\n      newDirNode = oldDirNode;\n      newDirList = oldDirList;\n    } else {\n      newDirNode = this.findINode(tx, newParent);\n      newDirList = this.getDirListing(tx, newParent, newDirNode);\n    }\n\n    if (newDirList[newName]) {\n      // If it's a file, delete it.\n      let newNameNode = this.getINode(tx, newPath, newDirList[newName]);\n      if (newNameNode.isFile()) {\n        try {\n          tx.del(newNameNode.id);\n          tx.del(newDirList[newName]);\n        } catch (e) {\n          tx.abort();\n          throw e;\n        }\n      } else {\n        // If it's a directory, throw a permissions error.\n        throw ApiError.EPERM(newPath);\n      }\n    }\n    newDirList[newName] = nodeId;\n\n    // Commit the two changed directory listings.\n    try {\n      tx.put(oldDirNode.id, new Buffer(JSON.stringify(oldDirList)), true);\n      tx.put(newDirNode.id, new Buffer(JSON.stringify(newDirList)), true);\n    } catch (e) {\n      tx.abort();\n      throw e;\n    }\n\n    tx.commit();\n  }\n\n  public statSync(p: string, isLstat: boolean): Stats {\n    // Get the inode to the item, convert it into a Stats object.\n    return this.findINode(this.store.beginTransaction('readonly'), p).toStats();\n  }\n\n  public createFileSync(p: string, flag: FileFlag, mode: number): File {\n    let tx = this.store.beginTransaction('readwrite'),\n      data = new Buffer(0),\n      newFile = this.commitNewFile(tx, p, FileType.FILE, mode, data);\n    // Open the file.\n    return new SyncKeyValueFile(this, p, flag, newFile.toStats(), data);\n  }\n\n  public openFileSync(p: string, flag: FileFlag): File {\n    let tx = this.store.beginTransaction('readonly'),\n      node = this.findINode(tx, p),\n      data = tx.get(node.id);\n    if (data === undefined) {\n      throw ApiError.ENOENT(p);\n    }\n    return new SyncKeyValueFile(this, p, flag, node.toStats(), data);\n  }\n\n  public unlinkSync(p: string): void {\n    this.removeEntry(p, false);\n  }\n\n  public rmdirSync(p: string): void {\n    // Check first if directory is empty.\n    if (this.readdirSync(p).length > 0) {\n      throw ApiError.ENOTEMPTY(p);\n    } else {\n      this.removeEntry(p, true);\n    }\n  }\n\n  public mkdirSync(p: string, mode: number): void {\n    let tx = this.store.beginTransaction('readwrite'),\n      data = new Buffer('{}');\n    this.commitNewFile(tx, p, FileType.DIRECTORY, mode, data);\n  }\n\n  public readdirSync(p: string): string[] {\n    let tx = this.store.beginTransaction('readonly');\n    return Object.keys(this.getDirListing(tx, p, this.findINode(tx, p)));\n  }\n\n  public _syncSync(p: string, data: Buffer, stats: Stats): void {\n    // @todo Ensure mtime updates properly, and use that to determine if a data\n    //       update is required.\n    let tx = this.store.beginTransaction('readwrite'),\n      // We use the _findInode helper because we actually need the INode id.\n      fileInodeId = this._findINode(tx, path.dirname(p), path.basename(p)),\n      fileInode = this.getINode(tx, p, fileInodeId),\n      inodeChanged = fileInode.update(stats);\n\n    try {\n      // Sync data.\n      tx.put(fileInode.id, data, true);\n      // Sync metadata.\n      if (inodeChanged) {\n        tx.put(fileInodeId, fileInode.toBuffer(), true);\n      }\n    } catch (e) {\n      tx.abort();\n      throw e;\n    }\n    tx.commit();\n  }\n\n  /**\n   * Checks if the root directory exists. Creates it if it doesn't.\n   */\n  private makeRootDirectory() {\n    let tx = this.store.beginTransaction('readwrite');\n    if (tx.get(ROOT_NODE_ID) === undefined) {\n      // Create new inode.\n      let currTime = (new Date()).getTime(),\n        // Mode 0666\n        dirInode = new Inode(GenerateRandomID(), 4096, 511 | FileType.DIRECTORY, currTime, currTime, currTime);\n      // If the root doesn't exist, the first random ID shouldn't exist,\n      // either.\n      tx.put(dirInode.id, new Buffer(\"{}\"), false);\n      tx.put(ROOT_NODE_ID, dirInode.toBuffer(), false);\n      tx.commit();\n    }\n  }\n\n  /**\n   * Helper function for findINode.\n   * @param parent The parent directory of the file we are attempting to find.\n   * @param filename The filename of the inode we are attempting to find, minus\n   *   the parent.\n   * @return string The ID of the file's inode in the file system.\n   */\n  private _findINode(tx: SyncKeyValueROTransaction, parent: string, filename: string): string {\n    let readDirectory = (inode: Inode): string => {\n      // Get the root's directory listing.\n      let dirList = this.getDirListing(tx, parent, inode);\n      // Get the file's ID.\n      if (dirList[filename]) {\n        return dirList[filename];\n      } else {\n        throw ApiError.ENOENT(path.resolve(parent, filename));\n      }\n    };\n    if (parent === '/') {\n      if (filename === '') {\n        // BASE CASE #1: Return the root's ID.\n        return ROOT_NODE_ID;\n      } else {\n        // BASE CASE #2: Find the item in the root ndoe.\n        return readDirectory(this.getINode(tx, parent, ROOT_NODE_ID));\n      }\n    } else {\n      return readDirectory(this.getINode(tx, parent + path.sep + filename,\n        this._findINode(tx, path.dirname(parent), path.basename(parent))));\n    }\n  }\n\n  /**\n   * Finds the Inode of the given path.\n   * @param p The path to look up.\n   * @return The Inode of the path p.\n   * @todo memoize/cache\n   */\n  private findINode(tx: SyncKeyValueROTransaction, p: string): Inode {\n    return this.getINode(tx, p, this._findINode(tx, path.dirname(p), path.basename(p)));\n  }\n\n  /**\n   * Given the ID of a node, retrieves the corresponding Inode.\n   * @param tx The transaction to use.\n   * @param p The corresponding path to the file (used for error messages).\n   * @param id The ID to look up.\n   */\n  private getINode(tx: SyncKeyValueROTransaction, p: string, id: string): Inode {\n    let inode = tx.get(id);\n    if (inode === undefined) {\n      throw ApiError.ENOENT(p);\n    }\n    return Inode.fromBuffer(inode);\n  }\n\n  /**\n   * Given the Inode of a directory, retrieves the corresponding directory\n   * listing.\n   */\n  private getDirListing(tx: SyncKeyValueROTransaction, p: string, inode: Inode): { [fileName: string]: string } {\n    if (!inode.isDirectory()) {\n      throw ApiError.ENOTDIR(p);\n    }\n    let data = tx.get(inode.id);\n    if (data === undefined) {\n      throw ApiError.ENOENT(p);\n    }\n    return JSON.parse(data.toString());\n  }\n\n  /**\n   * Creates a new node under a random ID. Retries 5 times before giving up in\n   * the exceedingly unlikely chance that we try to reuse a random GUID.\n   * @return The GUID that the data was stored under.\n   */\n  private addNewNode(tx: SyncKeyValueRWTransaction, data: Buffer): string {\n    let retries = 0, currId: string;\n    while (retries < 5) {\n      try {\n        currId = GenerateRandomID();\n        tx.put(currId, data, false);\n        return currId;\n      } catch (e) {\n        // Ignore and reroll.\n      }\n    }\n    throw new ApiError(ErrorCode.EIO, 'Unable to commit data to key-value store.');\n  }\n\n  /**\n   * Commits a new file (well, a FILE or a DIRECTORY) to the file system with\n   * the given mode.\n   * Note: This will commit the transaction.\n   * @param p The path to the new file.\n   * @param type The type of the new file.\n   * @param mode The mode to create the new file with.\n   * @param data The data to store at the file's data node.\n   * @return The Inode for the new file.\n   */\n  private commitNewFile(tx: SyncKeyValueRWTransaction, p: string, type: FileType, mode: number, data: Buffer): Inode {\n    let parentDir = path.dirname(p),\n      fname = path.basename(p),\n      parentNode = this.findINode(tx, parentDir),\n      dirListing = this.getDirListing(tx, parentDir, parentNode),\n      currTime = (new Date()).getTime();\n\n    // Invariant: The root always exists.\n    // If we don't check this prior to taking steps below, we will create a\n    // file with name '' in root should p == '/'.\n    if (p === '/') {\n      throw ApiError.EEXIST(p);\n    }\n\n    // Check if file already exists.\n    if (dirListing[fname]) {\n      throw ApiError.EEXIST(p);\n    }\n\n    let fileNode: Inode;\n    try {\n      // Commit data.\n      let dataId = this.addNewNode(tx, data);\n      fileNode = new Inode(dataId, data.length, mode | type, currTime, currTime, currTime);\n      // Commit file node.\n      let fileNodeId = this.addNewNode(tx, fileNode.toBuffer());\n      // Update and commit parent directory listing.\n      dirListing[fname] = fileNodeId;\n      tx.put(parentNode.id, new Buffer(JSON.stringify(dirListing)), true);\n    } catch (e) {\n      tx.abort();\n      throw e;\n    }\n    tx.commit();\n    return fileNode;\n  }\n\n  /**\n   * Remove all traces of the given path from the file system.\n   * @param p The path to remove from the file system.\n   * @param isDir Does the path belong to a directory, or a file?\n   * @todo Update mtime.\n   */\n  private removeEntry(p: string, isDir: boolean): void {\n    let tx = this.store.beginTransaction('readwrite'),\n      parent: string = path.dirname(p),\n      parentNode = this.findINode(tx, parent),\n      parentListing = this.getDirListing(tx, parent, parentNode),\n      fileName: string = path.basename(p);\n\n    if (!parentListing[fileName]) {\n      throw ApiError.ENOENT(p);\n    }\n\n    // Remove from directory listing of parent.\n    let fileNodeId = parentListing[fileName];\n    delete parentListing[fileName];\n\n    // Get file inode.\n    let fileNode = this.getINode(tx, p, fileNodeId);\n    if (!isDir && fileNode.isDirectory()) {\n      throw ApiError.EISDIR(p);\n    } else if (isDir && !fileNode.isDirectory()) {\n      throw ApiError.ENOTDIR(p);\n    }\n\n    try {\n      // Delete data.\n      tx.del(fileNode.id);\n      // Delete node.\n      tx.del(fileNodeId);\n      // Update directory listing.\n      tx.put(parentNode.id, new Buffer(JSON.stringify(parentListing)), true);\n    } catch (e) {\n      tx.abort();\n      throw e;\n    }\n    // Success.\n    tx.commit();\n  }\n}\n\n/**\n * Represents an *asynchronous* key-value store.\n */\nexport interface AsyncKeyValueStore {\n  /**\n   * The name of the key-value store.\n   */\n  name(): string;\n  /**\n   * Empties the key-value store completely.\n   */\n  clear(cb: (e?: ApiError) => void): void;\n  /**\n   * Begins a read-write transaction.\n   */\n  beginTransaction(type: 'readwrite'): AsyncKeyValueRWTransaction;\n  /**\n   * Begins a read-only transaction.\n   */\n  beginTransaction(type: 'readonly'): AsyncKeyValueROTransaction;\n  beginTransaction(type: string): AsyncKeyValueROTransaction;\n}\n\n/**\n * Represents an asynchronous read-only transaction.\n */\nexport interface AsyncKeyValueROTransaction {\n  /**\n   * Retrieves the data at the given key.\n   * @param key The key to look under for data.\n   */\n  get(key: string, cb: (e: ApiError, data?: Buffer) => void): void;\n}\n\n/**\n * Represents an asynchronous read-write transaction.\n */\nexport interface AsyncKeyValueRWTransaction extends AsyncKeyValueROTransaction {\n  /**\n   * Adds the data to the store under the given key. Overwrites any existing\n   * data.\n   * @param key The key to add the data under.\n   * @param data The data to add to the store.\n   * @param overwrite If 'true', overwrite any existing data. If 'false',\n   *   avoids writing the data if the key exists.\n   * @param cb Triggered with an error and whether or not the value was\n   *   committed.\n   */\n  put(key: string, data: Buffer, overwrite: boolean, cb: (e: ApiError,\n    committed?: boolean) => void): void;\n  /**\n   * Deletes the data at the given key.\n   * @param key The key to delete from the store.\n   */\n  del(key: string, cb: (e?: ApiError) => void): void;\n  /**\n   * Commits the transaction.\n   */\n  commit(cb: (e?: ApiError) => void): void;\n  /**\n   * Aborts and rolls back the transaction.\n   */\n  abort(cb: (e?: ApiError) => void): void;\n}\n\nexport class AsyncKeyValueFile extends PreloadFile<AsyncKeyValueFileSystem> implements File {\n  constructor(_fs: AsyncKeyValueFileSystem, _path: string, _flag: FileFlag, _stat: Stats, contents?: Buffer) {\n    super(_fs, _path, _flag, _stat, contents);\n  }\n\n  public sync(cb: (e?: ApiError) => void): void {\n    if (this.isDirty()) {\n      this._fs._sync(this.getPath(), this.getBuffer(), this.getStats(), (e?: ApiError) => {\n        if (!e) {\n          this.resetDirty();\n        }\n        cb(e);\n      });\n    } else {\n      cb();\n    }\n  }\n\n  public close(cb: (e?: ApiError) => void): void {\n    this.sync(cb);\n  }\n}\n\n/**\n * An \"Asynchronous key-value file system\". Stores data to/retrieves data from\n * an underlying asynchronous key-value store.\n */\nexport class AsyncKeyValueFileSystem extends BaseFileSystem {\n  public static isAvailable(): boolean { return true; }\n\n  private store: AsyncKeyValueStore;\n\n  /**\n   * Initializes the file system. Typically called by subclasses' async\n   * constructors.\n   */\n  public init(store: AsyncKeyValueStore, cb: (e?: ApiError) => void) {\n    this.store = store;\n    // INVARIANT: Ensure that the root exists.\n    this.makeRootDirectory(cb);\n  }\n  public getName(): string { return this.store.name(); }\n  public isReadOnly(): boolean { return false; }\n  public supportsSymlinks(): boolean { return false; }\n  public supportsProps(): boolean { return false; }\n  public supportsSynch(): boolean { return false; }\n\n  /**\n   * Delete all contents stored in the file system.\n   */\n  public empty(cb: (e?: ApiError) => void): void {\n    this.store.clear((e?) => {\n      if (noError(e, cb)) {\n        // INVARIANT: Root always exists.\n        this.makeRootDirectory(cb);\n      }\n    });\n  }\n\n  public rename(oldPath: string, newPath: string, cb: (e?: ApiError) => void): void {\n    let tx = this.store.beginTransaction('readwrite'),\n      oldParent = path.dirname(oldPath), oldName = path.basename(oldPath),\n      newParent = path.dirname(newPath), newName = path.basename(newPath),\n      inodes: { [path: string]: Inode } = {},\n      lists: {\n        [path: string]: { [file: string]: string }\n      } = {},\n      errorOccurred: boolean = false;\n\n    // Invariant: Can't move a folder inside itself.\n    // This funny little hack ensures that the check passes only if oldPath\n    // is a subpath of newParent. We append '/' to avoid matching folders that\n    // are a substring of the bottom-most folder in the path.\n    if ((newParent + '/').indexOf(oldPath + '/') === 0) {\n      return cb(new ApiError(ErrorCode.EBUSY, oldParent));\n    }\n\n    /**\n     * Responsible for Phase 2 of the rename operation: Modifying and\n     * committing the directory listings. Called once we have successfully\n     * retrieved both the old and new parent's inodes and listings.\n     */\n    let theOleSwitcharoo = (): void => {\n      // Sanity check: Ensure both paths are present, and no error has occurred.\n      if (errorOccurred || !lists.hasOwnProperty(oldParent) || !lists.hasOwnProperty(newParent)) {\n        return;\n      }\n      let oldParentList = lists[oldParent], oldParentINode = inodes[oldParent],\n        newParentList = lists[newParent], newParentINode = inodes[newParent];\n\n      // Delete file from old parent.\n      if (!oldParentList[oldName]) {\n        cb(ApiError.ENOENT(oldPath));\n      } else {\n        let fileId = oldParentList[oldName];\n        delete oldParentList[oldName];\n\n        // Finishes off the renaming process by adding the file to the new\n        // parent.\n        let completeRename = () => {\n          newParentList[newName] = fileId;\n          // Commit old parent's list.\n          tx.put(oldParentINode.id, new Buffer(JSON.stringify(oldParentList)), true, (e: ApiError) => {\n            if (noErrorTx(e, tx, cb)) {\n              if (oldParent === newParent) {\n                // DONE!\n                tx.commit(cb);\n              } else {\n                // Commit new parent's list.\n                tx.put(newParentINode.id, new Buffer(JSON.stringify(newParentList)), true, (e: ApiError) => {\n                  if (noErrorTx(e, tx, cb)) {\n                    tx.commit(cb);\n                  }\n                });\n              }\n            }\n          });\n        };\n\n        if (newParentList[newName]) {\n          // 'newPath' already exists. Check if it's a file or a directory, and\n          // act accordingly.\n          this.getINode(tx, newPath, newParentList[newName], (e: ApiError, inode?: Inode) => {\n            if (noErrorTx(e, tx, cb)) {\n              if (inode.isFile()) {\n                // Delete the file and continue.\n                tx.del(inode.id, (e?: ApiError) => {\n                  if (noErrorTx(e, tx, cb)) {\n                    tx.del(newParentList[newName], (e?: ApiError) => {\n                      if (noErrorTx(e, tx, cb)) {\n                        completeRename();\n                      }\n                    });\n                  }\n                });\n              } else {\n                // Can't overwrite a directory using rename.\n                tx.abort((e?) => {\n                  cb(ApiError.EPERM(newPath));\n                });\n              }\n            }\n          });\n        } else {\n          completeRename();\n        }\n      }\n    };\n\n    /**\n     * Grabs a path's inode and directory listing, and shoves it into the\n     * inodes and lists hashes.\n     */\n    let processInodeAndListings = (p: string): void => {\n      this.findINodeAndDirListing(tx, p, (e: ApiError, node?: Inode, dirList?: {[name: string]: string}): void => {\n        if (e) {\n          if (!errorOccurred) {\n            errorOccurred = true;\n            tx.abort(() => {\n              cb(e);\n            });\n          }\n          // If error has occurred already, just stop here.\n        } else {\n          inodes[p] = node;\n          lists[p] = dirList;\n          theOleSwitcharoo();\n        }\n      });\n    };\n\n    processInodeAndListings(oldParent);\n    if (oldParent !== newParent) {\n      processInodeAndListings(newParent);\n    }\n  }\n\n  public stat(p: string, isLstat: boolean, cb: (err: ApiError, stat?: Stats) => void): void {\n    let tx = this.store.beginTransaction('readonly');\n    this.findINode(tx, p, (e: ApiError, inode?: Inode): void => {\n      if (noError(e, cb)) {\n        cb(null, inode.toStats());\n      }\n    });\n  }\n\n  public createFile(p: string, flag: FileFlag, mode: number, cb: (e: ApiError, file?: File) => void): void {\n    let tx = this.store.beginTransaction('readwrite'),\n      data = new Buffer(0);\n\n    this.commitNewFile(tx, p, FileType.FILE, mode, data, (e: ApiError, newFile?: Inode): void => {\n      if (noError(e, cb)) {\n        cb(null, new AsyncKeyValueFile(this, p, flag, newFile.toStats(), data));\n      }\n    });\n  }\n\n  public openFile(p: string, flag: FileFlag, cb: (e: ApiError, file?: File) => void): void {\n    let tx = this.store.beginTransaction('readonly');\n    // Step 1: Grab the file's inode.\n    this.findINode(tx, p, (e: ApiError, inode?: Inode) => {\n      if (noError(e, cb)) {\n        // Step 2: Grab the file's data.\n        tx.get(inode.id, (e: ApiError, data?: Buffer): void => {\n          if (noError(e, cb)) {\n            if (data === undefined) {\n              cb(ApiError.ENOENT(p));\n            } else {\n              cb(null, new AsyncKeyValueFile(this, p, flag, inode.toStats(), data));\n            }\n          }\n        });\n      }\n    });\n  }\n\n  public unlink(p: string, cb: (e?: ApiError) => void): void {\n    this.removeEntry(p, false, cb);\n  }\n\n  public rmdir(p: string, cb: (e?: ApiError) => void): void {\n    // Check first if directory is empty.\n    this.readdir(p, (err, files?) => {\n      if (err) {\n        cb(err);\n      } else if (files.length > 0) {\n        cb(ApiError.ENOTEMPTY(p));\n      } else {\n        this.removeEntry(p, true, cb);\n      }\n    });\n  }\n\n  public mkdir(p: string, mode: number, cb: (e?: ApiError) => void): void {\n    let tx = this.store.beginTransaction('readwrite'),\n      data = new Buffer('{}');\n    this.commitNewFile(tx, p, FileType.DIRECTORY, mode, data, cb);\n  }\n\n  public readdir(p: string, cb: (err: ApiError, files?: string[]) => void): void {\n    let tx = this.store.beginTransaction('readonly');\n    this.findINode(tx, p, (e: ApiError, inode?: Inode) => {\n      if (noError(e, cb)) {\n        this.getDirListing(tx, p, inode, (e: ApiError, dirListing?: {[name: string]: string}) => {\n          if (noError(e, cb)) {\n            cb(null, Object.keys(dirListing));\n          }\n        });\n      }\n    });\n  }\n\n  public _sync(p: string, data: Buffer, stats: Stats, cb: (e?: ApiError) => void): void {\n    // @todo Ensure mtime updates properly, and use that to determine if a data\n    //       update is required.\n    let tx = this.store.beginTransaction('readwrite');\n    // Step 1: Get the file node's ID.\n    this._findINode(tx, path.dirname(p), path.basename(p), (e: ApiError, fileInodeId?: string): void => {\n      if (noErrorTx(e, tx, cb)) {\n        // Step 2: Get the file inode.\n        this.getINode(tx, p, fileInodeId, (e: ApiError, fileInode?: Inode): void => {\n          if (noErrorTx(e, tx, cb)) {\n            let inodeChanged: boolean = fileInode.update(stats);\n            // Step 3: Sync the data.\n            tx.put(fileInode.id, data, true, (e: ApiError): void => {\n              if (noErrorTx(e, tx, cb)) {\n                // Step 4: Sync the metadata (if it changed)!\n                if (inodeChanged) {\n                  tx.put(fileInodeId, fileInode.toBuffer(), true, (e: ApiError): void => {\n                    if (noErrorTx(e, tx, cb)) {\n                      tx.commit(cb);\n                    }\n                  });\n                } else {\n                  // No need to sync metadata; return.\n                  tx.commit(cb);\n                }\n              }\n            });\n          }\n        });\n      }\n    });\n  }\n\n  /**\n   * Checks if the root directory exists. Creates it if it doesn't.\n   */\n  private makeRootDirectory(cb: (e?: ApiError) => void) {\n    let tx = this.store.beginTransaction('readwrite');\n    tx.get(ROOT_NODE_ID, (e: ApiError, data?: Buffer) => {\n      if (e || data === undefined) {\n        // Create new inode.\n        let currTime = (new Date()).getTime(),\n          // Mode 0666\n          dirInode = new Inode(GenerateRandomID(), 4096, 511 | FileType.DIRECTORY, currTime, currTime, currTime);\n        // If the root doesn't exist, the first random ID shouldn't exist,\n        // either.\n        tx.put(dirInode.id, new Buffer(\"{}\"), false, (e?: ApiError) => {\n          if (noErrorTx(e, tx, cb)) {\n            tx.put(ROOT_NODE_ID, dirInode.toBuffer(), false, (e?: ApiError) => {\n              if (e) {\n                tx.abort(() => { cb(e); });\n              } else {\n                tx.commit(cb);\n              }\n            });\n          }\n        });\n      } else {\n        // We're good.\n        tx.commit(cb);\n      }\n    });\n  }\n\n  /**\n   * Helper function for findINode.\n   * @param parent The parent directory of the file we are attempting to find.\n   * @param filename The filename of the inode we are attempting to find, minus\n   *   the parent.\n   * @param cb Passed an error or the ID of the file's inode in the file system.\n   */\n  private _findINode(tx: AsyncKeyValueROTransaction, parent: string, filename: string, cb: (e: ApiError, id?: string) => void): void {\n    let handleDirectoryListings = (e: ApiError, inode?: Inode, dirList?: {[name: string]: string}): void => {\n      if (e) {\n        cb(e);\n      } else if (dirList[filename]) {\n        cb(null, dirList[filename]);\n      } else {\n        cb(ApiError.ENOENT(path.resolve(parent, filename)));\n      }\n    };\n\n    if (parent === '/') {\n      if (filename === '') {\n        // BASE CASE #1: Return the root's ID.\n        cb(null, ROOT_NODE_ID);\n      } else {\n        // BASE CASE #2: Find the item in the root node.\n        this.getINode(tx, parent, ROOT_NODE_ID, (e: ApiError, inode?: Inode): void => {\n          if (noError(e, cb)) {\n            this.getDirListing(tx, parent, inode, (e: ApiError, dirList?: {[name: string]: string}): void => {\n              // handle_directory_listings will handle e for us.\n              handleDirectoryListings(e, inode, dirList);\n            });\n          }\n        });\n      }\n    } else {\n      // Get the parent directory's INode, and find the file in its directory\n      // listing.\n      this.findINodeAndDirListing(tx, parent, handleDirectoryListings);\n    }\n  }\n\n  /**\n   * Finds the Inode of the given path.\n   * @param p The path to look up.\n   * @param cb Passed an error or the Inode of the path p.\n   * @todo memoize/cache\n   */\n  private findINode(tx: AsyncKeyValueROTransaction, p: string, cb: (e: ApiError, inode?: Inode) => void): void {\n    this._findINode(tx, path.dirname(p), path.basename(p), (e: ApiError, id?: string): void => {\n      if (noError(e, cb)) {\n        this.getINode(tx, p, id, cb);\n      }\n    });\n  }\n\n  /**\n   * Given the ID of a node, retrieves the corresponding Inode.\n   * @param tx The transaction to use.\n   * @param p The corresponding path to the file (used for error messages).\n   * @param id The ID to look up.\n   * @param cb Passed an error or the inode under the given id.\n   */\n  private getINode(tx: AsyncKeyValueROTransaction, p: string, id: string, cb: (e: ApiError, inode?: Inode) => void): void {\n    tx.get(id, (e: ApiError, data?: Buffer): void => {\n      if (noError(e, cb)) {\n        if (data === undefined) {\n          cb(ApiError.ENOENT(p));\n        } else {\n          cb(null, Inode.fromBuffer(data));\n        }\n      }\n    });\n  }\n\n  /**\n   * Given the Inode of a directory, retrieves the corresponding directory\n   * listing.\n   */\n  private getDirListing(tx: AsyncKeyValueROTransaction, p: string, inode: Inode, cb: (e: ApiError, listing?: { [fileName: string]: string }) => void): void {\n    if (!inode.isDirectory()) {\n      cb(ApiError.ENOTDIR(p));\n    } else {\n      tx.get(inode.id, (e: ApiError, data?: Buffer): void => {\n        if (noError(e, cb)) {\n          try {\n            cb(null, JSON.parse(data.toString()));\n          } catch (e) {\n            // Occurs when data is undefined, or corresponds to something other\n            // than a directory listing. The latter should never occur unless\n            // the file system is corrupted.\n            cb(ApiError.ENOENT(p));\n          }\n        }\n      });\n    }\n  }\n\n  /**\n   * Given a path to a directory, retrieves the corresponding INode and\n   * directory listing.\n   */\n  private findINodeAndDirListing(tx: AsyncKeyValueROTransaction, p: string, cb: (e: ApiError, inode?: Inode, listing?: { [fileName: string]: string }) => void): void {\n    this.findINode(tx, p, (e: ApiError, inode?: Inode): void => {\n      if (noError(e, cb)) {\n        this.getDirListing(tx, p, inode, (e, listing?) => {\n          if (noError(e, cb)) {\n            cb(null, inode, listing);\n          }\n        });\n      }\n    });\n  }\n\n  /**\n   * Adds a new node under a random ID. Retries 5 times before giving up in\n   * the exceedingly unlikely chance that we try to reuse a random GUID.\n   * @param cb Passed an error or the GUID that the data was stored under.\n   */\n  private addNewNode(tx: AsyncKeyValueRWTransaction, data: Buffer, cb: (e: ApiError, guid?: string) => void): void {\n    let retries = 0, currId: string,\n      reroll = () => {\n        if (++retries === 5) {\n          // Max retries hit. Return with an error.\n          cb(new ApiError(ErrorCode.EIO, 'Unable to commit data to key-value store.'));\n        } else {\n          // Try again.\n          currId = GenerateRandomID();\n          tx.put(currId, data, false, (e: ApiError, committed?: boolean) => {\n            if (e || !committed) {\n              reroll();\n            } else {\n              // Successfully stored under 'currId'.\n              cb(null, currId);\n            }\n          });\n        }\n      };\n    reroll();\n  }\n\n  /**\n   * Commits a new file (well, a FILE or a DIRECTORY) to the file system with\n   * the given mode.\n   * Note: This will commit the transaction.\n   * @param p The path to the new file.\n   * @param type The type of the new file.\n   * @param mode The mode to create the new file with.\n   * @param data The data to store at the file's data node.\n   * @param cb Passed an error or the Inode for the new file.\n   */\n  private commitNewFile(tx: AsyncKeyValueRWTransaction, p: string, type: FileType, mode: number, data: Buffer, cb: (e: ApiError, inode?: Inode) => void): void {\n    let parentDir = path.dirname(p),\n      fname = path.basename(p),\n      currTime = (new Date()).getTime();\n\n    // Invariant: The root always exists.\n    // If we don't check this prior to taking steps below, we will create a\n    // file with name '' in root should p == '/'.\n    if (p === '/') {\n      return cb(ApiError.EEXIST(p));\n    }\n\n    // Let's build a pyramid of code!\n\n    // Step 1: Get the parent directory's inode and directory listing\n    this.findINodeAndDirListing(tx, parentDir, (e: ApiError, parentNode?: Inode, dirListing?: {[name: string]: string}): void => {\n      if (noErrorTx(e, tx, cb)) {\n        if (dirListing[fname]) {\n          // File already exists.\n          tx.abort(() => {\n            cb(ApiError.EEXIST(p));\n          });\n        } else {\n          // Step 2: Commit data to store.\n          this.addNewNode(tx, data, (e: ApiError, dataId?: string): void => {\n            if (noErrorTx(e, tx, cb)) {\n              // Step 3: Commit the file's inode to the store.\n              let fileInode = new Inode(dataId, data.length, mode | type, currTime, currTime, currTime);\n              this.addNewNode(tx, fileInode.toBuffer(), (e: ApiError, fileInodeId?: string): void => {\n                if (noErrorTx(e, tx, cb)) {\n                  // Step 4: Update parent directory's listing.\n                  dirListing[fname] = fileInodeId;\n                  tx.put(parentNode.id, new Buffer(JSON.stringify(dirListing)), true, (e: ApiError): void => {\n                    if (noErrorTx(e, tx, cb)) {\n                      // Step 5: Commit and return the new inode.\n                      tx.commit((e?: ApiError): void => {\n                        if (noErrorTx(e, tx, cb)) {\n                          cb(null, fileInode);\n                        }\n                      });\n                    }\n                  });\n                }\n              });\n            }\n          });\n        }\n      }\n    });\n  }\n\n  /**\n   * Remove all traces of the given path from the file system.\n   * @param p The path to remove from the file system.\n   * @param isDir Does the path belong to a directory, or a file?\n   * @todo Update mtime.\n   */\n  private removeEntry(p: string, isDir: boolean, cb: (e?: ApiError) => void): void {\n    let tx = this.store.beginTransaction('readwrite'),\n      parent: string = path.dirname(p), fileName: string = path.basename(p);\n    // Step 1: Get parent directory's node and directory listing.\n    this.findINodeAndDirListing(tx, parent, (e: ApiError, parentNode?: Inode, parentListing?: {[name: string]: string}): void => {\n      if (noErrorTx(e, tx, cb)) {\n        if (!parentListing[fileName]) {\n          tx.abort(() => {\n            cb(ApiError.ENOENT(p));\n          });\n        } else {\n          // Remove from directory listing of parent.\n          let fileNodeId = parentListing[fileName];\n          delete parentListing[fileName];\n          // Step 2: Get file inode.\n          this.getINode(tx, p, fileNodeId, (e: ApiError, fileNode?: Inode): void => {\n            if (noErrorTx(e, tx, cb)) {\n              if (!isDir && fileNode.isDirectory()) {\n                tx.abort(() => {\n                  cb(ApiError.EISDIR(p));\n                });\n              } else if (isDir && !fileNode.isDirectory()) {\n                tx.abort(() => {\n                  cb(ApiError.ENOTDIR(p));\n                });\n              } else {\n                // Step 3: Delete data.\n                tx.del(fileNode.id, (e?: ApiError): void => {\n                  if (noErrorTx(e, tx, cb)) {\n                    // Step 4: Delete node.\n                    tx.del(fileNodeId, (e?: ApiError): void => {\n                      if (noErrorTx(e, tx, cb)) {\n                        // Step 5: Update directory listing.\n                        tx.put(parentNode.id, new Buffer(JSON.stringify(parentListing)), true, (e: ApiError): void => {\n                          if (noErrorTx(e, tx, cb)) {\n                            tx.commit(cb);\n                          }\n                        });\n                      }\n                    });\n                  }\n                });\n              }\n            }\n          });\n        }\n      }\n    });\n  }\n}\n"]}