export class Container {
  constructor();
  getVersion(): any;
  getLoggingService(): any;
}
export class Context {
  static cacheBusinessNetwork(arg0?: any, arg1?: any): any;
  static getCachedCompiledScriptBundle(arg0?: any): any;
  static cacheCompiledScriptBundle(arg0?: any, arg1?: any): any;
  static getCachedCompiledQueryBundle(arg0?: any): any;
  static cacheCompiledQueryBundle(arg0?: any, arg1?: any): any;
  static getCachedCompiledAclBundle(arg0?: any): any;
  static cacheCompiledAclBundle(arg0?: any, arg1?: any): any;
  constructor(arg0?: any);
  getFunction(): any;
  getArguments(): any;
  loadBusinessNetworkRecord(): any;
  loadBusinessNetworkDefinition(arg0?: any): any;
  loadCompiledScriptBundle(arg0?: any, arg1?: any): any;
  loadCompiledQueryBundle(arg0?: any, arg1?: any): any;
  loadCompiledAclBundle(arg0?: any, arg1?: any): any;
  loadCurrentParticipant(): any;
  findBusinessNetworkDefinition(arg0?: any): any;
  findCompiledScriptBundle(arg0?: any, arg1?: any): any;
  findCompiledQueryBundle(arg0?: any, arg1?: any): any;
  findCompiledAclBundle(arg0?: any, arg1?: any): any;
  initialize(arg0?: any): any;
  initializeInner(): any;
  _initializeInner(arg0?: any): any;
  getServices(): any;
  getContainer(): any;
  getDataService(): any;
  getIdentityService(): any;
  getHTTPService(): any;
  getSerializer(): any;
  getEventService(): any;
  getModelManager(): any;
  getScriptManager(): any;
  getAclManager(): any;
  getFactory(): any;
  getIntrospector(): any;
  getRegistryManager(): any;
  getResolver(): any;
  getApi(): any;
  getIdentityManager(): any;
  getResourceManager(): any;
  getNetworkManager(): any;
  getParticipant(): any;
  setParticipant(arg0?: any): any;
  getIdentity(): any;
  setIdentity(arg0?: any): any;
  getTransaction(): any;
  setTransaction(arg0?: any): any;
  clearTransaction(): any;
  getAccessController(): any;
  getSystemRegistries(): any;
  getEventNumber(): any;
  incrementEventNumber(): any;
  getScriptCompiler(): any;
  getCompiledScriptBundle(): any;
  getQueryCompiler(): any;
  getCompiledQueryBundle(): any;
  getAclCompiler(): any;
  getCompiledAclBundle(): any;
  getLoggingService(): any;
  getTransactionHandlers(): any;
  transactionStart(arg0?: any): any;
  transactionPrepare(): any;
  transactionRollback(): any;
  transactionCommit(): any;
  transactionEnd(): any;
}
export class DataCollection {
  constructor(arg0?: any);
  getAll(): any;
  _getAll(arg0?: any): any;
  get(arg0?: any): any;
  _get(arg0?: any, arg1?: any): any;
  exists(arg0?: any): any;
  _exists(arg0?: any, arg1?: any): any;
  add(arg0?: any, arg1?: any, arg2?: any): any;
  _add(arg0?: any, arg1?: any, arg2?: any, arg3?: any): any;
  update(arg0?: any, arg1?: any): any;
  _update(arg0?: any, arg1?: any, arg2?: any): any;
  remove(arg0?: any): any;
  _remove(arg0?: any, arg1?: any): any;
}
export class DataService {
  constructor();
  createCollection(arg0?: any, arg1?: any): any;
  _createCollection(arg0?: any, arg1?: any, arg2?: any): any;
  deleteCollection(arg0?: any): any;
  _deleteCollection(arg0?: any, arg1?: any): any;
  getCollection(arg0?: any): any;
  _getCollection(arg0?: any, arg1?: any): any;
  existsCollection(arg0?: any): any;
  _existsCollection(arg0?: any, arg1?: any): any;
  executeQuery(arg0?: any): any;
  _executeQuery(arg0?: any, arg1?: any): any;
  ensureCollection(arg0?: any): any;
}
export class Engine {
  constructor(arg0?: any);
  getContainer(): any;
  installLogger(): any;
  init(arg0?: any, arg1?: any, arg2?: any): any;
  _init(arg0?: any, arg1?: any, arg2?: any, arg3?: any): any;
  invoke(arg0?: any, arg1?: any, arg2?: any): any;
  _invoke(arg0?: any, arg1?: any, arg2?: any, arg3?: any): any;
  query(arg0?: any, arg1?: any, arg2?: any): any;
  _query(arg0?: any, arg1?: any, arg2?: any, arg3?: any): any;
  ping(arg0?: any, arg1?: any): any;
  getBusinessNetwork(arg0?: any, arg1?: any): any;
  undeployBusinessNetwork(arg0?: any, arg1?: any): any;
  executeQuery(arg0?: any, arg1?: any): any;
  getAllRegistries(arg0?: any, arg1?: any): any;
  getRegistry(arg0?: any, arg1?: any): any;
  existsRegistry(arg0?: any, arg1?: any): any;
  addRegistry(arg0?: any, arg1?: any): any;
  getAllResourcesInRegistry(arg0?: any, arg1?: any): any;
  getResourceInRegistry(arg0?: any, arg1?: any): any;
  existsResourceInRegistry(arg0?: any, arg1?: any): any;
  resolveAllResourcesInRegistry(arg0?: any, arg1?: any): any;
  resolveResourceInRegistry(arg0?: any, arg1?: any): any;
  submitTransaction(arg0?: any, arg1?: any): any;
  createHistorianRecord(arg0?: any, arg1?: any): any;
  getLogLevel(arg0?: any, arg1?: any): any;
}
export class EventService {
  constructor();
  emit(arg0?: any): any;
  getEvents(): any;
  transactionStart(arg0?: any): any;
}
export class HTTPService {
  constructor();
  post(arg0?: any, arg1?: any): any;
  _post(): any;
}
export class IdentityService {
  constructor();
  getIdentifier(): any;
  getName(): any;
  getIssuer(): any;
  getCertificate(): any;
}
export class Logger {
  static setLogLevel(arg0?: any): any;
  static getSelectionTree(): any;
  static setSelectionTree(arg0?: any): any;
  static getFunctionalLogger(): any;
  static setFunctionalLogger(arg0?: any): any;
  static getDebugEnv(): any;
  static getLoggerConfig(): any;
  static getLog(arg0?: any): any;
  static _setupLog(arg0?: any): any;
  static _parseLoggerConfig(arg0?: any): any;
  static _loadLogger(arg0?: any): any;
  static reset(): any;
  constructor(arg0?: any);
  padRight(arg0?: any, arg1?: any): any;
  intlog(arg0?: any, arg1?: any, arg2?: any): any;
  _intLogMain(arg0?: any, arg1?: any, arg2?: any): any;
  _intLogFirst(arg0?: any, arg1?: any, arg2?: any): any;
  debug(arg0?: any, arg1?: any, arg2?: any): any;
  warn(arg0?: any, arg1?: any, arg2?: any): any;
  info(arg0?: any, arg1?: any, arg2?: any): any;
  verbose(arg0?: any, arg1?: any, arg2?: any): any;
  error(arg0?: any, arg1?: any, arg2?: any): any;
  entry(arg0?: any, arg1?: any): any;
  exit(arg0?: any, arg1?: any): any;
}
export class LoggingService {
  constructor();
  logCritical(arg0?: any): any;
  logDebug(arg0?: any): any;
  logError(arg0?: any): any;
  logInfo(arg0?: any): any;
  logNotice(arg0?: any): any;
  logWarning(arg0?: any): any;
  setLogLevel(arg0?: any): any;
  getLogLevel(): any;
}
export class ScriptCompiler {
  constructor();
  compile(arg0?: any): any;
  processScriptManager(arg0?: any, arg1?: any): any;
  processScript(arg0?: any, arg1?: any): any;
  convertScriptToSourceMap(arg0?: any, arg1?: any): any;
  convertScriptToScriptNode(arg0?: any, arg1?: any): any;
  transformScript(arg0?: any, arg1?: any, arg2?: any): any;
}
