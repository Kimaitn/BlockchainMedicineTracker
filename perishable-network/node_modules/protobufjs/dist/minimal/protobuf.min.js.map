{"version":3,"sources":["lib/prelude.js","node_modules/@protobufjs/aspromise/index.js","node_modules/@protobufjs/base64/index.js","node_modules/@protobufjs/eventemitter/index.js","node_modules/@protobufjs/inquire/index.js","node_modules/@protobufjs/pool/index.js","node_modules/@protobufjs/utf8/index.js","src/index-minimal","src/reader.js","src/reader_buffer.js","src/rpc.js","src/rpc/service.js","src/util/longbits.js","src/util/minimal.js","src/writer.js","src/writer_buffer.js"],"names":["global","undefined","modules","cache","entries","$require","name","$module","call","exports","protobuf","define","amd","Long","util","configure","module","1","require","asPromise","fn","ctx","params","i","arguments","length","push","pending","Promise","resolve","reject","err","args","apply","this","base64","string","p","n","charAt","Math","ceil","b64","Array","s64","encode","buffer","start","end","t","j","b","String","fromCharCode","invalidEncoding","decode","offset","c","charCodeAt","Error","test","EventEmitter","_listeners","prototype","on","evt","off","listeners","splice","emit","inquire","moduleName","mod","eval","replace","Object","keys","e","pool","alloc","slice","size","SIZE","MAX","slab","buf","utf8","len","read","parts","chunk","join","write","c1","c2","Reader","_configure","BufferReader","build","roots","Writer","BufferWriter","rpc","indexOutOfRange","reader","writeLength","RangeError","pos","readLongVarint","bits","LongBits","lo","hi","read_int64_long","toLong","read_int64_number","toNumber","read_uint64_long","read_uint64_number","read_sint64_long","zzDecode","read_sint64_number","readFixed32","readFixed64","read_fixed64_long","read_fixed64_number","read_sfixed64_long","read_sfixed64_number","create","Buffer","isBuffer","_slice","subarray","uint32","value","int32","sint32","bool","fixed32","sfixed32","readFloat","Float32Array","f32","f8b","Uint8Array","uint","sign","exponent","mantissa","NaN","Infinity","pow","float","readDouble","Float64Array","f64","double","bytes","constructor","skip","skipType","wireType","BufferReader_","int64","uint64","sint64","fixed64","sfixed64","utf8Slice","min","Service","rpcImpl","requestDelimited","responseDelimited","TypeError","rpcCall","method","requestCtor","responseCtor","request","callback","self","setTimeout","finish","response","endedByRPC","zero","zzEncode","zeroHash","fromNumber","from","isString","parseInt","fromString","low","high","unsigned","fromHash","hash","toHash","mask","part0","part1","part2","emptyArray","freeze","emptyObject","isNode","process","versions","node","isInteger","Number","isFinite","floor","isObject","utf8Write","_Buffer_from","_Buffer_allocUnsafe","newBuffer","sizeOrArray","dcodeIO","longToHash","longFromHash","fromBits","merge","dst","src","ifNotSet","lcFirst","str","toLowerCase","substring","oneOfGetter","fieldNames","fieldMap","oneOfSetter","lazyResolve","root","lazyTypes","path","split","ptr","shift","toJSONOptions","longs","enums","encoding","allocUnsafe","Op","val","next","noop","State","writer","head","tail","states","writeByte","writeVarint32","VarintOp","writeVarint64","writeFixed32","writeFloat","isNaN","round","log","LN2","writeDouble","writeBytes","set","fork","reset","ldelim","BufferWriter_","writeStringBuffer","writeBytesBuffer","copy","byteLength"],"mappings":"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","file":"protobuf.min.js","sourcesContent":["(function prelude(modules, cache, entries) {\r\n\r\n    // This is the prelude used to bundle protobuf.js for the browser. Wraps up the CommonJS\r\n    // sources through a conflict-free require shim and is again wrapped within an iife that\r\n    // provides a unified `global` and a minification-friendly `undefined` var plus a global\r\n    // \"use strict\" directive so that minification can remove the directives of each module.\r\n\r\n    function $require(name) {\r\n        var $module = cache[name];\r\n        if (!$module)\r\n            modules[name][0].call($module = cache[name] = { exports: {} }, $require, $module, $module.exports);\r\n        return $module.exports;\r\n    }\r\n\r\n    // Expose globally\r\n    var protobuf = global.protobuf = $require(entries[0]);\r\n\r\n    // Be nice to AMD\r\n    if (typeof define === \"function\" && define.amd)\r\n        define([\"long\"], function(Long) {\r\n            protobuf.util.Long = Long;\r\n            protobuf.configure();\r\n            return protobuf;\r\n        });\r\n\r\n    // Be nice to CommonJS\r\n    if (typeof module === \"object\" && module && module.exports)\r\n        module.exports = protobuf;\r\n\r\n})/* end of prelude */","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {function(?Error, ...*)} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params = [];\r\n    for (var i = 2; i < arguments.length;)\r\n        params.push(arguments[i++]);\r\n    var pending = true;\r\n    return new Promise(function asPromiseExecutor(resolve, reject) {\r\n        params.push(function asPromiseCallback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var args = [];\r\n                    for (var i = 1; i < arguments.length;)\r\n                        args.push(arguments[i++]);\r\n                    resolve.apply(null, args);\r\n                }\r\n            }\r\n        });\r\n        try {\r\n            fn.apply(ctx || this, params); // eslint-disable-line no-invalid-this\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var string = []; // alt: new Array(Math.ceil((end - start) / 3) * 4);\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                string[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                string[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                string[i++] = b64[t | b >> 6];\r\n                string[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j) {\r\n        string[i++] = b64[t];\r\n        string[i  ] = 61;\r\n        if (j === 1)\r\n            string[i + 1] = 61;\r\n    }\r\n    return String.fromCharCode.apply(String, string);\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nvar protobuf = exports;\r\n\r\n/**\r\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\r\n * @name build\r\n * @type {string}\r\n */\r\nprotobuf.build = \"minimal\";\r\n\r\n/**\r\n * Named roots.\r\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\r\n * Can also be used manually to make roots available accross modules.\r\n * @name roots\r\n * @type {Object.<string,Root>}\r\n * @example\r\n * // pbjs -r myroot -o compiled.js ...\r\n * \r\n * // in another module:\r\n * require(\"./compiled.js\");\r\n * \r\n * // in any subsequent module:\r\n * var root = protobuf.roots[\"myroot\"];\r\n */\r\nprotobuf.roots = {};\r\n\r\n// Serialization\r\nprotobuf.Writer       = require(14);\r\nprotobuf.BufferWriter = require(15);\r\nprotobuf.Reader       = require(8);\r\nprotobuf.BufferReader = require(9);\r\n\r\n// Utility\r\nprotobuf.util         = require(13);\r\nprotobuf.rpc          = require(10);\r\nprotobuf.configure    = configure;\r\n\r\n/* istanbul ignore next */\r\n/**\r\n * Reconfigures the library according to the environment.\r\n * @returns {undefined}\r\n */\r\nfunction configure() {\r\n    protobuf.Reader._configure(protobuf.BufferReader);\r\n    protobuf.util._configure();\r\n}\r\n\r\n// Configure serialization\r\nprotobuf.Writer._configure(protobuf.BufferWriter);\r\nconfigure();\r\n","\"use strict\";\r\nmodule.exports = Reader;\r\n\r\nvar util      = require(13);\r\n\r\nvar BufferReader; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    utf8      = util.utf8;\r\n\r\n/* istanbul ignore next */\r\nfunction indexOutOfRange(reader, writeLength) {\r\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\r\n}\r\n\r\n/**\r\n * Constructs a new reader instance using the specified buffer.\r\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n * @param {Uint8Array} buffer Buffer to read from\r\n */\r\nfunction Reader(buffer) {\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @type {Uint8Array}\r\n     */\r\n    this.buf = buffer;\r\n\r\n    /**\r\n     * Read buffer position.\r\n     * @type {number}\r\n     */\r\n    this.pos = 0;\r\n\r\n    /**\r\n     * Read buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = buffer.length;\r\n}\r\n\r\n/**\r\n * Creates a new reader using the specified buffer.\r\n * @function\r\n * @param {Uint8Array|Buffer} buffer Buffer to read from\r\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\r\n */\r\nReader.create = util.Buffer\r\n    ? function create_buffer_setup(buffer) {\r\n        return (Reader.create = function create_buffer(buffer) {\r\n            return util.Buffer.isBuffer(buffer)\r\n                ? new BufferReader(buffer)\r\n                : new Reader(buffer);\r\n        })(buffer);\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array(buffer) {\r\n        return new Reader(buffer);\r\n    };\r\n\r\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\r\n\r\n/**\r\n * Reads a varint as an unsigned 32 bit value.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.uint32 = (function read_uint32_setup() {\r\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\r\n    return function read_uint32() {\r\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n\r\n        /* istanbul ignore next */\r\n        if ((this.pos += 5) > this.len) {\r\n            this.pos = this.len;\r\n            throw indexOutOfRange(this, 10);\r\n        }\r\n        return value;\r\n    };\r\n})();\r\n\r\n/**\r\n * Reads a varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.int32 = function read_int32() {\r\n    return this.uint32() | 0;\r\n};\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.sint32 = function read_sint32() {\r\n    var value = this.uint32();\r\n    return value >>> 1 ^ -(value & 1) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readLongVarint() {\r\n    // tends to deopt with local vars for octet etc.\r\n    var bits = new LongBits(0 >>> 0, 0 >>> 0);\r\n    var i = 0;\r\n    if (this.len - this.pos > 4) { // fast route (lo)\r\n        for (; i < 4; ++i) {\r\n            // 1st..4th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 5th\r\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\r\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\r\n        if (this.buf[this.pos++] < 128)\r\n            return bits;\r\n        i = 0;\r\n    } else {\r\n        for (; i < 3; ++i) {\r\n            /* istanbul ignore next */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 1st..3th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 4th\r\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\r\n        return bits;\r\n    }\r\n    if (this.len - this.pos > 4) { // fast route (hi)\r\n        for (; i < 5; ++i) {\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    } else {\r\n        for (; i < 5; ++i) {\r\n            /* istanbul ignore next */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    }\r\n    /* istanbul ignore next */\r\n    throw Error(\"invalid varint encoding\");\r\n}\r\n\r\nfunction read_int64_long() {\r\n    return readLongVarint.call(this).toLong();\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_int64_number() {\r\n    return readLongVarint.call(this).toNumber();\r\n}\r\n\r\nfunction read_uint64_long() {\r\n    return readLongVarint.call(this).toLong(true);\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_uint64_number() {\r\n    return readLongVarint.call(this).toNumber(true);\r\n}\r\n\r\nfunction read_sint64_long() {\r\n    return readLongVarint.call(this).zzDecode().toLong();\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_sint64_number() {\r\n    return readLongVarint.call(this).zzDecode().toNumber();\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads a varint as a signed 64 bit value.\r\n * @name Reader#int64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as an unsigned 64 bit value.\r\n * @name Reader#uint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 64 bit value.\r\n * @name Reader#sint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as a boolean.\r\n * @returns {boolean} Value read\r\n */\r\nReader.prototype.bool = function read_bool() {\r\n    return this.uint32() !== 0;\r\n};\r\n\r\nfunction readFixed32(buf, end) {\r\n    return (buf[end - 4]\r\n          | buf[end - 3] << 8\r\n          | buf[end - 2] << 16\r\n          | buf[end - 1] << 24) >>> 0;\r\n}\r\n\r\n/**\r\n * Reads fixed 32 bits as a number.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.fixed32 = function read_fixed32() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32(this.buf, this.pos += 4);\r\n};\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 32 bits as a number.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.sfixed32 = function read_sfixed32() {\r\n    var value = this.fixed32();\r\n    return value >>> 1 ^ -(value & 1);\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readFixed64(/* this: Reader */) {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 8);\r\n\r\n    return new LongBits(readFixed32(this.buf, this.pos += 4), readFixed32(this.buf, this.pos += 4));\r\n}\r\n\r\nfunction read_fixed64_long() {\r\n    return readFixed64.call(this).toLong(true);\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_fixed64_number() {\r\n    return readFixed64.call(this).toNumber(true);\r\n}\r\n\r\nfunction read_sfixed64_long() {\r\n    return readFixed64.call(this).zzDecode().toLong();\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_sfixed64_number() {\r\n    return readFixed64.call(this).zzDecode().toNumber();\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads fixed 64 bits.\r\n * @name Reader#fixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 64 bits.\r\n * @name Reader#sfixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\nvar readFloat = typeof Float32Array !== \"undefined\"\r\n    ? (function() {\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function readFloat_f32(buf, pos) {\r\n                f8b[0] = buf[pos    ];\r\n                f8b[1] = buf[pos + 1];\r\n                f8b[2] = buf[pos + 2];\r\n                f8b[3] = buf[pos + 3];\r\n                return f32[0];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function readFloat_f32_le(buf, pos) {\r\n                f8b[3] = buf[pos    ];\r\n                f8b[2] = buf[pos + 1];\r\n                f8b[1] = buf[pos + 2];\r\n                f8b[0] = buf[pos + 3];\r\n                return f32[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function readFloat_ieee754(buf, pos) {\r\n        var uint = readFixed32(buf, pos + 4),\r\n            sign = (uint >> 31) * 2 + 1,\r\n            exponent = uint >>> 23 & 255,\r\n            mantissa = uint & 8388607;\r\n        return exponent === 255\r\n            ? mantissa\r\n              ? NaN\r\n              : sign * Infinity\r\n            : exponent === 0 // denormal\r\n              ? sign * 1.401298464324817e-45 * mantissa\r\n              : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n    };\r\n\r\n/**\r\n * Reads a float (32 bit) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.float = function read_float() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = readFloat(this.buf, this.pos);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\nvar readDouble = typeof Float64Array !== \"undefined\"\r\n    ? (function() {\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function readDouble_f64(buf, pos) {\r\n                f8b[0] = buf[pos    ];\r\n                f8b[1] = buf[pos + 1];\r\n                f8b[2] = buf[pos + 2];\r\n                f8b[3] = buf[pos + 3];\r\n                f8b[4] = buf[pos + 4];\r\n                f8b[5] = buf[pos + 5];\r\n                f8b[6] = buf[pos + 6];\r\n                f8b[7] = buf[pos + 7];\r\n                return f64[0];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function readDouble_f64_le(buf, pos) {\r\n                f8b[7] = buf[pos    ];\r\n                f8b[6] = buf[pos + 1];\r\n                f8b[5] = buf[pos + 2];\r\n                f8b[4] = buf[pos + 3];\r\n                f8b[3] = buf[pos + 4];\r\n                f8b[2] = buf[pos + 5];\r\n                f8b[1] = buf[pos + 6];\r\n                f8b[0] = buf[pos + 7];\r\n                return f64[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function readDouble_ieee754(buf, pos) {\r\n        var lo = readFixed32(buf, pos + 4),\r\n            hi = readFixed32(buf, pos + 8);\r\n        var sign = (hi >> 31) * 2 + 1,\r\n            exponent = hi >>> 20 & 2047,\r\n            mantissa = 4294967296 * (hi & 1048575) + lo;\r\n        return exponent === 2047\r\n            ? mantissa\r\n              ? NaN\r\n              : sign * Infinity\r\n            : exponent === 0 // denormal\r\n              ? sign * 5e-324 * mantissa\r\n              : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n    };\r\n\r\n/**\r\n * Reads a double (64 bit float) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.double = function read_double() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = readDouble(this.buf, this.pos);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @returns {Uint8Array} Value read\r\n */\r\nReader.prototype.bytes = function read_bytes() {\r\n    var length = this.uint32(),\r\n        start  = this.pos,\r\n        end    = this.pos + length;\r\n\r\n    /* istanbul ignore next */\r\n    if (end > this.len)\r\n        throw indexOutOfRange(this, length);\r\n\r\n    this.pos += length;\r\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\r\n        ? new this.buf.constructor(0)\r\n        : this._slice.call(this.buf, start, end);\r\n};\r\n\r\n/**\r\n * Reads a string preceeded by its byte length as a varint.\r\n * @returns {string} Value read\r\n */\r\nReader.prototype.string = function read_string() {\r\n    var bytes = this.bytes();\r\n    return utf8.read(bytes, 0, bytes.length);\r\n};\r\n\r\n/**\r\n * Skips the specified number of bytes if specified, otherwise skips a varint.\r\n * @param {number} [length] Length if known, otherwise a varint is assumed\r\n * @returns {Reader} `this`\r\n */\r\nReader.prototype.skip = function skip(length) {\r\n    if (typeof length === \"number\") {\r\n        /* istanbul ignore next */\r\n        if (this.pos + length > this.len)\r\n            throw indexOutOfRange(this, length);\r\n        this.pos += length;\r\n    } else {\r\n        /* istanbul ignore next */\r\n        do {\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n        } while (this.buf[this.pos++] & 128);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Skips the next element of the specified wire type.\r\n * @param {number} wireType Wire type received\r\n * @returns {Reader} `this`\r\n */\r\nReader.prototype.skipType = function(wireType) {\r\n    switch (wireType) {\r\n        case 0:\r\n            this.skip();\r\n            break;\r\n        case 1:\r\n            this.skip(8);\r\n            break;\r\n        case 2:\r\n            this.skip(this.uint32());\r\n            break;\r\n        case 3:\r\n            do { // eslint-disable-line no-constant-condition\r\n                if ((wireType = this.uint32() & 7) === 4)\r\n                    break;\r\n                this.skipType(wireType);\r\n            } while (true);\r\n            break;\r\n        case 5:\r\n            this.skip(4);\r\n            break;\r\n\r\n        /* istanbul ignore next */\r\n        default:\r\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\r\n    }\r\n    return this;\r\n};\r\n\r\nReader._configure = function(BufferReader_) {\r\n    BufferReader = BufferReader_;\r\n\r\n    /* istanbul ignore else */\r\n    if (util.Long) {\r\n        Reader.prototype.int64 = read_int64_long;\r\n        Reader.prototype.uint64 = read_uint64_long;\r\n        Reader.prototype.sint64 = read_sint64_long;\r\n        Reader.prototype.fixed64 = read_fixed64_long;\r\n        Reader.prototype.sfixed64 = read_sfixed64_long;\r\n    } else {\r\n        Reader.prototype.int64 = read_int64_number;\r\n        Reader.prototype.uint64 = read_uint64_number;\r\n        Reader.prototype.sint64 = read_sint64_number;\r\n        Reader.prototype.fixed64 = read_fixed64_number;\r\n        Reader.prototype.sfixed64 = read_sfixed64_number;\r\n    }\r\n};\r\n","\"use strict\";\r\nmodule.exports = BufferReader;\r\n\r\n// extends Reader\r\nvar Reader = require(8);\r\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\r\n\r\nvar util = require(13);\r\n\r\n/**\r\n * Constructs a new buffer reader instance.\r\n * @classdesc Wire format reader using node buffers.\r\n * @extends Reader\r\n * @constructor\r\n * @param {Buffer} buffer Buffer to read from\r\n */\r\nfunction BufferReader(buffer) {\r\n    Reader.call(this, buffer);\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @name BufferReader#buf\r\n     * @type {Buffer}\r\n     */\r\n}\r\n\r\n/* istanbul ignore else */\r\nif (util.Buffer)\r\n    BufferReader.prototype._slice = util.Buffer.prototype.slice;\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReader.prototype.string = function read_string_buffer() {\r\n    var len = this.uint32(); // modifies pos\r\n    return this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len));\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @name BufferReader#bytes\r\n * @function\r\n * @returns {Buffer} Value read\r\n */\r\n","\"use strict\";\r\n\r\n/**\r\n * Streaming RPC helpers.\r\n * @namespace\r\n */\r\nvar rpc = exports;\r\n\r\n/**\r\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\r\n * @typedef RPCImpl\r\n * @type {function}\r\n * @param {Method|rpc.ServiceMethod} method Reflected or static method being called\r\n * @param {Uint8Array} requestData Request data\r\n * @param {RPCImplCallback} callback Callback function\r\n * @returns {undefined}\r\n * @example\r\n * function rpcImpl(method, requestData, callback) {\r\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\r\n *         throw Error(\"no such method\");\r\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\r\n *         callback(err, responseData);\r\n *     });\r\n * }\r\n */\r\n\r\n/**\r\n * Node-style callback as used by {@link RPCImpl}.\r\n * @typedef RPCImplCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {?Uint8Array} [response] Response data or `null` to signal end of stream, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\nrpc.Service = require(11);\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\nvar util = require(13);\r\n\r\n// Extends EventEmitter\r\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\r\n\r\n/**\r\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\r\n * \r\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\r\n * @typedef rpc.ServiceMethodCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any\r\n * @param {?Message} [response] Response message\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * A service method part of a {@link rpc.ServiceMethodMixin|ServiceMethodMixin} and thus {@link rpc.Service} as created by {@link Service.create}.\r\n * @typedef rpc.ServiceMethod\r\n * @type {function}\r\n * @param {Message|Object} request Request message or plain object\r\n * @param {rpc.ServiceMethodCallback} [callback] Node-style callback called with the error, if any, and the response message\r\n * @returns {Promise<Message>} Promise if `callback` has been omitted, otherwise `undefined`\r\n */\r\n\r\n/**\r\n * A service method mixin.\r\n * \r\n * When using TypeScript, mixed in service methods are only supported directly with a type definition of a static module (used with reflection). Otherwise, explicit casting is required.\r\n * @typedef rpc.ServiceMethodMixin\r\n * @type {Object.<string,rpc.ServiceMethod>}\r\n * @example\r\n * // Explicit casting with TypeScript\r\n * (myRpcService[\"myMethod\"] as protobuf.rpc.ServiceMethod)(...)\r\n */\r\n\r\n/**\r\n * Constructs a new RPC service instance.\r\n * @classdesc An RPC service as returned by {@link Service#create}.\r\n * @exports rpc.Service\r\n * @extends util.EventEmitter\r\n * @augments rpc.ServiceMethodMixin\r\n * @constructor\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n */\r\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\r\n\r\n    if (typeof rpcImpl !== \"function\")\r\n        throw TypeError(\"rpcImpl must be a function\");\r\n\r\n    util.EventEmitter.call(this);\r\n\r\n    /**\r\n     * RPC implementation. Becomes `null` once the service is ended.\r\n     * @type {?RPCImpl}\r\n     */\r\n    this.rpcImpl = rpcImpl;\r\n\r\n    /**\r\n     * Whether requests are length-delimited.\r\n     * @type {boolean}\r\n     */\r\n    this.requestDelimited = Boolean(requestDelimited);\r\n\r\n    /**\r\n     * Whether responses are length-delimited.\r\n     * @type {boolean}\r\n     */\r\n    this.responseDelimited = Boolean(responseDelimited);\r\n}\r\n\r\n/**\r\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\r\n * @param {Method|rpc.ServiceMethod} method Reflected or static method\r\n * @param {function} requestCtor Request constructor\r\n * @param {function} responseCtor Response constructor\r\n * @param {Message|Object} request Request message or plain object\r\n * @param {rpc.ServiceMethodCallback} callback Service callback\r\n * @returns {undefined}\r\n */\r\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\r\n\r\n    if (!request)\r\n        throw TypeError(\"request must be specified\");\r\n\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\r\n\r\n    if (!self.rpcImpl) {\r\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\r\n        return undefined;\r\n    }\r\n\r\n    try {\r\n        return self.rpcImpl(\r\n            method,\r\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\r\n            function rpcCallback(err, response) {\r\n\r\n                if (err) {\r\n                    self.emit(\"error\", err, method);\r\n                    return callback(err);\r\n                }\r\n\r\n                if (response === null) {\r\n                    self.end(/* endedByRPC */ true);\r\n                    return undefined;\r\n                }\r\n\r\n                if (!(response instanceof responseCtor)) {\r\n                    try {\r\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\r\n                    } catch (err) {\r\n                        self.emit(\"error\", err, method);\r\n                        return callback(err);\r\n                    }\r\n                }\r\n\r\n                self.emit(\"data\", response, method);\r\n                return callback(null, response);\r\n            }\r\n        );\r\n    } catch (err) {\r\n        self.emit(\"error\", err, method);\r\n        setTimeout(function() { callback(err); }, 0);\r\n        return undefined;\r\n    }\r\n};\r\n\r\n/**\r\n * Ends this service and emits the `end` event.\r\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\r\n * @returns {rpc.Service} `this`\r\n */\r\nService.prototype.end = function end(endedByRPC) {\r\n    if (this.rpcImpl) {\r\n        if (!endedByRPC) // signal end to rpcImpl\r\n            this.rpcImpl(null, null, null);\r\n        this.rpcImpl = null;\r\n        this.emit(\"end\").off();\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = LongBits;\r\n\r\nvar util = require(13);\r\n\r\n/**\r\n * Any compatible Long instance.\r\n * \r\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\r\n * @typedef Long\r\n * @type {Object}\r\n * @property {number} low Low bits\r\n * @property {number} high High bits\r\n * @property {boolean} unsigned Whether unsigned or not\r\n */\r\n\r\n/**\r\n * Constructs new long bits.\r\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\r\n * @memberof util\r\n * @constructor\r\n * @param {number} lo Low bits\r\n * @param {number} hi High bits\r\n */\r\nfunction LongBits(lo, hi) { // make sure to always call this with unsigned 32bits for proper optimization\r\n\r\n    /**\r\n     * Low bits.\r\n     * @type {number}\r\n     */\r\n    this.lo = lo;\r\n\r\n    /**\r\n     * High bits.\r\n     * @type {number}\r\n     */\r\n    this.hi = hi;\r\n}\r\n\r\n/**\r\n * Zero bits.\r\n * @memberof util.LongBits\r\n * @type {util.LongBits}\r\n */\r\nvar zero = LongBits.zero = new LongBits(0, 0);\r\n\r\nzero.toNumber = function() { return 0; };\r\nzero.zzEncode = zero.zzDecode = function() { return this; };\r\nzero.length = function() { return 1; };\r\n\r\n/**\r\n * Zero hash.\r\n * @memberof util.LongBits\r\n * @type {string}\r\n */\r\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\r\n\r\n/**\r\n * Constructs new long bits from the specified number.\r\n * @param {number} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.fromNumber = function fromNumber(value) {\r\n    if (value === 0)\r\n        return zero;\r\n    var sign = value < 0;\r\n    if (sign)\r\n        value = -value;\r\n    var lo = value >>> 0,\r\n        hi = (value - lo) / 4294967296 >>> 0; \r\n    if (sign) {\r\n        hi = ~hi >>> 0;\r\n        lo = ~lo >>> 0;\r\n        if (++lo > 4294967295) {\r\n            lo = 0;\r\n            if (++hi > 4294967295)\r\n                hi = 0;\r\n        }\r\n    }\r\n    return new LongBits(lo, hi);\r\n};\r\n\r\n/**\r\n * Constructs new long bits from a number, long or string.\r\n * @param {Long|number|string} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.from = function from(value) {\r\n    if (typeof value === \"number\")\r\n        return LongBits.fromNumber(value);\r\n    if (util.isString(value)) {\r\n        /* istanbul ignore else */\r\n        if (util.Long)\r\n            value = util.Long.fromString(value);\r\n        else\r\n            return LongBits.fromNumber(parseInt(value, 10));\r\n    }\r\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a possibly unsafe JavaScript number.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {number} Possibly unsafe number\r\n */\r\nLongBits.prototype.toNumber = function toNumber(unsigned) {\r\n    if (!unsigned && this.hi >>> 31) {\r\n        var lo = ~this.lo + 1 >>> 0,\r\n            hi = ~this.hi     >>> 0;\r\n        if (!lo)\r\n            hi = hi + 1 >>> 0;\r\n        return -(lo + hi * 4294967296);\r\n    }\r\n    return this.lo + this.hi * 4294967296;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a long.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long} Long\r\n */\r\nLongBits.prototype.toLong = function toLong(unsigned) {\r\n    return util.Long\r\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\r\n        /* istanbul ignore next */\r\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\r\n};\r\n\r\nvar charCodeAt = String.prototype.charCodeAt;\r\n\r\n/**\r\n * Constructs new long bits from the specified 8 characters long hash.\r\n * @param {string} hash Hash\r\n * @returns {util.LongBits} Bits\r\n */\r\nLongBits.fromHash = function fromHash(hash) {\r\n    if (hash === zeroHash)\r\n        return zero;\r\n    return new LongBits(\r\n        ( charCodeAt.call(hash, 0)\r\n        | charCodeAt.call(hash, 1) << 8\r\n        | charCodeAt.call(hash, 2) << 16\r\n        | charCodeAt.call(hash, 3) << 24) >>> 0\r\n    ,\r\n        ( charCodeAt.call(hash, 4)\r\n        | charCodeAt.call(hash, 5) << 8\r\n        | charCodeAt.call(hash, 6) << 16\r\n        | charCodeAt.call(hash, 7) << 24) >>> 0\r\n    );\r\n};\r\n\r\n/**\r\n * Converts this long bits to a 8 characters long hash.\r\n * @returns {string} Hash\r\n */\r\nLongBits.prototype.toHash = function toHash() {\r\n    return String.fromCharCode(\r\n        this.lo        & 255,\r\n        this.lo >>> 8  & 255,\r\n        this.lo >>> 16 & 255,\r\n        this.lo >>> 24      ,\r\n        this.hi        & 255,\r\n        this.hi >>> 8  & 255,\r\n        this.hi >>> 16 & 255,\r\n        this.hi >>> 24\r\n    );\r\n};\r\n\r\n/**\r\n * Zig-zag encodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBits.prototype.zzEncode = function zzEncode() {\r\n    var mask =   this.hi >> 31;\r\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\r\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Zig-zag decodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBits.prototype.zzDecode = function zzDecode() {\r\n    var mask = -(this.lo & 1);\r\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\r\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Calculates the length of this longbits when encoded as a varint.\r\n * @returns {number} Length\r\n */\r\nLongBits.prototype.length = function length() {\r\n    var part0 =  this.lo,\r\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\r\n        part2 =  this.hi >>> 24;\r\n    return part2 === 0\r\n         ? part1 === 0\r\n           ? part0 < 16384\r\n             ? part0 < 128 ? 1 : 2\r\n             : part0 < 2097152 ? 3 : 4\r\n           : part1 < 16384\r\n             ? part1 < 128 ? 5 : 6\r\n             : part1 < 2097152 ? 7 : 8\r\n         : part2 < 128 ? 9 : 10;\r\n};\r\n","\"use strict\";\r\nvar util = exports;\r\n\r\n// used to return a Promise where callback is omitted\r\nutil.asPromise = require(1);\r\n\r\n// converts to / from base64 encoded strings\r\nutil.base64 = require(2);\r\n\r\n// base class of rpc.Service\r\nutil.EventEmitter = require(3);\r\n\r\n// requires modules optionally and hides the call from bundlers\r\nutil.inquire = require(4);\r\n\r\n// convert to / from utf8 encoded strings\r\nutil.utf8 = require(6);\r\n\r\n// provides a node-like buffer pool in the browser\r\nutil.pool = require(5);\r\n\r\n// utility to work with the low and high bits of a 64 bit value\r\nutil.LongBits = require(12);\r\n\r\n/**\r\n * An immuable empty array.\r\n * @memberof util\r\n * @type {Array.<*>}\r\n */\r\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\r\n\r\n/**\r\n * An immutable empty object.\r\n * @type {Object}\r\n */\r\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\r\n\r\n/**\r\n * Whether running within node or not.\r\n * @memberof util\r\n * @type {boolean}\r\n */\r\nutil.isNode = Boolean(global.process && global.process.versions && global.process.versions.node);\r\n\r\n/**\r\n * Tests if the specified value is an integer.\r\n * @function\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is an integer\r\n */\r\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\r\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a string.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a string\r\n */\r\nutil.isString = function isString(value) {\r\n    return typeof value === \"string\" || value instanceof String;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a non-null object.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a non-null object\r\n */\r\nutil.isObject = function isObject(value) {\r\n    return value && typeof value === \"object\";\r\n};\r\n\r\n/**\r\n * Node's Buffer class if available.\r\n * @type {?function(new: Buffer)}\r\n */\r\nutil.Buffer = (function() {\r\n    try {\r\n        var Buffer = util.inquire(\"buffer\").Buffer;\r\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\r\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\r\n    } catch (e) {\r\n        /* istanbul ignore next */\r\n        return null;\r\n    }\r\n})();\r\n\r\n/**\r\n * Internal alias of or polyfull for Buffer.from.\r\n * @type {?function}\r\n * @param {string|number[]} value Value\r\n * @param {string} [encoding] Encoding if value is a string\r\n * @returns {Uint8Array}\r\n * @private\r\n */\r\nutil._Buffer_from = null;\r\n\r\n/**\r\n * Internal alias of or polyfill for Buffer.allocUnsafe.\r\n * @type {?function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array}\r\n * @private\r\n */\r\nutil._Buffer_allocUnsafe = null;\r\n\r\n/**\r\n * Creates a new buffer of whatever type supported by the environment.\r\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\r\n * @returns {Uint8Array|Buffer} Buffer\r\n */\r\nutil.newBuffer = function newBuffer(sizeOrArray) {\r\n    /* istanbul ignore next */\r\n    return typeof sizeOrArray === \"number\"\r\n        ? util.Buffer\r\n            ? util._Buffer_allocUnsafe(sizeOrArray)\r\n            : new util.Array(sizeOrArray)\r\n        : util.Buffer\r\n            ? util._Buffer_from(sizeOrArray)\r\n            : typeof Uint8Array === \"undefined\"\r\n                ? sizeOrArray\r\n                : new Uint8Array(sizeOrArray);\r\n};\r\n\r\n/**\r\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\r\n * @type {?function(new: Uint8Array, *)}\r\n */\r\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\r\n\r\n/**\r\n * Long.js's Long class if available.\r\n * @type {?function(new: Long)}\r\n */\r\nutil.Long = /* istanbul ignore next */ global.dcodeIO && /* istanbul ignore next */ global.dcodeIO.Long || util.inquire(\"long\");\r\n\r\n/**\r\n * Converts a number or long to an 8 characters long hash string.\r\n * @param {Long|number} value Value to convert\r\n * @returns {string} Hash\r\n */\r\nutil.longToHash = function longToHash(value) {\r\n    return value\r\n        ? util.LongBits.from(value).toHash()\r\n        : util.LongBits.zeroHash;\r\n};\r\n\r\n/**\r\n * Converts an 8 characters long hash string to a long or number.\r\n * @param {string} hash Hash\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long|number} Original value\r\n */\r\nutil.longFromHash = function longFromHash(hash, unsigned) {\r\n    var bits = util.LongBits.fromHash(hash);\r\n    if (util.Long)\r\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\r\n    return bits.toNumber(Boolean(unsigned));\r\n};\r\n\r\n/**\r\n * Merges the properties of the source object into the destination object.\r\n * @param {Object.<string,*>} dst Destination object\r\n * @param {Object.<string,*>} src Source object\r\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\r\n * @returns {Object.<string,*>} Destination object\r\n */\r\nutil.merge = function merge(dst, src, ifNotSet) { // used by converters\r\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\r\n        if (dst[keys[i]] === undefined || !ifNotSet)\r\n            dst[keys[i]] = src[keys[i]];\r\n    return dst;\r\n};\r\n\r\n/**\r\n * Converts the first character of a string to lower case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.lcFirst = function lcFirst(str) {\r\n    return str.charAt(0).toLowerCase() + str.substring(1);\r\n};\r\n\r\n/**\r\n * Builds a getter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {function():string|undefined} Unbound getter\r\n */\r\nutil.oneOfGetter = function getOneOf(fieldNames) {\r\n    var fieldMap = {};\r\n    for (var i = 0; i < fieldNames.length; ++i)\r\n        fieldMap[fieldNames[i]] = 1;\r\n\r\n    /**\r\n     * @returns {string|undefined} Set field name, if any\r\n     * @this Object\r\n     * @ignore\r\n     */\r\n    return function() { // eslint-disable-line consistent-return\r\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\r\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\r\n                return keys[i];\r\n    };\r\n};\r\n\r\n/**\r\n * Builds a setter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {function(?string):undefined} Unbound setter\r\n */\r\nutil.oneOfSetter = function setOneOf(fieldNames) {\r\n\r\n    /**\r\n     * @param {string} name Field name\r\n     * @returns {undefined}\r\n     * @this Object\r\n     * @ignore\r\n     */\r\n    return function(name) {\r\n        for (var i = 0; i < fieldNames.length; ++i)\r\n            if (fieldNames[i] !== name)\r\n                delete this[fieldNames[i]];\r\n    };\r\n};\r\n\r\n/**\r\n * Lazily resolves fully qualified type names against the specified root.\r\n * @param {Root} root Root instanceof\r\n * @param {Object.<number,string|ReflectionObject>} lazyTypes Type names\r\n * @returns {undefined}\r\n */\r\nutil.lazyResolve = function lazyResolve(root, lazyTypes) {\r\n    for (var i = 0; i < lazyTypes.length; ++i) {\r\n        for (var keys = Object.keys(lazyTypes[i]), j = 0; j < keys.length; ++j) {\r\n            var path = lazyTypes[i][keys[j]].split(\".\"),\r\n                ptr  = root;\r\n            while (path.length)\r\n                ptr = ptr[path.shift()];\r\n            lazyTypes[i][keys[j]] = ptr;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Default conversion options used for toJSON implementations. Converts longs, enums and bytes to strings.\r\n * @type {ConversionOptions}\r\n */\r\nutil.toJSONOptions = {\r\n    longs: String,\r\n    enums: String,\r\n    bytes: String\r\n};\r\n\r\nutil._configure = function() {\r\n    var Buffer = util.Buffer;\r\n    if (!Buffer) {\r\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\r\n        return;\r\n    }\r\n    // because node 4.x buffers are incompatible & immutable\r\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\r\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\r\n        /* istanbul ignore next */\r\n        function Buffer_from(value, encoding) {\r\n            return new Buffer(value, encoding);\r\n        };\r\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\r\n        /* istanbul ignore next */\r\n        function Buffer_allocUnsafe(size) {\r\n            return new Buffer(size);\r\n        };\r\n};\r\n","\"use strict\";\r\nmodule.exports = Writer;\r\n\r\nvar util      = require(13);\r\n\r\nvar BufferWriter; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    base64    = util.base64,\r\n    utf8      = util.utf8;\r\n\r\n/**\r\n * Constructs a new writer operation instance.\r\n * @classdesc Scheduled writer operation.\r\n * @constructor\r\n * @param {function(*, Uint8Array, number)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {*} val Value to write\r\n * @ignore\r\n */\r\nfunction Op(fn, len, val) {\r\n\r\n    /**\r\n     * Function to call.\r\n     * @type {function(Uint8Array, number, *)}\r\n     */\r\n    this.fn = fn;\r\n\r\n    /**\r\n     * Value byte length.\r\n     * @type {number}\r\n     */\r\n    this.len = len;\r\n\r\n    /**\r\n     * Next operation.\r\n     * @type {Writer.Op|undefined}\r\n     */\r\n    this.next = undefined;\r\n\r\n    /**\r\n     * Value to write.\r\n     * @type {*}\r\n     */\r\n    this.val = val; // type varies\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction noop() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Constructs a new writer state instance.\r\n * @classdesc Copied writer state.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {Writer} writer Writer to copy state from\r\n * @private\r\n * @ignore\r\n */\r\nfunction State(writer) {\r\n\r\n    /**\r\n     * Current head.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.head = writer.head;\r\n\r\n    /**\r\n     * Current tail.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.tail = writer.tail;\r\n\r\n    /**\r\n     * Current buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = writer.len;\r\n\r\n    /**\r\n     * Next state.\r\n     * @type {?State}\r\n     */\r\n    this.next = writer.states;\r\n}\r\n\r\n/**\r\n * Constructs a new writer instance.\r\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n */\r\nfunction Writer() {\r\n\r\n    /**\r\n     * Current length.\r\n     * @type {number}\r\n     */\r\n    this.len = 0;\r\n\r\n    /**\r\n     * Operations head.\r\n     * @type {Object}\r\n     */\r\n    this.head = new Op(noop, 0, 0);\r\n\r\n    /**\r\n     * Operations tail\r\n     * @type {Object}\r\n     */\r\n    this.tail = this.head;\r\n\r\n    /**\r\n     * Linked forked states.\r\n     * @type {?Object}\r\n     */\r\n    this.states = null;\r\n\r\n    // When a value is written, the writer calculates its byte length and puts it into a linked\r\n    // list of operations to perform when finish() is called. This both allows us to allocate\r\n    // buffers of the exact required size and reduces the amount of work we have to do compared\r\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\r\n    // part is just a linked list walk calling operations with already prepared values.\r\n}\r\n\r\n/**\r\n * Creates a new writer.\r\n * @function\r\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\r\n */\r\nWriter.create = util.Buffer\r\n    ? function create_buffer_setup() {\r\n        return (Writer.create = function create_buffer() {\r\n            return new BufferWriter();\r\n        })();\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array() {\r\n        return new Writer();\r\n    };\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nWriter.alloc = function alloc(size) {\r\n    return new util.Array(size);\r\n};\r\n\r\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\r\n/* istanbul ignore else */\r\nif (util.Array !== Array)\r\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\r\n\r\n/**\r\n * Pushes a new operation to the queue.\r\n * @param {function(Uint8Array, number, *)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.push = function push(fn, len, val) {\r\n    this.tail = this.tail.next = new Op(fn, len, val);\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\nfunction writeByte(val, buf, pos) {\r\n    buf[pos] = val & 255;\r\n}\r\n\r\nfunction writeVarint32(val, buf, pos) {\r\n    while (val > 127) {\r\n        buf[pos++] = val & 127 | 128;\r\n        val >>>= 7;\r\n    }\r\n    buf[pos] = val;\r\n}\r\n\r\n/**\r\n * Constructs a new varint writer operation instance.\r\n * @classdesc Scheduled varint writer operation.\r\n * @extends Op\r\n * @constructor\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @ignore\r\n */\r\nfunction VarintOp(len, val) {\r\n    this.len = len;\r\n    this.next = undefined;\r\n    this.val = val;\r\n}\r\n\r\nVarintOp.prototype = Object.create(Op.prototype);\r\nVarintOp.prototype.fn = writeVarint32;\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as a varint.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.uint32 = function write_uint32(value) {\r\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\r\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\r\n    this.len += (this.tail = this.tail.next = new VarintOp(\r\n        (value = value >>> 0)\r\n                < 128       ? 1\r\n        : value < 16384     ? 2\r\n        : value < 2097152   ? 3\r\n        : value < 268435456 ? 4\r\n        :                     5,\r\n    value)).len;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as a varint.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.int32 = function write_int32(value) {\r\n    return value < 0\r\n        ? this.push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\r\n        : this.uint32(value);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as a varint, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.sint32 = function write_sint32(value) {\r\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\r\n};\r\n\r\nfunction writeVarint64(val, buf, pos) {\r\n    while (val.hi) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\r\n        val.hi >>>= 7;\r\n    }\r\n    while (val.lo > 127) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = val.lo >>> 7;\r\n    }\r\n    buf[pos++] = val.lo;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as a varint.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.uint64 = function write_uint64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.int64 = Writer.prototype.uint64;\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.sint64 = function write_sint64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a boolish value as a varint.\r\n * @param {boolean} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.bool = function write_bool(value) {\r\n    return this.push(writeByte, 1, value ? 1 : 0);\r\n};\r\n\r\nfunction writeFixed32(val, buf, pos) {\r\n    buf[pos++] =  val         & 255;\r\n    buf[pos++] =  val >>> 8   & 255;\r\n    buf[pos++] =  val >>> 16  & 255;\r\n    buf[pos  ] =  val >>> 24;\r\n}\r\n\r\n/**\r\n * Writes a 32 bit value as fixed 32 bits.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.fixed32 = function write_fixed32(value) {\r\n    return this.push(writeFixed32, 4, value >>> 0);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as fixed 32 bits, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.sfixed32 = function write_sfixed32(value) {\r\n    return this.push(writeFixed32, 4, value << 1 ^ value >> 31);\r\n};\r\n\r\n/**\r\n * Writes a 64 bit value as fixed 64 bits.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.fixed64 = function write_fixed64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeFixed32, 4, bits.lo).push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\n/**\r\n * Writes a 64 bit value as fixed 64 bits, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.sfixed64 = function write_sfixed64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeFixed32, 4, bits.lo).push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\nvar writeFloat = typeof Float32Array !== \"undefined\"\r\n    ? (function() {\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function writeFloat_f32(val, buf, pos) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos  ] = f8b[3];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function writeFloat_f32_le(val, buf, pos) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function writeFloat_ieee754(value, buf, pos) {\r\n        var sign = value < 0 ? 1 : 0;\r\n        if (sign)\r\n            value = -value;\r\n        if (value === 0)\r\n            writeFixed32(1 / value > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n        else if (isNaN(value))\r\n            writeFixed32(2147483647, buf, pos);\r\n        else if (value > 3.4028234663852886e+38) // +-Infinity\r\n            writeFixed32((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n        else if (value < 1.1754943508222875e-38) // denormal\r\n            writeFixed32((sign << 31 | Math.round(value / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n        else {\r\n            var exponent = Math.floor(Math.log(value) / Math.LN2),\r\n                mantissa = Math.round(value * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n            writeFixed32((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n        }\r\n    };\r\n\r\n/**\r\n * Writes a float (32 bit).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.float = function write_float(value) {\r\n    return this.push(writeFloat, 4, value);\r\n};\r\n\r\nvar writeDouble = typeof Float64Array !== \"undefined\"\r\n    ? (function() {\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function writeDouble_f64(val, buf, pos) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos  ] = f8b[7];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function writeDouble_f64_le(val, buf, pos) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[7];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function writeDouble_ieee754(value, buf, pos) {\r\n        var sign = value < 0 ? 1 : 0;\r\n        if (sign)\r\n            value = -value;\r\n        if (value === 0) {\r\n            writeFixed32(0, buf, pos);\r\n            writeFixed32(1 / value > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + 4);\r\n        } else if (isNaN(value)) {\r\n            writeFixed32(4294967295, buf, pos);\r\n            writeFixed32(2147483647, buf, pos + 4);\r\n        } else if (value > 1.7976931348623157e+308) { // +-Infinity\r\n            writeFixed32(0, buf, pos);\r\n            writeFixed32((sign << 31 | 2146435072) >>> 0, buf, pos + 4);\r\n        } else {\r\n            var mantissa;\r\n            if (value < 2.2250738585072014e-308) { // denormal\r\n                mantissa = value / 5e-324;\r\n                writeFixed32(mantissa >>> 0, buf, pos);\r\n                writeFixed32((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + 4);\r\n            } else {\r\n                var exponent = Math.floor(Math.log(value) / Math.LN2);\r\n                if (exponent === 1024)\r\n                    exponent = 1023;\r\n                mantissa = value * Math.pow(2, -exponent);\r\n                writeFixed32(mantissa * 4503599627370496 >>> 0, buf, pos);\r\n                writeFixed32((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + 4);\r\n            }\r\n        }\r\n    };\r\n\r\n/**\r\n * Writes a double (64 bit float).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.double = function write_double(value) {\r\n    return this.push(writeDouble, 8, value);\r\n};\r\n\r\nvar writeBytes = util.Array.prototype.set\r\n    ? function writeBytes_set(val, buf, pos) {\r\n        buf.set(val, pos); // also works for plain array values\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytes_for(val, buf, pos) {\r\n        for (var i = 0; i < val.length; ++i)\r\n            buf[pos + i] = val[i];\r\n    };\r\n\r\n/**\r\n * Writes a sequence of bytes.\r\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.bytes = function write_bytes(value) {\r\n    var len = value.length >>> 0;\r\n    if (!len)\r\n        return this.push(writeByte, 1, 0);\r\n    if (util.isString(value)) {\r\n        var buf = Writer.alloc(len = base64.length(value));\r\n        base64.decode(value, buf, 0);\r\n        value = buf;\r\n    }\r\n    return this.uint32(len).push(writeBytes, len, value);\r\n};\r\n\r\n/**\r\n * Writes a string.\r\n * @param {string} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.string = function write_string(value) {\r\n    var len = utf8.length(value);\r\n    return len\r\n        ? this.uint32(len).push(utf8.write, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Forks this writer's state by pushing it to a stack.\r\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.fork = function fork() {\r\n    this.states = new State(this);\r\n    this.head = this.tail = new Op(noop, 0, 0);\r\n    this.len = 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets this instance to the last state.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.reset = function reset() {\r\n    if (this.states) {\r\n        this.head   = this.states.head;\r\n        this.tail   = this.states.tail;\r\n        this.len    = this.states.len;\r\n        this.states = this.states.next;\r\n    } else {\r\n        this.head = this.tail = new Op(noop, 0, 0);\r\n        this.len  = 0;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.ldelim = function ldelim() {\r\n    var head = this.head,\r\n        tail = this.tail,\r\n        len  = this.len;\r\n    this.reset().uint32(len);\r\n    if (len) {\r\n        this.tail.next = head.next; // skip noop\r\n        this.tail = tail;\r\n        this.len += len;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @returns {Uint8Array} Finished buffer\r\n */\r\nWriter.prototype.finish = function finish() {\r\n    var head = this.head.next, // skip noop\r\n        buf  = this.constructor.alloc(this.len),\r\n        pos  = 0;\r\n    while (head) {\r\n        head.fn(head.val, buf, pos);\r\n        pos += head.len;\r\n        head = head.next;\r\n    }\r\n    // this.head = this.tail = null;\r\n    return buf;\r\n};\r\n\r\nWriter._configure = function(BufferWriter_) {\r\n    BufferWriter = BufferWriter_;\r\n};\r\n","\"use strict\";\r\nmodule.exports = BufferWriter;\r\n\r\n// extends Writer\r\nvar Writer = require(14);\r\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\r\n\r\nvar util = require(13);\r\n\r\nvar Buffer = util.Buffer;\r\n\r\n/**\r\n * Constructs a new buffer writer instance.\r\n * @classdesc Wire format writer using node buffers.\r\n * @extends Writer\r\n * @constructor\r\n */\r\nfunction BufferWriter() {\r\n    Writer.call(this);\r\n}\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Buffer} Buffer\r\n */\r\nBufferWriter.alloc = function alloc_buffer(size) {\r\n    return (BufferWriter.alloc = util._Buffer_allocUnsafe)(size);\r\n};\r\n\r\nvar writeBytesBuffer = Buffer && Buffer.prototype instanceof Uint8Array && Buffer.prototype.set.name === \"set\"\r\n    ? function writeBytesBuffer_set(val, buf, pos) {\r\n        buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\r\n                           // also works for plain array values\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytesBuffer_copy(val, buf, pos) {\r\n        if (val.copy) // Buffer values\r\n            val.copy(buf, pos, 0, val.length);\r\n        else for (var i = 0; i < val.length;) // plain array values\r\n            buf[pos++] = val[i++];\r\n    };\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\r\n    if (util.isString(value))\r\n        value = util._Buffer_from(value, \"base64\");\r\n    var len = value.length >>> 0;\r\n    this.uint32(len);\r\n    if (len)\r\n        this.push(writeBytesBuffer, len, value);\r\n    return this;\r\n};\r\n\r\nfunction writeStringBuffer(val, buf, pos) {\r\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\r\n        util.utf8.write(val, buf, pos);\r\n    else\r\n        buf.utf8Write(val, pos);\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriter.prototype.string = function write_string_buffer(value) {\r\n    var len = Buffer.byteLength(value);\r\n    this.uint32(len);\r\n    if (len)\r\n        this.push(writeStringBuffer, len, value);\r\n    return this;\r\n};\r\n\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @name BufferWriter#finish\r\n * @function\r\n * @returns {Buffer} Finished buffer\r\n */\r\n"],"sourceRoot":"."}