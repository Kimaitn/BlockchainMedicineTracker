{"version":3,"sources":["lib/prelude.js","node_modules/@protobufjs/aspromise/index.js","node_modules/@protobufjs/base64/index.js","node_modules/@protobufjs/codegen/index.js","node_modules/@protobufjs/eventemitter/index.js","node_modules/@protobufjs/fetch/index.js","node_modules/@protobufjs/inquire/index.js","node_modules/@protobufjs/path/index.js","node_modules/@protobufjs/pool/index.js","node_modules/@protobufjs/utf8/index.js","src/class.js","src/converter.js","src/decoder.js","src/encoder.js","src/enum.js","src/field.js","src/index-light","src/index-minimal.js","src/mapfield.js","src/message.js","src/method.js","src/namespace.js","src/object.js","src/oneof.js","src/reader.js","src/reader_buffer.js","src/root.js","src/rpc.js","src/rpc/service.js","src/service.js","src/type.js","src/types.js","src/util.js","src/util/longbits.js","src/util/minimal.js","src/verifier.js","src/writer.js","src/writer_buffer.js"],"names":["global","undefined","modules","cache","entries","$require","name","$module","call","exports","protobuf","define","amd","Long","util","configure","module","1","require","asPromise","fn","ctx","params","i","arguments","length","push","pending","Promise","resolve","reject","err","args","apply","this","base64","string","p","n","charAt","Math","ceil","b64","Array","s64","encode","buffer","start","end","t","j","b","String","fromCharCode","invalidEncoding","decode","offset","c","charCodeAt","Error","test","codegen","gen","line","sprintf","level","indent","src","prev","blockOpenRe","branchRe","casingRe","inCase","breakRe","blockCloseRe","str","replace","join","eof","scope","source","verbose","console","log","keys","Object","Function","concat","map","key","format","$0","$1","floor","JSON","stringify","supported","e","EventEmitter","_listeners","prototype","on","evt","off","listeners","splice","emit","fetch","filename","options","callback","xhr","fs","readFile","contents","XMLHttpRequest","binary","toString","inquire","onreadystatechange","readyState","status","response","responseText","Uint8Array","overrideMimeType","responseType","open","send","moduleName","mod","eval","path","isAbsolute","normalize","parts","split","absolute","prefix","shift","originPath","includePath","alreadyNormalized","pool","alloc","slice","size","SIZE","MAX","slab","buf","utf8","len","read","chunk","write","c1","c2","Class","type","ctor","Type","TypeError","Message","constructor","merge","$type","fieldsArray","_fieldsArray","isArray","defaultValue","emptyArray","isObject","long","emptyObject","ctorProperties","oneofsArray","_oneofsArray","get","oneOfGetter","oneof","set","oneOfSetter","defineProperties","create","genValuePartial_fromObject","field","fieldIndex","prop","resolvedType","Enum","values","repeated","typeDefault","fullName","isUnsigned","genValuePartial_toObject","converter","fromObject","mtype","fields","safeProp","toObject","repeatedFields","mapFields","otherFields","valuesById","low","high","unsigned","toNumber","bytes","decoder","group","ref","id","keyType","types","basic","compat","packed","genTypePartial","encoder","partOf","wireType","mapKey","required","indexOf","ReflectionObject","comments","className","fromJSON","json","toJSON","add","comment","isString","isInteger","remove","val","Field","rule","extend","toLowerCase","optional","message","extensionField","declaringField","_packed","defineProperty","getOption","setOption","value","ifNotSet","resolved","defaults","parent","lookup","fromNumber","freeze","newBuffer","load","root","Root","loadSync","build","verifier","Namespace","OneOf","MapField","Service","Method","_configure","Reader","BufferReader","roots","Writer","BufferWriter","rpc","resolvedKeyType","properties","writer","encodeDelimited","reader","decodeDelimited","verify","object","from","toJSONOptions","requestType","requestStream","responseStream","resolvedRequestType","resolvedResponseType","lookupType","arrayToJSON","array","obj","nested","_nestedArray","clearCache","namespace","addJSON","toArray","nestedArray","nestedJson","ns","names","methods","getEnum","setOptions","onAdd","onRemove","ptr","part","resolveAll","filterType","parentAlreadyChecked","found","lookupService","lookupEnum","Type_","Service_","unshift","_handleAdd","_handleRemove","Root_","fieldNames","addFieldsToParent","index","self","indexOutOfRange","writeLength","RangeError","pos","readLongVarint","bits","LongBits","lo","hi","read_int64_long","toLong","read_int64_number","read_uint64_long","read_uint64_number","read_sint64_long","zzDecode","read_sint64_number","readFixed32","readFixed64","read_fixed64_long","read_fixed64_number","read_sfixed64_long","read_sfixed64_number","Buffer","isBuffer","_slice","subarray","uint32","int32","sint32","bool","fixed32","sfixed32","readFloat","Float32Array","f32","f8b","uint","sign","exponent","mantissa","NaN","Infinity","pow","float","readDouble","Float64Array","f64","double","skip","skipType","BufferReader_","int64","uint64","sint64","fixed64","sfixed64","utf8Slice","min","deferred","files","SYNC","tryHandleExtension","extendedType","sisterField","parse","common","resolvePath","finish","cb","sync","process","parsed","imports","weakImports","queued","weak","idx","lastIndexOf","altname","substring","setTimeout","readFileSync","isNode","exposeRe","parse_","common_","rpcImpl","requestDelimited","responseDelimited","rpcCall","method","requestCtor","responseCtor","request","endedByRPC","_methodsArray","service","inherited","methodsArray","rpcService","lcFirst","m","q","s","oneofs","extensions","reserved","_fieldsById","_ctor","fieldsById","filter","setup","fork","ldelim","bake","o","ucFirst","toUpperCase","zero","zzEncode","zeroHash","parseInt","fromString","fromHash","hash","toHash","mask","part0","part1","part2","versions","node","Number","isFinite","utf8Write","_Buffer_from","_Buffer_allocUnsafe","sizeOrArray","dcodeIO","longToHash","longFromHash","fromBits","dst","fieldMap","lazyResolve","lazyTypes","longs","enums","encoding","allocUnsafe","invalid","expected","genVerifyValue","genVerifyKey","Op","next","noop","State","head","tail","states","writeByte","writeVarint32","VarintOp","writeVarint64","writeFixed32","writeFloat","isNaN","round","LN2","writeDouble","writeBytes","reset","BufferWriter_","writeStringBuffer","writeBytesBuffer","copy","byteLength"],"mappings":"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","file":"protobuf.min.js","sourcesContent":["(function prelude(modules, cache, entries) {\r\n\r\n    // This is the prelude used to bundle protobuf.js for the browser. Wraps up the CommonJS\r\n    // sources through a conflict-free require shim and is again wrapped within an iife that\r\n    // provides a unified `global` and a minification-friendly `undefined` var plus a global\r\n    // \"use strict\" directive so that minification can remove the directives of each module.\r\n\r\n    function $require(name) {\r\n        var $module = cache[name];\r\n        if (!$module)\r\n            modules[name][0].call($module = cache[name] = { exports: {} }, $require, $module, $module.exports);\r\n        return $module.exports;\r\n    }\r\n\r\n    // Expose globally\r\n    var protobuf = global.protobuf = $require(entries[0]);\r\n\r\n    // Be nice to AMD\r\n    if (typeof define === \"function\" && define.amd)\r\n        define([\"long\"], function(Long) {\r\n            protobuf.util.Long = Long;\r\n            protobuf.configure();\r\n            return protobuf;\r\n        });\r\n\r\n    // Be nice to CommonJS\r\n    if (typeof module === \"object\" && module && module.exports)\r\n        module.exports = protobuf;\r\n\r\n})/* end of prelude */","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {function(?Error, ...*)} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params = [];\r\n    for (var i = 2; i < arguments.length;)\r\n        params.push(arguments[i++]);\r\n    var pending = true;\r\n    return new Promise(function asPromiseExecutor(resolve, reject) {\r\n        params.push(function asPromiseCallback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var args = [];\r\n                    for (var i = 1; i < arguments.length;)\r\n                        args.push(arguments[i++]);\r\n                    resolve.apply(null, args);\r\n                }\r\n            }\r\n        });\r\n        try {\r\n            fn.apply(ctx || this, params); // eslint-disable-line no-invalid-this\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var string = []; // alt: new Array(Math.ceil((end - start) / 3) * 4);\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                string[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                string[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                string[i++] = b64[t | b >> 6];\r\n                string[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j) {\r\n        string[i++] = b64[t];\r\n        string[i  ] = 61;\r\n        if (j === 1)\r\n            string[i + 1] = 61;\r\n    }\r\n    return String.fromCharCode.apply(String, string);\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = codegen;\r\n\r\nvar blockOpenRe  = /[{[]$/,\r\n    blockCloseRe = /^[}\\]]/,\r\n    casingRe     = /:$/,\r\n    branchRe     = /^\\s*(?:if|}?else if|while|for)\\b|\\b(?:else)\\s*$/,\r\n    breakRe      = /\\b(?:break|continue)(?: \\w+)?;?$|^\\s*return\\b/;\r\n\r\n/**\r\n * A closure for generating functions programmatically.\r\n * @memberof util\r\n * @namespace\r\n * @function\r\n * @param {...string} params Function parameter names\r\n * @returns {Codegen} Codegen instance\r\n * @property {boolean} supported Whether code generation is supported by the environment.\r\n * @property {boolean} verbose=false When set to true, codegen will log generated code to console. Useful for debugging.\r\n * @property {function(string, ...*):string} sprintf Underlying sprintf implementation\r\n */\r\nfunction codegen() {\r\n    var params = [],\r\n        src    = [],\r\n        indent = 1,\r\n        inCase = false;\r\n    for (var i = 0; i < arguments.length;)\r\n        params.push(arguments[i++]);\r\n\r\n    /**\r\n     * A codegen instance as returned by {@link codegen}, that also is a sprintf-like appender function.\r\n     * @typedef Codegen\r\n     * @type {function}\r\n     * @param {string} format Format string\r\n     * @param {...*} args Replacements\r\n     * @returns {Codegen} Itself\r\n     * @property {function(string=):string} str Stringifies the so far generated function source.\r\n     * @property {function(string=, Object=):function} eof Ends generation and builds the function whilst applying a scope.\r\n     */\r\n    /**/\r\n    function gen() {\r\n        var args = [],\r\n            i = 0;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        var line = sprintf.apply(null, args);\r\n        var level = indent;\r\n        if (src.length) {\r\n            var prev = src[src.length - 1];\r\n\r\n            // block open or one time branch\r\n            if (blockOpenRe.test(prev))\r\n                level = ++indent; // keep\r\n            else if (branchRe.test(prev))\r\n                ++level; // once\r\n\r\n            // casing\r\n            if (casingRe.test(prev) && !casingRe.test(line)) {\r\n                level = ++indent;\r\n                inCase = true;\r\n            } else if (inCase && breakRe.test(prev)) {\r\n                level = --indent;\r\n                inCase = false;\r\n            }\r\n\r\n            // block close\r\n            if (blockCloseRe.test(line))\r\n                level = --indent;\r\n        }\r\n        for (i = 0; i < level; ++i)\r\n            line = \"\\t\" + line;\r\n        src.push(line);\r\n        return gen;\r\n    }\r\n\r\n    /**\r\n     * Stringifies the so far generated function source.\r\n     * @param {string} [name] Function name, defaults to generate an anonymous function\r\n     * @returns {string} Function source using tabs for indentation\r\n     * @inner\r\n     */\r\n    function str(name) {\r\n        return \"function\" + (name ? \" \" + name.replace(/[^\\w_$]/g, \"_\") : \"\") + \"(\" + params.join(\",\") + \") {\\n\" + src.join(\"\\n\") + \"\\n}\";\r\n    }\r\n\r\n    gen.str = str;\r\n\r\n    /**\r\n     * Ends generation and builds the function whilst applying a scope.\r\n     * @param {string} [name] Function name, defaults to generate an anonymous function\r\n     * @param {Object.<string,*>} [scope] Function scope\r\n     * @returns {function} The generated function, with scope applied if specified\r\n     * @inner\r\n     */\r\n    function eof(name, scope) {\r\n        if (typeof name === \"object\") {\r\n            scope = name;\r\n            name = undefined;\r\n        }\r\n        var source = gen.str(name);\r\n        if (codegen.verbose)\r\n            console.log(\"--- codegen ---\\n\" + source.replace(/^/mg, \"> \").replace(/\\t/g, \"  \")); // eslint-disable-line no-console\r\n        var keys = Object.keys(scope || (scope = {}));\r\n        return Function.apply(null, keys.concat(\"return \" + source)).apply(null, keys.map(function(key) { return scope[key]; })); // eslint-disable-line no-new-func\r\n        //     ^ Creates a wrapper function with the scoped variable names as its parameters,\r\n        //       calls it with the respective scoped variable values ^\r\n        //       and returns our brand-new properly scoped function.\r\n        //\r\n        // This works because \"Invoking the Function constructor as a function (without using the\r\n        // new operator) has the same effect as invoking it as a constructor.\"\r\n        // https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Function\r\n    }\r\n\r\n    gen.eof = eof;\r\n\r\n    return gen;\r\n}\r\n\r\nfunction sprintf(format) {\r\n    var args = [],\r\n        i = 1;\r\n    for (; i < arguments.length;)\r\n        args.push(arguments[i++]);\r\n    i = 0;\r\n    format = format.replace(/%([dfjs])/g, function($0, $1) {\r\n        switch ($1) {\r\n            case \"d\":\r\n                return Math.floor(args[i++]);\r\n            case \"f\":\r\n                return Number(args[i++]);\r\n            case \"j\":\r\n                return JSON.stringify(args[i++]);\r\n            default:\r\n                return args[i++];\r\n        }\r\n    });\r\n    if (i !== args.length)\r\n        throw Error(\"argument count mismatch\");\r\n    return format;\r\n}\r\n\r\ncodegen.sprintf   = sprintf;\r\ncodegen.supported = false; try { codegen.supported = codegen(\"a\",\"b\")(\"return a-b\").eof()(2,1) === 1; } catch (e) {} // eslint-disable-line no-empty\r\ncodegen.verbose   = false;\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = fetch;\r\n\r\nvar asPromise = require(1),\r\n    inquire   = require(6);\r\n\r\nvar fs = inquire(\"fs\");\r\n\r\n/**\r\n * Node-style callback as used by {@link util.fetch}.\r\n * @typedef FetchCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {string} [contents] File contents, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Options as used by {@link util.fetch}.\r\n * @typedef FetchOptions\r\n * @type {Object}\r\n * @property {boolean} [binary=false] Whether expecting a binary response\r\n * @property {boolean} [xhr=false] If `true`, forces the use of XMLHttpRequest\r\n */\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @memberof util\r\n * @param {string} filename File path or url\r\n * @param {FetchOptions} options Fetch options\r\n * @param {FetchCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nfunction fetch(filename, options, callback) {\r\n    if (typeof options === \"function\") {\r\n        callback = options;\r\n        options = {};\r\n    } else if (!options)\r\n        options = {};\r\n\r\n    if (!callback)\r\n        return asPromise(fetch, this, filename, options); // eslint-disable-line no-invalid-this\r\n\r\n    // if a node-like filesystem is present, try it first but fall back to XHR if nothing is found.\r\n    if (!options.xhr && fs && fs.readFile)\r\n        return fs.readFile(filename, function fetchReadFileCallback(err, contents) {\r\n            return err && typeof XMLHttpRequest !== \"undefined\"\r\n                ? fetch.xhr(filename, options, callback)\r\n                : err\r\n                ? callback(err)\r\n                : callback(null, options.binary ? contents : contents.toString(\"utf8\"));\r\n        });\r\n\r\n    // use the XHR version otherwise.\r\n    return fetch.xhr(filename, options, callback);\r\n}\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @name util.fetch\r\n * @function\r\n * @param {string} path File path or url\r\n * @param {FetchCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @name util.fetch\r\n * @function\r\n * @param {string} path File path or url\r\n * @param {FetchOptions} [options] Fetch options\r\n * @returns {Promise<string|Uint8Array>} Promise\r\n * @variation 3\r\n */\r\n\r\n/**/\r\nfetch.xhr = function fetch_xhr(filename, options, callback) {\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.onreadystatechange /* works everywhere */ = function fetchOnReadyStateChange() {\r\n\r\n        if (xhr.readyState !== 4)\r\n            return undefined;\r\n\r\n        // local cors security errors return status 0 / empty string, too. afaik this cannot be\r\n        // reliably distinguished from an actually empty file for security reasons. feel free\r\n        // to send a pull request if you are aware of a solution.\r\n        if (xhr.status !== 0 && xhr.status !== 200)\r\n            return callback(Error(\"status \" + xhr.status));\r\n\r\n        // if binary data is expected, make sure that some sort of array is returned, even if\r\n        // ArrayBuffers are not supported. the binary string fallback, however, is unsafe.\r\n        if (options.binary) {\r\n            var buffer = xhr.response;\r\n            if (!buffer) {\r\n                buffer = [];\r\n                for (var i = 0; i < xhr.responseText.length; ++i)\r\n                    buffer.push(xhr.responseText.charCodeAt(i) & 255);\r\n            }\r\n            return callback(null, typeof Uint8Array !== \"undefined\" ? new Uint8Array(buffer) : buffer);\r\n        }\r\n        return callback(null, xhr.responseText);\r\n    };\r\n\r\n    if (options.binary) {\r\n        // ref: https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Sending_and_Receiving_Binary_Data#Receiving_binary_data_in_older_browsers\r\n        if (\"overrideMimeType\" in xhr)\r\n            xhr.overrideMimeType(\"text/plain; charset=x-user-defined\");\r\n        xhr.responseType = \"arraybuffer\";\r\n    }\r\n\r\n    xhr.open(\"GET\", filename);\r\n    xhr.send();\r\n};\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal path module to resolve Unix, Windows and URL paths alike.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar path = exports;\r\n\r\nvar isAbsolute =\r\n/**\r\n * Tests if the specified path is absolute.\r\n * @param {string} path Path to test\r\n * @returns {boolean} `true` if path is absolute\r\n */\r\npath.isAbsolute = function isAbsolute(path) {\r\n    return /^(?:\\/|\\w+:)/.test(path);\r\n};\r\n\r\nvar normalize =\r\n/**\r\n * Normalizes the specified path.\r\n * @param {string} path Path to normalize\r\n * @returns {string} Normalized path\r\n */\r\npath.normalize = function normalize(path) {\r\n    path = path.replace(/\\\\/g, \"/\")\r\n               .replace(/\\/{2,}/g, \"/\");\r\n    var parts    = path.split(\"/\"),\r\n        absolute = isAbsolute(path),\r\n        prefix   = \"\";\r\n    if (absolute)\r\n        prefix = parts.shift() + \"/\";\r\n    for (var i = 0; i < parts.length;) {\r\n        if (parts[i] === \"..\") {\r\n            if (i > 0)\r\n                parts.splice(--i, 2);\r\n            else if (absolute)\r\n                parts.splice(i, 1);\r\n            else\r\n                ++i;\r\n        } else if (parts[i] === \".\")\r\n            parts.splice(i, 1);\r\n        else\r\n            ++i;\r\n    }\r\n    return prefix + parts.join(\"/\");\r\n};\r\n\r\n/**\r\n * Resolves the specified include path against the specified origin path.\r\n * @param {string} originPath Path to the origin file\r\n * @param {string} includePath Include path relative to origin path\r\n * @param {boolean} [alreadyNormalized=false] `true` if both paths are already known to be normalized\r\n * @returns {string} Path to the include file\r\n */\r\npath.resolve = function resolve(originPath, includePath, alreadyNormalized) {\r\n    if (!alreadyNormalized)\r\n        includePath = normalize(includePath);\r\n    if (isAbsolute(includePath))\r\n        return includePath;\r\n    if (!alreadyNormalized)\r\n        originPath = normalize(originPath);\r\n    return (originPath = originPath.replace(/(?:\\/|^)[^/]+$/, \"\")).length ? normalize(originPath + \"/\" + includePath) : includePath;\r\n};\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Class;\r\n\r\nvar Message = require(19),\r\n    util    = require(32);\r\n\r\nvar Type; // cyclic\r\n\r\n/**\r\n * Constructs a new message prototype for the specified reflected type and sets up its constructor.\r\n * @classdesc Runtime class providing the tools to create your own custom classes.\r\n * @constructor\r\n * @param {Type} type Reflected message type\r\n * @param {*} [ctor] Custom constructor to set up, defaults to create a generic one if omitted\r\n * @returns {Message} Message prototype\r\n */\r\nfunction Class(type, ctor) {\r\n    if (!Type)\r\n        Type = require(30);\r\n\r\n    if (!(type instanceof Type))\r\n        throw TypeError(\"type must be a Type\");\r\n\r\n    if (ctor) {\r\n        if (typeof ctor !== \"function\")\r\n            throw TypeError(\"ctor must be a function\");\r\n    } else\r\n        // create named constructor functions (codegen is required anyway)\r\n        ctor = util.codegen(\"p\")(\"return c.call(this,p)\").eof(type.name, {\r\n            c: Message\r\n        });\r\n\r\n    // Let's pretend...\r\n    ctor.constructor = Class;\r\n\r\n    // new Class() -> Message.prototype\r\n    (ctor.prototype = new Message()).constructor = ctor;\r\n\r\n    // Static methods on Message are instance methods on Class and vice versa\r\n    util.merge(ctor, Message, true);\r\n\r\n    // Classes and messages reference their reflected type\r\n    ctor.$type = type;\r\n    ctor.prototype.$type = type;\r\n\r\n    // Messages have non-enumerable default values on their prototype\r\n    var i = 0;\r\n    for (; i < /* initializes */ type.fieldsArray.length; ++i) {\r\n        // objects on the prototype must be immmutable. users must assign a new object instance and\r\n        // cannot use Array#push on empty arrays on the prototype for example, as this would modify\r\n        // the value on the prototype for ALL messages of this type. Hence, these objects are frozen.\r\n        ctor.prototype[type._fieldsArray[i].name] = Array.isArray(type._fieldsArray[i].resolve().defaultValue)\r\n            ? util.emptyArray\r\n            : util.isObject(type._fieldsArray[i].defaultValue) && !type._fieldsArray[i].long\r\n              ? util.emptyObject\r\n              : type._fieldsArray[i].defaultValue; // if a long, it is frozen when initialized\r\n    }\r\n\r\n    // Messages have non-enumerable getters and setters for each virtual oneof field\r\n    var ctorProperties = {};\r\n    for (i = 0; i < /* initializes */ type.oneofsArray.length; ++i)\r\n        ctorProperties[type._oneofsArray[i].resolve().name] = {\r\n            get: util.oneOfGetter(type._oneofsArray[i].oneof),\r\n            set: util.oneOfSetter(type._oneofsArray[i].oneof)\r\n        };\r\n    if (i)\r\n        Object.defineProperties(ctor.prototype, ctorProperties);\r\n\r\n    // Register\r\n    type.ctor = ctor;\r\n\r\n    return ctor.prototype;\r\n}\r\n\r\n/**\r\n * Constructs a new message prototype for the specified reflected type and sets up its constructor.\r\n * @function\r\n * @param {Type} type Reflected message type\r\n * @param {*} [ctor] Custom constructor to set up, defaults to create a generic one if omitted\r\n * @returns {Message} Message prototype\r\n */\r\nClass.create = Class;\r\n\r\n// Static methods on Message are instance methods on Class and vice versa\r\nClass.prototype = Message;\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * @name Class#fromObject\r\n * @function\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * This is an alias of {@link Class#fromObject}.\r\n * @name Class#from\r\n * @function\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\n\r\n/**\r\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\r\n * @name Class#toObject\r\n * @function\r\n * @param {Message} message Message instance\r\n * @param {ConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n */\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @name Class#encode\r\n * @function\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its length as a varint.\r\n * @name Class#encodeDelimited\r\n * @function\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @name Class#decode\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its length as a varint.\r\n * @name Class#decodeDelimited\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\n\r\n/**\r\n * Verifies a message of this type.\r\n * @name Class#verify\r\n * @function\r\n * @param {Message|Object} message Message or plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\n","\"use strict\";\r\n/**\r\n * Runtime message from/to plain object converters.\r\n * @namespace\r\n */\r\nvar converter = exports;\r\n\r\nvar Enum = require(14),\r\n    util = require(32);\r\n\r\n/**\r\n * Generates a partial value fromObject conveter.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} prop Property reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genValuePartial_fromObject(gen, field, fieldIndex, prop) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) { gen\r\n            (\"switch(d%s){\", prop);\r\n            for (var values = field.resolvedType.values, keys = Object.keys(values), i = 0; i < keys.length; ++i) {\r\n                if (field.repeated && values[keys[i]] === field.typeDefault) gen\r\n                (\"default:\");\r\n                gen\r\n                (\"case%j:\", keys[i])\r\n                (\"case %j:\", values[keys[i]])\r\n                    (\"m%s=%j\", prop, values[keys[i]])\r\n                    (\"break\");\r\n            } gen\r\n            (\"}\");\r\n        } else gen\r\n            (\"if(typeof d%s!==\\\"object\\\")\", prop)\r\n                (\"throw TypeError(%j)\", field.fullName + \": object expected\")\r\n            (\"m%s=types[%d].fromObject(d%s)\", prop, fieldIndex, prop);\r\n    } else {\r\n        var isUnsigned = false;\r\n        switch (field.type) {\r\n            case \"double\":\r\n            case \"float\":gen\r\n                (\"m%s=Number(d%s)\", prop, prop);\r\n                break;\r\n            case \"uint32\":\r\n            case \"fixed32\": gen\r\n                (\"m%s=d%s>>>0\", prop, prop);\r\n                break;\r\n            case \"int32\":\r\n            case \"sint32\":\r\n            case \"sfixed32\": gen\r\n                (\"m%s=d%s|0\", prop, prop);\r\n                break;\r\n            case \"uint64\":\r\n                isUnsigned = true;\r\n                // eslint-disable-line no-fallthrough\r\n            case \"int64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n                (\"if(util.Long)\")\r\n                    (\"(m%s=util.Long.fromValue(d%s)).unsigned=%j\", prop, prop, isUnsigned)\r\n                (\"else if(typeof d%s===\\\"string\\\")\", prop)\r\n                    (\"m%s=parseInt(d%s,10)\", prop, prop)\r\n                (\"else if(typeof d%s===\\\"number\\\")\", prop)\r\n                    (\"m%s=d%s\", prop, prop)\r\n                (\"else if(typeof d%s===\\\"object\\\")\", prop)\r\n                    (\"m%s=new util.LongBits(d%s.low,d%s.high).toNumber(%s)\", prop, prop, prop, isUnsigned ? \"true\" : \"\");\r\n                break;\r\n            case \"bytes\": gen\r\n                (\"if(typeof d%s===\\\"string\\\")\", prop)\r\n                    (\"util.base64.decode(d%s,m%s=util.newBuffer(util.base64.length(d%s)),0)\", prop, prop, prop)\r\n                (\"else if(d%s.length)\", prop)\r\n                    (\"m%s=d%s\", prop, prop);\r\n                break;\r\n            case \"string\": gen\r\n                (\"m%s=String(d%s)\", prop, prop);\r\n                break;\r\n            case \"bool\": gen\r\n                (\"m%s=Boolean(d%s)\", prop, prop);\r\n                break;\r\n            /* default: gen\r\n                (\"m%s=d%s\", prop, prop);\r\n                break; */\r\n        }\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}\r\n\r\n/**\r\n * Generates a plain object to runtime message converter specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nconverter.fromObject = function fromObject(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var fields = mtype.fieldsArray;\r\n    var gen = util.codegen(\"d\")\r\n    (\"if(d instanceof this.ctor)\")\r\n        (\"return d\");\r\n    if (!fields.length) return gen\r\n    (\"return new this.ctor\");\r\n    gen\r\n    (\"var m=new this.ctor\");\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field  = fields[i].resolve(),\r\n            prop   = util.safeProp(field.name);\r\n\r\n        // Map fields\r\n        if (field.map) { gen\r\n    (\"if(d%s){\", prop)\r\n        (\"if(typeof d%s!==\\\"object\\\")\", prop)\r\n            (\"throw TypeError(%j)\", field.fullName + \": object expected\")\r\n        (\"m%s={}\", prop)\r\n        (\"for(var ks=Object.keys(d%s),i=0;i<ks.length;++i){\", prop);\r\n            genValuePartial_fromObject(gen, field, i, prop + \"[ks[i]]\")\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) { gen\r\n    (\"if(d%s){\", prop)\r\n        (\"if(!Array.isArray(d%s))\", prop)\r\n            (\"throw TypeError(%j)\", field.fullName + \": array expected\")\r\n        (\"m%s=[]\", prop)\r\n        (\"for(var i=0;i<d%s.length;++i){\", prop);\r\n            genValuePartial_fromObject(gen, field, i, prop + \"[i]\")\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n        // Non-repeated fields\r\n        } else {\r\n            if (!(field.resolvedType instanceof Enum)) gen // no need to test for null/undefined if an enum (uses switch)\r\n    (\"if(d%s!==undefined&&d%s!==null){\", prop, prop);\r\n        genValuePartial_fromObject(gen, field, i, prop);\r\n            if (!(field.resolvedType instanceof Enum)) gen\r\n    (\"}\");\r\n        }\r\n    } return gen\r\n    (\"return m\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n};\r\n\r\n/**\r\n * Generates a partial value toObject converter.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} prop Property reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genValuePartial_toObject(gen, field, fieldIndex, prop) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) gen\r\n            (\"d%s=o.enums===String?types[%d].values[m%s]:m%s\", prop, fieldIndex, prop, prop);\r\n        else gen\r\n            (\"d%s=types[%d].toObject(m%s,o)\", prop, fieldIndex, prop);\r\n    } else {\r\n        var isUnsigned = false;\r\n        switch (field.type) {\r\n            case \"uint64\":\r\n                isUnsigned = true;\r\n                // eslint-disable-line no-fallthrough\r\n            case \"int64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n            (\"if(typeof m%s===\\\"number\\\")\", prop)\r\n                (\"d%s=o.longs===String?String(m%s):m%s\", prop, prop, prop)\r\n            (\"else\") // Long-like\r\n                (\"d%s=o.longs===String?util.Long.prototype.toString.call(m%s):o.longs===Number?new util.LongBits(m%s.low,m%s.high).toNumber(%s):m%s\", prop, prop, prop, prop, isUnsigned ? \"true\": \"\", prop);\r\n                break;\r\n            case \"bytes\": gen\r\n            (\"d%s=o.bytes===String?util.base64.encode(m%s,0,m%s.length):o.bytes===Array?Array.prototype.slice.call(m%s):m%s\", prop, prop, prop, prop, prop);\r\n                break;\r\n            default: gen\r\n            (\"d%s=m%s\", prop, prop);\r\n                break;\r\n        }\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}\r\n\r\n/**\r\n * Generates a runtime message to plain object converter specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nconverter.toObject = function toObject(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var fields = mtype.fieldsArray;\r\n    if (!fields.length)\r\n        return util.codegen()(\"return {}\");\r\n    var gen = util.codegen(\"m\", \"o\")\r\n    (\"if(!o)\")\r\n        (\"o={}\")\r\n    (\"var d={}\");\r\n\r\n    var repeatedFields = [],\r\n        mapFields = [],\r\n        otherFields = [],\r\n        i = 0;\r\n    for (; i < fields.length; ++i)\r\n        if (fields[i].resolve().repeated)\r\n            repeatedFields.push(fields[i]);\r\n        else if (fields[i].map)\r\n            mapFields.push(fields[i]);\r\n        else\r\n            otherFields.push(fields[i]);\r\n\r\n    if (repeatedFields.length) { gen\r\n    (\"if(o.arrays||o.defaults){\");\r\n        for (i = 0; i < repeatedFields.length; ++i) gen\r\n        (\"d%s=[]\", util.safeProp(repeatedFields[i].name));\r\n        gen\r\n    (\"}\");\r\n    }\r\n\r\n    if (mapFields.length) { gen\r\n    (\"if(o.objects||o.defaults){\");\r\n        for (i = 0; i < mapFields.length; ++i) gen\r\n        (\"d%s={}\", util.safeProp(mapFields[i].name));\r\n        gen\r\n    (\"}\");\r\n    }\r\n\r\n    if (otherFields.length) { gen\r\n    (\"if(o.defaults){\");\r\n        for (i = 0, field; i < otherFields.length; ++i) {\r\n            var field = otherFields[i],\r\n                prop  = util.safeProp(field.name);\r\n            if (field.resolvedType instanceof Enum) gen\r\n        (\"d%s=o.enums===String?%j:%j\", prop, field.resolvedType.valuesById[field.typeDefault], field.typeDefault);\r\n            else if (field.long) gen\r\n        (\"if(util.Long){\")\r\n            (\"var n=new util.Long(%d,%d,%j)\", field.typeDefault.low, field.typeDefault.high, field.typeDefault.unsigned)\r\n            (\"d%s=o.longs===String?n.toString():o.longs===Number?n.toNumber():n\", prop)\r\n        (\"}else\")\r\n            (\"d%s=o.longs===String?%j:%d\", prop, field.typeDefault.toString(), field.typeDefault.toNumber());\r\n            else if (field.bytes) gen\r\n        (\"d%s=o.bytes===String?%j:%s\", prop, String.fromCharCode.apply(String, field.typeDefault), \"[\" + Array.prototype.slice.call(field.typeDefault).join(\",\") + \"]\");\r\n            else gen\r\n        (\"d%s=%j\", prop, field.typeDefault); // also messages (=null)\r\n        } gen\r\n    (\"}\");\r\n    }\r\n    for (i = 0, field; i < fields.length; ++i) {\r\n        var field = fields[i],\r\n            prop  = util.safeProp(field.name); gen\r\n    (\"if(m%s!==undefined&&m%s!==null&&m.hasOwnProperty(%j)){\", prop, prop, field.name);\r\n        if (field.map) { gen\r\n        (\"d%s={}\", prop)\r\n        (\"for(var ks2=Object.keys(m%s),j=0;j<ks2.length;++j){\", prop);\r\n            genValuePartial_toObject(gen, field, i, prop + \"[ks2[j]]\")\r\n        (\"}\");\r\n        } else if (field.repeated) { gen\r\n        (\"d%s=[]\", prop)\r\n        (\"for(var j=0;j<m%s.length;++j){\", prop);\r\n            genValuePartial_toObject(gen, field, i, prop + \"[j]\")\r\n        (\"}\");\r\n        } else\r\n        genValuePartial_toObject(gen, field, i, prop);\r\n        gen\r\n    (\"}\");\r\n    }\r\n    return gen\r\n    (\"return d\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n};\r\n","\"use strict\";\r\nmodule.exports = decoder;\r\n\r\ndecoder.compat = true;\r\n\r\nvar Enum    = require(14),\r\n    types   = require(31),\r\n    util    = require(32);\r\n\r\n/**\r\n * Generates a decoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n * @property {boolean} compat=true Generates backward/forward compatible decoders (packed fields)\r\n */\r\nfunction decoder(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var gen = util.codegen(\"r\", \"l\")\r\n    (\"if(!(r instanceof Reader))\")\r\n        (\"r=Reader.create(r)\")\r\n    (\"var c=l===undefined?r.len:r.pos+l,m=new this.ctor\")\r\n    (\"while(r.pos<c){\")\r\n        (\"var t=r.uint32()\");\r\n    if (mtype.group) gen\r\n        (\"if((t&7)===4)\")\r\n            (\"break\");\r\n    gen\r\n        (\"switch(t>>>3){\");\r\n\r\n    for (var i = 0; i < /* initializes */ mtype.fieldsArray.length; ++i) {\r\n        var field = mtype._fieldsArray[i].resolve(),\r\n            type  = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            ref   = \"m\" + util.safeProp(field.name); gen\r\n            (\"case %d:\", field.id);\r\n\r\n        // Map fields\r\n        if (field.map) { gen\r\n\r\n                (\"r.skip().pos++\") // assumes id 1 + key wireType\r\n                (\"if(%s===util.emptyObject)\", ref)\r\n                    (\"%s={}\", ref)\r\n                (\"var k=r.%s()\", field.keyType)\r\n                (\"r.pos++\"); // assumes id 2 + value wireType\r\n            if (types.basic[type] === undefined) gen\r\n                (\"%s[typeof k===\\\"object\\\"?util.longToHash(k):k]=types[%d].decode(r,r.uint32())\", ref, i); // can't be groups\r\n            else gen\r\n                (\"%s[typeof k===\\\"object\\\"?util.longToHash(k):k]=r.%s()\", ref, type);\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) { gen\r\n\r\n                (\"if(!(%s&&%s.length))\", ref, ref)\r\n                    (\"%s=[]\", ref);\r\n\r\n            // Packable (always check for forward and backward compatiblity)\r\n            if ((decoder.compat || field.packed) && types.packed[type] !== undefined) gen\r\n                (\"if((t&7)===2){\")\r\n                    (\"var c2=r.uint32()+r.pos\")\r\n                    (\"while(r.pos<c2)\")\r\n                        (\"%s.push(r.%s())\", ref, type)\r\n                (\"}else\");\r\n\r\n            // Non-packed\r\n            if (types.basic[type] === undefined) gen(field.resolvedType.group\r\n                    ? \"%s.push(types[%d].decode(r))\"\r\n                    : \"%s.push(types[%d].decode(r,r.uint32()))\", ref, i);\r\n            else gen\r\n                    (\"%s.push(r.%s())\", ref, type);\r\n\r\n        // Non-repeated\r\n        } else if (types.basic[type] === undefined) gen(field.resolvedType.group\r\n                ? \"%s=types[%d].decode(r)\"\r\n                : \"%s=types[%d].decode(r,r.uint32())\", ref, i);\r\n        else gen\r\n                (\"%s=r.%s()\", ref, type);\r\n        gen\r\n                (\"break\");\r\n\r\n    // Unknown fields\r\n    } return gen\r\n            (\"default:\")\r\n                (\"r.skipType(t&7)\")\r\n                (\"break\")\r\n\r\n        (\"}\")\r\n    (\"}\")\r\n    (\"return m\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n","\"use strict\";\r\nmodule.exports = encoder;\r\n\r\nvar Enum     = require(14),\r\n    types    = require(31),\r\n    util     = require(32);\r\n\r\n/**\r\n * Generates a partial message type encoder.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genTypePartial(gen, field, fieldIndex, ref) {\r\n    return field.resolvedType.group\r\n        ? gen(\"types[%d].encode(%s,w.uint32(%d)).uint32(%d)\", fieldIndex, ref, (field.id << 3 | 3) >>> 0, (field.id << 3 | 4) >>> 0)\r\n        : gen(\"types[%d].encode(%s,w.uint32(%d).fork()).ldelim()\", fieldIndex, ref, (field.id << 3 | 2) >>> 0);\r\n}\r\n\r\n/**\r\n * Generates an encoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction encoder(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var gen = util.codegen(\"m\", \"w\")\r\n    (\"if(!w)\")\r\n        (\"w=Writer.create()\");\r\n\r\n    var i, ref;\r\n    for (var i = 0; i < /* initializes */ mtype.fieldsArray.length; ++i) {\r\n        var field    = mtype._fieldsArray[i].resolve();\r\n        if (field.partOf) // see below for oneofs\r\n            continue;\r\n        var type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n            wireType = types.basic[type];\r\n            ref      = \"m\" + util.safeProp(field.name);\r\n\r\n        // Map fields\r\n        if (field.map) {\r\n            gen\r\n    (\"if(%s&&m.hasOwnProperty(%j)){\", ref, field.name)\r\n        (\"for(var ks=Object.keys(%s),i=0;i<ks.length;++i){\", ref)\r\n            (\"w.uint32(%d).fork().uint32(%d).%s(ks[i])\", (field.id << 3 | 2) >>> 0, 8 | types.mapKey[field.keyType], field.keyType);\r\n            if (wireType === undefined) gen\r\n            (\"types[%d].encode(%s[ks[i]],w.uint32(18).fork()).ldelim().ldelim()\", i, ref); // can't be groups\r\n            else gen\r\n            (\".uint32(%d).%s(%s[ks[i]]).ldelim()\", 16 | wireType, type, ref);\r\n            gen\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) {\r\n\r\n            // Packed repeated\r\n            if (field.packed && types.packed[type] !== undefined) { gen\r\n\r\n    (\"if(%s&&%s.length&&m.hasOwnProperty(%j)){\", ref, ref, field.name)\r\n        (\"w.uint32(%d).fork()\", (field.id << 3 | 2) >>> 0)\r\n        (\"for(var i=0;i<%s.length;++i)\", ref)\r\n            (\"w.%s(%s[i])\", type, ref)\r\n        (\"w.ldelim()\")\r\n    (\"}\");\r\n\r\n            // Non-packed\r\n            } else { gen\r\n\r\n    (\"if(%s!==undefined&&m.hasOwnProperty(%j)){\", ref, field.name)\r\n        (\"for(var i=0;i<%s.length;++i)\", ref);\r\n                if (wireType === undefined)\r\n            genTypePartial(gen, field, i, ref + \"[i]\");\r\n                else gen\r\n            (\"w.uint32(%d).%s(%s[i])\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n                gen\r\n    (\"}\");\r\n\r\n            }\r\n\r\n        // Non-repeated\r\n        } else {\r\n            if (!field.required) {\r\n\r\n                if (field.long) gen\r\n    (\"if(%s!==undefined&&%s!==null&&m.hasOwnProperty(%j))\", ref, ref, field.name);\r\n                else if (field.bytes || field.resolvedType && !(field.resolvedType instanceof Enum)) gen\r\n    (\"if(%s&&m.hasOwnProperty(%j))\", ref, field.name);\r\n                else gen\r\n    (\"if(%s!==undefined&&m.hasOwnProperty(%j))\", ref, field.name);\r\n\r\n            }\r\n\r\n            if (wireType === undefined)\r\n        genTypePartial(gen, field, i, ref);\r\n            else gen\r\n        (\"w.uint32(%d).%s(%s)\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n\r\n        }\r\n    }\r\n\r\n    // oneofs\r\n    for (var i = 0; i < /* initializes */ mtype.oneofsArray.length; ++i) {\r\n        var oneof = mtype._oneofsArray[i]; gen\r\n        (\"switch(%s){\", \"m\" + util.safeProp(oneof.name));\r\n        for (var j = 0; j < /* direct */ oneof.fieldsArray.length; ++j) {\r\n            var field    = oneof.fieldsArray[j],\r\n                type     = field.resolvedType instanceof Enum ? \"uint32\" : field.type,\r\n                wireType = types.basic[type];\r\n                ref      = \"m\" + util.safeProp(field.name); gen\r\n            (\"case%j:\", field.name);\r\n            if (wireType === undefined)\r\n                genTypePartial(gen, field, mtype._fieldsArray.indexOf(field), ref);\r\n            else gen\r\n                (\"w.uint32(%d).%s(%s)\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n            gen\r\n                (\"break\");\r\n        } gen\r\n        (\"}\");\r\n    }\r\n    \r\n    return gen\r\n    (\"return w\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}","\"use strict\";\r\nmodule.exports = Enum;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(22);\r\n((Enum.prototype = Object.create(ReflectionObject.prototype)).constructor = Enum).className = \"Enum\";\r\n\r\nvar util = require(32);\r\n\r\n/**\r\n * Constructs a new enum instance.\r\n * @classdesc Reflected enum.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {Object.<string,number>} [values] Enum values as an object, by name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Enum(name, values, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    if (values && typeof values !== \"object\")\r\n        throw TypeError(\"values must be an object\");\r\n\r\n    /**\r\n     * Enum values by id.\r\n     * @type {Object.<number,string>}\r\n     */\r\n    this.valuesById = {};\r\n\r\n    /**\r\n     * Enum values by name.\r\n     * @type {Object.<string,number>}\r\n     */\r\n    this.values = Object.create(this.valuesById); // toJSON, marker\r\n\r\n    /**\r\n     * Value comment texts, if any.\r\n     * @type {Object.<string,string>}\r\n     */\r\n    this.comments = {};\r\n\r\n    // Note that values inherit valuesById on their prototype which makes them a TypeScript-\r\n    // compatible enum. This is used by pbts to write actual enum definitions that work for\r\n    // static and reflection code alike instead of emitting generic object definitions.\r\n\r\n    if (values)\r\n        for (var keys = Object.keys(values), i = 0; i < keys.length; ++i)\r\n            this.valuesById[ this.values[keys[i]] = values[keys[i]] ] = keys[i];\r\n}\r\n\r\n/**\r\n * Creates an enum from JSON.\r\n * @param {string} name Enum name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Enum} Created enum\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nEnum.fromJSON = function fromJSON(name, json) {\r\n    return new Enum(name, json.values, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nEnum.prototype.toJSON = function toJSON() {\r\n    return {\r\n        options : this.options,\r\n        values  : this.values\r\n    };\r\n};\r\n\r\n/**\r\n * Adds a value to this enum.\r\n * @param {string} name Value name\r\n * @param {number} id Value id\r\n * @param {?string} comment Comment, if any\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a value with this name or id\r\n */\r\nEnum.prototype.add = function(name, id, comment) {\r\n    // utilized by the parser but not by .fromJSON\r\n\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n\r\n    if (!util.isInteger(id))\r\n        throw TypeError(\"id must be an integer\");\r\n\r\n    if (this.values[name] !== undefined)\r\n        throw Error(\"duplicate name\");\r\n\r\n    if (this.valuesById[id] !== undefined)\r\n        throw Error(\"duplicate id\");\r\n\r\n    this.valuesById[this.values[name] = id] = name;\r\n    this.comments[name] = comment || null;\r\n\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a value from this enum\r\n * @param {string} name Value name\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `name` is not a name of this enum\r\n */\r\nEnum.prototype.remove = function(name) {\r\n\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n\r\n    var val = this.values[name];\r\n    if (val === undefined)\r\n        throw Error(\"name does not exist\");\r\n\r\n    delete this.valuesById[val];\r\n    delete this.values[name];\r\n    delete this.comments[name];\r\n\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Field;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(22);\r\n((Field.prototype = Object.create(ReflectionObject.prototype)).constructor = Field).className = \"Field\";\r\n\r\nvar Enum  = require(14),\r\n    types = require(31),\r\n    util  = require(32);\r\n\r\nvar Type; // cyclic\r\n\r\n/**\r\n * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.\r\n * @classdesc Reflected message field.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} type Value type\r\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\r\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Field(name, id, type, rule, extend, options) {\r\n\r\n    if (util.isObject(rule)) {\r\n        options = rule;\r\n        rule = extend = undefined;\r\n    } else if (util.isObject(extend)) {\r\n        options = extend;\r\n        extend = undefined;\r\n    }\r\n\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    if (!util.isInteger(id) || id < 0)\r\n        throw TypeError(\"id must be a non-negative integer\");\r\n\r\n    if (!util.isString(type))\r\n        throw TypeError(\"type must be a string\");\r\n\r\n    if (rule !== undefined && !/^required|optional|repeated$/.test(rule = rule.toString().toLowerCase()))\r\n        throw TypeError(\"rule must be a string rule\");\r\n\r\n    if (extend !== undefined && !util.isString(extend))\r\n        throw TypeError(\"extend must be a string\");\r\n\r\n    /**\r\n     * Field rule, if any.\r\n     * @type {string|undefined}\r\n     */\r\n    this.rule = rule && rule !== \"optional\" ? rule : undefined; // toJSON\r\n\r\n    /**\r\n     * Field type.\r\n     * @type {string}\r\n     */\r\n    this.type = type; // toJSON\r\n\r\n    /**\r\n     * Unique field id.\r\n     * @type {number}\r\n     */\r\n    this.id = id; // toJSON, marker\r\n\r\n    /**\r\n     * Extended type if different from parent.\r\n     * @type {string|undefined}\r\n     */\r\n    this.extend = extend || undefined; // toJSON\r\n\r\n    /**\r\n     * Whether this field is required.\r\n     * @type {boolean}\r\n     */\r\n    this.required = rule === \"required\";\r\n\r\n    /**\r\n     * Whether this field is optional.\r\n     * @type {boolean}\r\n     */\r\n    this.optional = !this.required;\r\n\r\n    /**\r\n     * Whether this field is repeated.\r\n     * @type {boolean}\r\n     */\r\n    this.repeated = rule === \"repeated\";\r\n\r\n    /**\r\n     * Whether this field is a map or not.\r\n     * @type {boolean}\r\n     */\r\n    this.map = false;\r\n\r\n    /**\r\n     * Message this field belongs to.\r\n     * @type {?Type}\r\n     */\r\n    this.message = null;\r\n\r\n    /**\r\n     * OneOf this field belongs to, if any,\r\n     * @type {?OneOf}\r\n     */\r\n    this.partOf = null;\r\n\r\n    /**\r\n     * The field type's default value.\r\n     * @type {*}\r\n     */\r\n    this.typeDefault = null;\r\n\r\n    /**\r\n     * The field's default value on prototypes.\r\n     * @type {*}\r\n     */\r\n    this.defaultValue = null;\r\n\r\n    /**\r\n     * Whether this field's value should be treated as a long.\r\n     * @type {boolean}\r\n     */\r\n    this.long = util.Long ? types.long[type] !== undefined : /* istanbul ignore next */ false;\r\n\r\n    /**\r\n     * Whether this field's value is a buffer.\r\n     * @type {boolean}\r\n     */\r\n    this.bytes = type === \"bytes\";\r\n\r\n    /**\r\n     * Resolved type if not a basic type.\r\n     * @type {?(Type|Enum)}\r\n     */\r\n    this.resolvedType = null;\r\n\r\n    /**\r\n     * Sister-field within the extended type if a declaring extension field.\r\n     * @type {?Field}\r\n     */\r\n    this.extensionField = null;\r\n\r\n    /**\r\n     * Sister-field within the declaring namespace if an extended field.\r\n     * @type {?Field}\r\n     */\r\n    this.declaringField = null;\r\n\r\n    /**\r\n     * Internally remembers whether this field is packed.\r\n     * @type {?boolean}\r\n     * @private\r\n     */\r\n    this._packed = null;\r\n}\r\n\r\n/**\r\n * Determines whether this field is packed. Only relevant when repeated and working with proto2.\r\n * @name Field#packed\r\n * @type {boolean}\r\n * @readonly\r\n */\r\nObject.defineProperty(Field.prototype, \"packed\", {\r\n    get: function() {\r\n        // defaults to packed=true if not explicity set to false\r\n        if (this._packed === null)\r\n            this._packed = this.getOption(\"packed\") !== false;\r\n        return this._packed;\r\n    }\r\n});\r\n\r\n/**\r\n * @override\r\n */\r\nField.prototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (name === \"packed\") // clear cached before setting\r\n        this._packed = null;\r\n    return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);\r\n};\r\n\r\n/**\r\n * Constructs a field from JSON.\r\n * @param {string} name Field name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Field} Created field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nField.fromJSON = function fromJSON(name, json) {\r\n    return new Field(name, json.id, json.type, json.rule, json.extend, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nField.prototype.toJSON = function toJSON() {\r\n    return {\r\n        rule    : this.rule !== \"optional\" && this.rule || undefined,\r\n        type    : this.type,\r\n        id      : this.id,\r\n        extend  : this.extend,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * Resolves this field's type references.\r\n * @returns {Field} `this`\r\n * @throws {Error} If any reference cannot be resolved\r\n */\r\nField.prototype.resolve = function resolve() {\r\n\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    if ((this.typeDefault = types.defaults[this.type]) === undefined) { // if not a basic type, resolve it\r\n\r\n        /* istanbul ignore if */\r\n        if (!Type)\r\n            Type = require(30);\r\n\r\n        if (this.resolvedType = this.parent.lookup(this.type, Type))\r\n            this.typeDefault = null;\r\n        else if (this.resolvedType = this.parent.lookup(this.type, Enum))\r\n            this.typeDefault = this.resolvedType.values[Object.keys(this.resolvedType.values)[0]]; // first defined\r\n        else\r\n            throw Error(\"unresolvable field type: \" + this.type);\r\n    }\r\n\r\n    // use explicitly set default value if present\r\n    if (this.options && this.options[\"default\"] !== undefined) {\r\n        this.typeDefault = this.options[\"default\"];\r\n        if (this.resolvedType instanceof Enum && typeof this.typeDefault === \"string\")\r\n            this.typeDefault = this.resolvedType.values[this.typeDefault];\r\n    }\r\n\r\n    // convert to internal data type if necesssary\r\n    if (this.long) {\r\n        this.typeDefault = util.Long.fromNumber(this.typeDefault, this.type.charAt(0) === \"u\");\r\n\r\n        /* istanbul ignore else */\r\n        if (Object.freeze)\r\n            Object.freeze(this.typeDefault); // long instances are meant to be immutable anyway (i.e. use small int cache that even requires it)\r\n\r\n    } else if (this.bytes && typeof this.typeDefault === \"string\") {\r\n        var buf;\r\n        if (util.base64.test(this.typeDefault))\r\n            util.base64.decode(this.typeDefault, buf = util.newBuffer(util.base64.length(this.typeDefault)), 0);\r\n        else\r\n            util.utf8.write(this.typeDefault, buf = util.newBuffer(util.utf8.length(this.typeDefault)), 0);\r\n        this.typeDefault = buf;\r\n    }\r\n\r\n    // take special care of maps and repeated fields\r\n    if (this.map)\r\n        this.defaultValue = util.emptyObject;\r\n    else if (this.repeated)\r\n        this.defaultValue = util.emptyArray;\r\n    else\r\n        this.defaultValue = this.typeDefault;\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nvar protobuf = module.exports = require(17);\r\n\r\nprotobuf.build = \"light\";\r\n\r\n/**\r\n * A node-style callback as used by {@link load} and {@link Root#load}.\r\n * @typedef LoadCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {Root} [root] Root, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} root Root namespace, defaults to create a new one if omitted.\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @see {@link Root#load}\r\n */\r\nfunction load(filename, root, callback) {\r\n    if (typeof root === \"function\") {\r\n        callback = root;\r\n        root = new protobuf.Root();\r\n    } else if (!root)\r\n        root = new protobuf.Root();\r\n    return root.load(filename, callback);\r\n}\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @see {@link Root#load}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and returns a promise.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @see {@link Root#load}\r\n * @variation 3\r\n */\r\n// function load(filename:string, [root:Root]):Promise<Root>\r\n\r\nprotobuf.load = load;\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into a common root namespace (node only).\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n * @see {@link Root#loadSync}\r\n */\r\nfunction loadSync(filename, root) {\r\n    if (!root)\r\n        root = new protobuf.Root();\r\n    return root.loadSync(filename);\r\n}\r\n\r\nprotobuf.loadSync = loadSync;\r\n\r\n// Serialization\r\nprotobuf.encoder          = require(13);\r\nprotobuf.decoder          = require(12);\r\nprotobuf.verifier         = require(35);\r\nprotobuf.converter        = require(11);\r\n\r\n// Reflection\r\nprotobuf.ReflectionObject = require(22);\r\nprotobuf.Namespace        = require(21);\r\nprotobuf.Root             = require(26);\r\nprotobuf.Enum             = require(14);\r\nprotobuf.Type             = require(30);\r\nprotobuf.Field            = require(15);\r\nprotobuf.OneOf            = require(23);\r\nprotobuf.MapField         = require(18);\r\nprotobuf.Service          = require(29);\r\nprotobuf.Method           = require(20);\r\n\r\n// Runtime\r\nprotobuf.Class            = require(10);\r\nprotobuf.Message          = require(19);\r\n\r\n// Utility\r\nprotobuf.types            = require(31);\r\nprotobuf.util             = require(32);\r\n\r\n// Configure reflection\r\nprotobuf.ReflectionObject._configure(protobuf.Root);\r\nprotobuf.Namespace._configure(protobuf.Type, protobuf.Service);\r\nprotobuf.Root._configure(protobuf.Type);\r\n","\"use strict\";\r\nvar protobuf = exports;\r\n\r\n/**\r\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\r\n * @name build\r\n * @type {string}\r\n */\r\nprotobuf.build = \"minimal\";\r\n\r\n/**\r\n * Named roots.\r\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\r\n * Can also be used manually to make roots available accross modules.\r\n * @name roots\r\n * @type {Object.<string,Root>}\r\n * @example\r\n * // pbjs -r myroot -o compiled.js ...\r\n * \r\n * // in another module:\r\n * require(\"./compiled.js\");\r\n * \r\n * // in any subsequent module:\r\n * var root = protobuf.roots[\"myroot\"];\r\n */\r\nprotobuf.roots = {};\r\n\r\n// Serialization\r\nprotobuf.Writer       = require(36);\r\nprotobuf.BufferWriter = require(37);\r\nprotobuf.Reader       = require(24);\r\nprotobuf.BufferReader = require(25);\r\n\r\n// Utility\r\nprotobuf.util         = require(34);\r\nprotobuf.rpc          = require(27);\r\nprotobuf.configure    = configure;\r\n\r\n/* istanbul ignore next */\r\n/**\r\n * Reconfigures the library according to the environment.\r\n * @returns {undefined}\r\n */\r\nfunction configure() {\r\n    protobuf.Reader._configure(protobuf.BufferReader);\r\n    protobuf.util._configure();\r\n}\r\n\r\n// Configure serialization\r\nprotobuf.Writer._configure(protobuf.BufferWriter);\r\nconfigure();\r\n","\"use strict\";\r\nmodule.exports = MapField;\r\n\r\n// extends Field\r\nvar Field = require(15);\r\n((MapField.prototype = Object.create(Field.prototype)).constructor = MapField).className = \"MapField\";\r\n\r\nvar types   = require(31),\r\n    util    = require(32);\r\n\r\n/**\r\n * Constructs a new map field instance.\r\n * @classdesc Reflected map field.\r\n * @extends Field\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} keyType Key type\r\n * @param {string} type Value type\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction MapField(name, id, keyType, type, options) {\r\n    Field.call(this, name, id, type, options);\r\n\r\n    /* istanbul ignore next */\r\n    if (!util.isString(keyType))\r\n        throw TypeError(\"keyType must be a string\");\r\n\r\n    /**\r\n     * Key type.\r\n     * @type {string}\r\n     */\r\n    this.keyType = keyType; // toJSON, marker\r\n\r\n    /**\r\n     * Resolved key type if not a basic type.\r\n     * @type {?ReflectionObject}\r\n     */\r\n    this.resolvedKeyType = null;\r\n\r\n    // Overrides Field#map\r\n    this.map = true;\r\n}\r\n\r\n/**\r\n * Constructs a map field from JSON.\r\n * @param {string} name Field name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {MapField} Created map field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMapField.fromJSON = function fromJSON(name, json) {\r\n    return new MapField(name, json.id, json.keyType, json.type, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapField.prototype.toJSON = function toJSON() {\r\n    return {\r\n        keyType : this.keyType,\r\n        type    : this.type,\r\n        id      : this.id,\r\n        extend  : this.extend,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapField.prototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    // Besides a value type, map fields have a key type that may be \"any scalar type except for floating point types and bytes\"\r\n    if (types.mapKey[this.keyType] === undefined)\r\n        throw Error(\"invalid key type: \" + this.keyType);\r\n\r\n    return Field.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Message;\r\n\r\nvar util = require(32);\r\n\r\n/**\r\n * Constructs a new message instance.\r\n *\r\n * This function should also be called from your custom constructors, i.e. `Message.call(this, properties)`.\r\n * @classdesc Abstract runtime message.\r\n * @constructor\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @see {@link Class.create}\r\n */\r\nfunction Message(properties) {\r\n    if (properties)\r\n        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n            this[keys[i]] = properties[keys[i]];\r\n}\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message.$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message#$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\nMessage.encode = function encode(message, writer) {\r\n    return this.$type.encode(message, writer);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its length as a varint.\r\n * @param {Message|Object} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n */\r\nMessage.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.$type.encodeDelimited(message, writer);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @name Message.decode\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\nMessage.decode = function decode(reader) {\r\n    return this.$type.decode(reader);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its length as a varint.\r\n * @name Message.decodeDelimited\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {Message} Decoded message\r\n */\r\nMessage.decodeDelimited = function decodeDelimited(reader) {\r\n    return this.$type.decodeDelimited(reader);\r\n};\r\n\r\n/**\r\n * Verifies a message of this type.\r\n * @name Message.verify\r\n * @function\r\n * @param {Message|Object} message Message or plain object to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\nMessage.verify = function verify(message) {\r\n    return this.$type.verify(message);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\nMessage.fromObject = function fromObject(object) {\r\n    return this.$type.fromObject(object);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * This is an alias of {@link Message.fromObject}.\r\n * @function\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\nMessage.from = Message.fromObject;\r\n\r\n/**\r\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\r\n * @param {Message} message Message instance\r\n * @param {ConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n */\r\nMessage.toObject = function toObject(message, options) {\r\n    return this.$type.toObject(message, options);\r\n};\r\n\r\n/**\r\n * Creates a plain object from this message. Also converts values to other types if specified.\r\n * @param {ConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n */\r\nMessage.prototype.toObject = function toObject(options) {\r\n    return this.$type.toObject(this, options);\r\n};\r\n\r\n/**\r\n * Converts this message to JSON.\r\n * @returns {Object.<string,*>} JSON object\r\n */\r\nMessage.prototype.toJSON = function toJSON() {\r\n    return this.$type.toObject(this, util.toJSONOptions);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Method;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(22);\r\n((Method.prototype = Object.create(ReflectionObject.prototype)).constructor = Method).className = \"Method\";\r\n\r\nvar util = require(32);\r\n\r\n/**\r\n * Constructs a new service method instance.\r\n * @classdesc Reflected service method.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Method name\r\n * @param {string|undefined} type Method type, usually `\"rpc\"`\r\n * @param {string} requestType Request message type\r\n * @param {string} responseType Response message type\r\n * @param {boolean|Object.<string,*>} [requestStream] Whether the request is streamed\r\n * @param {boolean|Object.<string,*>} [responseStream] Whether the response is streamed\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Method(name, type, requestType, responseType, requestStream, responseStream, options) {\r\n\r\n    /* istanbul ignore next */\r\n    if (util.isObject(requestStream)) {\r\n        options = requestStream;\r\n        requestStream = responseStream = undefined;\r\n    /* istanbul ignore next */\r\n    } else if (util.isObject(responseStream)) {\r\n        options = responseStream;\r\n        responseStream = undefined;\r\n    }\r\n\r\n    /* istanbul ignore next */\r\n    if (!(type === undefined || util.isString(type)))\r\n        throw TypeError(\"type must be a string\");\r\n    /* istanbul ignore next */\r\n    if (!util.isString(requestType))\r\n        throw TypeError(\"requestType must be a string\");\r\n    /* istanbul ignore next */\r\n    if (!util.isString(responseType))\r\n        throw TypeError(\"responseType must be a string\");\r\n\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Method type.\r\n     * @type {string}\r\n     */\r\n    this.type = type || \"rpc\"; // toJSON\r\n\r\n    /**\r\n     * Request type.\r\n     * @type {string}\r\n     */\r\n    this.requestType = requestType; // toJSON, marker\r\n\r\n    /**\r\n     * Whether requests are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.requestStream = requestStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Response type.\r\n     * @type {string}\r\n     */\r\n    this.responseType = responseType; // toJSON\r\n\r\n    /**\r\n     * Whether responses are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.responseStream = responseStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Resolved request type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedRequestType = null;\r\n\r\n    /**\r\n     * Resolved response type.\r\n     * @type {?Type}\r\n     */\r\n    this.resolvedResponseType = null;\r\n}\r\n\r\n/**\r\n * Constructs a service method from JSON.\r\n * @param {string} name Method name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Method} Created method\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMethod.fromJSON = function fromJSON(name, json) {\r\n    return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethod.prototype.toJSON = function toJSON() {\r\n    return {\r\n        type           : this.type !== \"rpc\" && /* istanbul ignore next */ this.type || undefined,\r\n        requestType    : this.requestType,\r\n        requestStream  : this.requestStream,\r\n        responseType   : this.responseType,\r\n        responseStream : this.responseStream,\r\n        options        : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethod.prototype.resolve = function resolve() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    this.resolvedRequestType = this.parent.lookupType(this.requestType);\r\n    this.resolvedResponseType = this.parent.lookupType(this.responseType);\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Namespace;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(22);\r\n((Namespace.prototype = Object.create(ReflectionObject.prototype)).constructor = Namespace).className = \"Namespace\";\r\n\r\nvar Enum     = require(14),\r\n    Field    = require(15),\r\n    util     = require(32);\r\n\r\nvar Type,    // cyclic\r\n    Service; // \"\r\n\r\n/**\r\n * Constructs a new namespace instance.\r\n * @name Namespace\r\n * @classdesc Reflected namespace.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\n\r\n/**\r\n * Constructs a namespace from JSON.\r\n * @memberof Namespace\r\n * @function\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Namespace} Created namespace\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nNamespace.fromJSON = function fromJSON(name, json) {\r\n    return new Namespace(name, json.options).addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * Converts an array of reflection objects to JSON.\r\n * @memberof Namespace\r\n * @param {ReflectionObject[]} array Object array\r\n * @returns {Object.<string,*>|undefined} JSON object or `undefined` when array is empty\r\n */\r\nfunction arrayToJSON(array) {\r\n    if (!(array && array.length))\r\n        return undefined;\r\n    var obj = {};\r\n    for (var i = 0; i < array.length; ++i)\r\n        obj[array[i].name] = array[i].toJSON();\r\n    return obj;\r\n}\r\n\r\nNamespace.arrayToJSON = arrayToJSON;\r\n\r\n/**\r\n * Not an actual constructor. Use {@link Namespace} instead.\r\n * @classdesc Base class of all reflection objects containing nested objects. This is not an actual class but here for the sake of having consistent type definitions.\r\n * @exports NamespaceBase\r\n * @extends ReflectionObject\r\n * @abstract\r\n * @constructor\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @see {@link Namespace}\r\n */\r\nfunction Namespace(name, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Nested objects by name.\r\n     * @type {Object.<string,ReflectionObject>|undefined}\r\n     */\r\n    this.nested = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached nested objects as an array.\r\n     * @type {?ReflectionObject[]}\r\n     * @private\r\n     */\r\n    this._nestedArray = null;\r\n}\r\n\r\nfunction clearCache(namespace) {\r\n    namespace._nestedArray = null;\r\n    return namespace;\r\n}\r\n\r\n/**\r\n * Nested objects of this namespace as an array for iteration.\r\n * @name NamespaceBase#nestedArray\r\n * @type {ReflectionObject[]}\r\n * @readonly\r\n */\r\nObject.defineProperty(Namespace.prototype, \"nestedArray\", {\r\n    get: function() {\r\n        return this._nestedArray || (this._nestedArray = util.toArray(this.nested));\r\n    }\r\n});\r\n\r\n/**\r\n * @override\r\n */\r\nNamespace.prototype.toJSON = function toJSON() {\r\n    return {\r\n        options : this.options,\r\n        nested  : arrayToJSON(this.nestedArray)\r\n    };\r\n};\r\n\r\n/**\r\n * Adds nested elements to this namespace from JSON.\r\n * @param {Object.<string,*>} nestedJson Nested JSON\r\n * @returns {Namespace} `this`\r\n */\r\nNamespace.prototype.addJSON = function addJSON(nestedJson) {\r\n    var ns = this;\r\n    /* istanbul ignore else */\r\n    if (nestedJson) {\r\n        for (var names = Object.keys(nestedJson), i = 0, nested; i < names.length; ++i) {\r\n            nested = nestedJson[names[i]];\r\n            ns.add( // most to least likely\r\n                ( nested.fields !== undefined\r\n                ? Type.fromJSON\r\n                : nested.values !== undefined\r\n                ? Enum.fromJSON\r\n                : nested.methods !== undefined\r\n                ? Service.fromJSON\r\n                : nested.id !== undefined\r\n                ? Field.fromJSON\r\n                : Namespace.fromJSON )(names[i], nested)\r\n            );\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets the nested object of the specified name.\r\n * @param {string} name Nested object name\r\n * @returns {?ReflectionObject} The reflection object or `null` if it doesn't exist\r\n */\r\nNamespace.prototype.get = function get(name) {\r\n    return this.nested && this.nested[name]\r\n        || null;\r\n};\r\n\r\n/**\r\n * Gets the values of the nested {@link Enum|enum} of the specified name.\r\n * This methods differs from {@link Namespace#get|get} in that it returns an enum's values directly and throws instead of returning `null`.\r\n * @param {string} name Nested enum name\r\n * @returns {Object.<string,number>} Enum values\r\n * @throws {Error} If there is no such enum\r\n */\r\nNamespace.prototype.getEnum = function getEnum(name) {\r\n    if (this.nested && this.nested[name] instanceof Enum)\r\n        return this.nested[name].values;\r\n    throw Error(\"no such enum\");\r\n};\r\n\r\n/**\r\n * Adds a nested object to this namespace.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name\r\n */\r\nNamespace.prototype.add = function add(object) {\r\n\r\n    if (!(object instanceof Field && object.extend !== undefined || object instanceof Type || object instanceof Enum || object instanceof Service || object instanceof Namespace))\r\n        throw TypeError(\"object must be a valid nested object\");\r\n\r\n    if (!this.nested)\r\n        this.nested = {};\r\n    else {\r\n        var prev = this.get(object.name);\r\n        if (prev) {\r\n            if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {\r\n                // replace plain namespace but keep existing nested elements and options\r\n                var nested = prev.nestedArray;\r\n                for (var i = 0; i < nested.length; ++i)\r\n                    object.add(nested[i]);\r\n                this.remove(prev);\r\n                if (!this.nested)\r\n                    this.nested = {};\r\n                object.setOptions(prev.options, true);\r\n\r\n            } else\r\n                throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n        }\r\n    }\r\n    this.nested[object.name] = object;\r\n    object.onAdd(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this namespace.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this namespace\r\n */\r\nNamespace.prototype.remove = function remove(object) {\r\n\r\n    if (!(object instanceof ReflectionObject))\r\n        throw TypeError(\"object must be a ReflectionObject\");\r\n    if (object.parent !== this)\r\n        throw Error(object + \" is not a member of \" + this);\r\n\r\n    delete this.nested[object.name];\r\n    if (!Object.keys(this.nested).length)\r\n        this.nested = undefined;\r\n\r\n    object.onRemove(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Defines additial namespaces within this one if not yet existing.\r\n * @param {string|string[]} path Path to create\r\n * @param {*} [json] Nested types to create from JSON\r\n * @returns {Namespace} Pointer to the last namespace created or `this` if path is empty\r\n */\r\nNamespace.prototype.define = function define(path, json) {\r\n\r\n    if (util.isString(path))\r\n        path = path.split(\".\");\r\n    else if (!Array.isArray(path))\r\n        throw TypeError(\"illegal path\");\r\n    if (path && path.length && path[0] === \"\")\r\n        throw Error(\"path must be relative\");\r\n\r\n    var ptr = this;\r\n    while (path.length > 0) {\r\n        var part = path.shift();\r\n        if (ptr.nested && ptr.nested[part]) {\r\n            ptr = ptr.nested[part];\r\n            if (!(ptr instanceof Namespace))\r\n                throw Error(\"path conflicts with non-namespace objects\");\r\n        } else\r\n            ptr.add(ptr = new Namespace(part));\r\n    }\r\n    if (json)\r\n        ptr.addJSON(json);\r\n    return ptr;\r\n};\r\n\r\n/**\r\n * Resolves this namespace's and all its nested objects' type references. Useful to validate a reflection tree, but comes at a cost.\r\n * @returns {Namespace} `this`\r\n */\r\nNamespace.prototype.resolveAll = function resolveAll() {\r\n    var nested = this.nestedArray, i = 0;\r\n    while (i < nested.length)\r\n        if (nested[i] instanceof Namespace)\r\n            nested[i++].resolveAll();\r\n        else\r\n            nested[i++].resolve();\r\n    return this.resolve();\r\n};\r\n\r\n/**\r\n * Looks up the reflection object at the specified path, relative to this namespace.\r\n * @param {string|string[]} path Path to look up\r\n * @param {function(new: ReflectionObject)} filterType Filter type, one of `protobuf.Type`, `protobuf.Enum`, `protobuf.Service` etc.\r\n * @param {boolean} [parentAlreadyChecked=false] If known, whether the parent has already been checked\r\n * @returns {?ReflectionObject} Looked up object or `null` if none could be found\r\n */\r\nNamespace.prototype.lookup = function lookup(path, filterType, parentAlreadyChecked) {\r\n\r\n    /* istanbul ignore next */\r\n    if (typeof filterType === \"boolean\") {\r\n        parentAlreadyChecked = filterType;\r\n        filterType = undefined;\r\n    }\r\n\r\n    if (util.isString(path) && path.length) {\r\n        if (path === \".\")\r\n            return this.root;\r\n        path = path.split(\".\");\r\n    } else if (!path.length)\r\n        return this;\r\n\r\n    // Start at root if path is absolute\r\n    if (path[0] === \"\")\r\n        return this.root.lookup(path.slice(1), filterType);\r\n    // Test if the first part matches any nested object, and if so, traverse if path contains more\r\n    var found = this.get(path[0]);\r\n    if (found) {\r\n        if (path.length === 1) {\r\n            if (!filterType || found instanceof filterType)\r\n                return found;\r\n        } else if (found instanceof Namespace && (found = found.lookup(path.slice(1), filterType, true)))\r\n            return found;\r\n    }\r\n    // If there hasn't been a match, try again at the parent\r\n    if (this.parent === null || parentAlreadyChecked)\r\n        return null;\r\n    return this.parent.lookup(path, filterType);\r\n};\r\n\r\n/**\r\n * Looks up the reflection object at the specified path, relative to this namespace.\r\n * @name NamespaceBase#lookup\r\n * @function\r\n * @param {string|string[]} path Path to look up\r\n * @param {boolean} [parentAlreadyChecked=false] Whether the parent has already been checked\r\n * @returns {?ReflectionObject} Looked up object or `null` if none could be found\r\n * @variation 2\r\n */\r\n// lookup(path: string, [parentAlreadyChecked: boolean])\r\n\r\n/**\r\n * Looks up the {@link Type|type} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Type} Looked up type\r\n * @throws {Error} If `path` does not point to a type\r\n */\r\nNamespace.prototype.lookupType = function lookupType(path) {\r\n    var found = this.lookup(path, Type);\r\n    if (!found)\r\n        throw Error(\"no such type\");\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the {@link Service|service} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Service} Looked up service\r\n * @throws {Error} If `path` does not point to a service\r\n */\r\nNamespace.prototype.lookupService = function lookupService(path) {\r\n    var found = this.lookup(path, Service);\r\n    if (!found)\r\n        throw Error(\"no such service\");\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the values of the {@link Enum|enum} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it returns the enum's values directly and throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Object.<string,number>} Enum values\r\n * @throws {Error} If `path` does not point to an enum\r\n */\r\nNamespace.prototype.lookupEnum = function lookupEnum(path) {\r\n    var found = this.lookup(path, Enum);\r\n    if (!found)\r\n        throw Error(\"no such enum\");\r\n    return found.values;\r\n};\r\n\r\nNamespace._configure = function(Type_, Service_) {\r\n    Type    = Type_;\r\n    Service = Service_;\r\n};\r\n","\"use strict\";\r\nmodule.exports = ReflectionObject;\r\n\r\nReflectionObject.className = \"ReflectionObject\";\r\n\r\nvar util = require(32);\r\n\r\nvar Root; // cyclic\r\n\r\n/**\r\n * Constructs a new reflection object instance.\r\n * @classdesc Base class of all reflection objects.\r\n * @constructor\r\n * @param {string} name Object name\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @abstract\r\n */\r\nfunction ReflectionObject(name, options) {\r\n\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n\r\n    if (options && !util.isObject(options))\r\n        throw TypeError(\"options must be an object\");\r\n\r\n    /**\r\n     * Options.\r\n     * @type {Object.<string,*>|undefined}\r\n     */\r\n    this.options = options; // toJSON\r\n\r\n    /**\r\n     * Unique name within its namespace.\r\n     * @type {string}\r\n     */\r\n    this.name = name;\r\n\r\n    /**\r\n     * Parent namespace.\r\n     * @type {?Namespace}\r\n     */\r\n    this.parent = null;\r\n\r\n    /**\r\n     * Whether already resolved or not.\r\n     * @type {boolean}\r\n     */\r\n    this.resolved = false;\r\n\r\n    /**\r\n     * Comment text, if any.\r\n     * @type {?string}\r\n     */\r\n    this.comment = null;\r\n}\r\n\r\nObject.defineProperties(ReflectionObject.prototype, {\r\n\r\n    /**\r\n     * Reference to the root namespace.\r\n     * @name ReflectionObject#root\r\n     * @type {Root}\r\n     * @readonly\r\n     */\r\n    root: {\r\n        get: function() {\r\n            var ptr = this;\r\n            while (ptr.parent !== null)\r\n                ptr = ptr.parent;\r\n            return ptr;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Full name including leading dot.\r\n     * @name ReflectionObject#fullName\r\n     * @type {string}\r\n     * @readonly\r\n     */\r\n    fullName: {\r\n        get: function() {\r\n            var path = [ this.name ],\r\n                ptr = this.parent;\r\n            while (ptr) {\r\n                path.unshift(ptr.name);\r\n                ptr = ptr.parent;\r\n            }\r\n            return path.join(\".\");\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Converts this reflection object to its JSON representation.\r\n * @returns {Object.<string,*>} JSON object\r\n * @abstract\r\n */\r\nReflectionObject.prototype.toJSON = /* istanbul ignore next */ function toJSON() {\r\n    throw Error(); // not implemented, shouldn't happen\r\n};\r\n\r\n/**\r\n * Called when this object is added to a parent.\r\n * @param {ReflectionObject} parent Parent added to\r\n * @returns {undefined}\r\n */\r\nReflectionObject.prototype.onAdd = function onAdd(parent) {\r\n    if (this.parent && this.parent !== parent)\r\n        this.parent.remove(this);\r\n    this.parent = parent;\r\n    this.resolved = false;\r\n    var root = parent.root;\r\n    if (root instanceof Root)\r\n        root._handleAdd(this);\r\n};\r\n\r\n/**\r\n * Called when this object is removed from a parent.\r\n * @param {ReflectionObject} parent Parent removed from\r\n * @returns {undefined}\r\n */\r\nReflectionObject.prototype.onRemove = function onRemove(parent) {\r\n    var root = parent.root;\r\n    if (root instanceof Root)\r\n        root._handleRemove(this);\r\n    this.parent = null;\r\n    this.resolved = false;\r\n};\r\n\r\n/**\r\n * Resolves this objects type references.\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObject.prototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n    if (this.root instanceof Root)\r\n        this.resolved = true; // only if part of a root\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets an option value.\r\n * @param {string} name Option name\r\n * @returns {*} Option value or `undefined` if not set\r\n */\r\nReflectionObject.prototype.getOption = function getOption(name) {\r\n    if (this.options)\r\n        return this.options[name];\r\n    return undefined;\r\n};\r\n\r\n/**\r\n * Sets an option.\r\n * @param {string} name Option name\r\n * @param {*} value Option value\r\n * @param {boolean} [ifNotSet] Sets the option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObject.prototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (!ifNotSet || !this.options || this.options[name] === undefined)\r\n        (this.options || (this.options = {}))[name] = value;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Sets multiple options.\r\n * @param {Object.<string,*>} options Options to set\r\n * @param {boolean} [ifNotSet] Sets an option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObject.prototype.setOptions = function setOptions(options, ifNotSet) {\r\n    if (options)\r\n        for (var keys = Object.keys(options), i = 0; i < keys.length; ++i)\r\n            this.setOption(keys[i], options[keys[i]], ifNotSet);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Converts this instance to its string representation.\r\n * @returns {string} Class name[, space, full name]\r\n */\r\nReflectionObject.prototype.toString = function toString() {\r\n    var className = this.constructor.className,\r\n        fullName  = this.fullName;\r\n    if (fullName.length)\r\n        return className + \" \" + fullName;\r\n    return className;\r\n};\r\n\r\nReflectionObject._configure = function(Root_) {\r\n    Root = Root_;\r\n};\r\n","\"use strict\";\r\nmodule.exports = OneOf;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(22);\r\n((OneOf.prototype = Object.create(ReflectionObject.prototype)).constructor = OneOf).className = \"OneOf\";\r\n\r\nvar Field = require(15);\r\n\r\n/**\r\n * Constructs a new oneof instance.\r\n * @classdesc Reflected oneof.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Oneof name\r\n * @param {string[]|Object} [fieldNames] Field names\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction OneOf(name, fieldNames, options) {\r\n    if (!Array.isArray(fieldNames)) {\r\n        options = fieldNames;\r\n        fieldNames = undefined;\r\n    }\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /* istanbul ignore next */\r\n    if (!(fieldNames === undefined || Array.isArray(fieldNames)))\r\n        throw TypeError(\"fieldNames must be an Array\");\r\n\r\n    /**\r\n     * Field names that belong to this oneof.\r\n     * @type {string[]}\r\n     */\r\n    this.oneof = fieldNames || []; // toJSON, marker\r\n\r\n    /**\r\n     * Fields that belong to this oneof as an array for iteration.\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    this.fieldsArray = []; // declared readonly for conformance, possibly not yet added to parent\r\n}\r\n\r\n/**\r\n * Constructs a oneof from JSON.\r\n * @param {string} name Oneof name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {MapField} Created oneof\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nOneOf.fromJSON = function fromJSON(name, json) {\r\n    return new OneOf(name, json.oneof, json.options);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOf.prototype.toJSON = function toJSON() {\r\n    return {\r\n        oneof   : this.oneof,\r\n        options : this.options\r\n    };\r\n};\r\n\r\n/**\r\n * Adds the fields of the specified oneof to the parent if not already done so.\r\n * @param {OneOf} oneof The oneof\r\n * @returns {undefined}\r\n * @inner\r\n * @ignore\r\n */\r\nfunction addFieldsToParent(oneof) {\r\n    if (oneof.parent)\r\n        for (var i = 0; i < oneof.fieldsArray.length; ++i)\r\n            if (!oneof.fieldsArray[i].parent)\r\n                oneof.parent.add(oneof.fieldsArray[i]);\r\n}\r\n\r\n/**\r\n * Adds a field to this oneof and removes it from its current parent, if any.\r\n * @param {Field} field Field to add\r\n * @returns {OneOf} `this`\r\n */\r\nOneOf.prototype.add = function add(field) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!(field instanceof Field))\r\n        throw TypeError(\"field must be a Field\");\r\n    if (field.parent && field.parent !== this.parent)\r\n        field.parent.remove(field);\r\n    this.oneof.push(field.name);\r\n    this.fieldsArray.push(field);\r\n    field.partOf = this; // field.parent remains null\r\n    addFieldsToParent(this);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a field from this oneof and puts it back to the oneof's parent.\r\n * @param {Field} field Field to remove\r\n * @returns {OneOf} `this`\r\n */\r\nOneOf.prototype.remove = function remove(field) {\r\n\r\n    /* istanbul ignore next */\r\n    if (!(field instanceof Field))\r\n        throw TypeError(\"field must be a Field\");\r\n\r\n    var index = this.fieldsArray.indexOf(field);\r\n    /* istanbul ignore next */\r\n    if (index < 0)\r\n        throw Error(field + \" is not a member of \" + this);\r\n\r\n    this.fieldsArray.splice(index, 1);\r\n    index = this.oneof.indexOf(field.name);\r\n    /* istanbul ignore else */\r\n    if (index > -1) // theoretical\r\n        this.oneof.splice(index, 1);\r\n    field.partOf = null;\r\n    return this;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOf.prototype.onAdd = function onAdd(parent) {\r\n    ReflectionObject.prototype.onAdd.call(this, parent);\r\n    var self = this;\r\n    // Collect present fields\r\n    for (var i = 0; i < this.oneof.length; ++i) {\r\n        var field = parent.get(this.oneof[i]);\r\n        if (field && !field.partOf) {\r\n            field.partOf = self;\r\n            self.fieldsArray.push(field);\r\n        }\r\n    }\r\n    // Add not yet present fields\r\n    addFieldsToParent(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOf.prototype.onRemove = function onRemove(parent) {\r\n    for (var i = 0, field; i < this.fieldsArray.length; ++i)\r\n        if ((field = this.fieldsArray[i]).parent)\r\n            field.parent.remove(field);\r\n    ReflectionObject.prototype.onRemove.call(this, parent);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Reader;\r\n\r\nvar util      = require(34);\r\n\r\nvar BufferReader; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    utf8      = util.utf8;\r\n\r\n/* istanbul ignore next */\r\nfunction indexOutOfRange(reader, writeLength) {\r\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\r\n}\r\n\r\n/**\r\n * Constructs a new reader instance using the specified buffer.\r\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n * @param {Uint8Array} buffer Buffer to read from\r\n */\r\nfunction Reader(buffer) {\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @type {Uint8Array}\r\n     */\r\n    this.buf = buffer;\r\n\r\n    /**\r\n     * Read buffer position.\r\n     * @type {number}\r\n     */\r\n    this.pos = 0;\r\n\r\n    /**\r\n     * Read buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = buffer.length;\r\n}\r\n\r\n/**\r\n * Creates a new reader using the specified buffer.\r\n * @function\r\n * @param {Uint8Array|Buffer} buffer Buffer to read from\r\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\r\n */\r\nReader.create = util.Buffer\r\n    ? function create_buffer_setup(buffer) {\r\n        return (Reader.create = function create_buffer(buffer) {\r\n            return util.Buffer.isBuffer(buffer)\r\n                ? new BufferReader(buffer)\r\n                : new Reader(buffer);\r\n        })(buffer);\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array(buffer) {\r\n        return new Reader(buffer);\r\n    };\r\n\r\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\r\n\r\n/**\r\n * Reads a varint as an unsigned 32 bit value.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.uint32 = (function read_uint32_setup() {\r\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\r\n    return function read_uint32() {\r\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n\r\n        /* istanbul ignore next */\r\n        if ((this.pos += 5) > this.len) {\r\n            this.pos = this.len;\r\n            throw indexOutOfRange(this, 10);\r\n        }\r\n        return value;\r\n    };\r\n})();\r\n\r\n/**\r\n * Reads a varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.int32 = function read_int32() {\r\n    return this.uint32() | 0;\r\n};\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.sint32 = function read_sint32() {\r\n    var value = this.uint32();\r\n    return value >>> 1 ^ -(value & 1) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readLongVarint() {\r\n    // tends to deopt with local vars for octet etc.\r\n    var bits = new LongBits(0 >>> 0, 0 >>> 0);\r\n    var i = 0;\r\n    if (this.len - this.pos > 4) { // fast route (lo)\r\n        for (; i < 4; ++i) {\r\n            // 1st..4th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 5th\r\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\r\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\r\n        if (this.buf[this.pos++] < 128)\r\n            return bits;\r\n        i = 0;\r\n    } else {\r\n        for (; i < 3; ++i) {\r\n            /* istanbul ignore next */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 1st..3th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 4th\r\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\r\n        return bits;\r\n    }\r\n    if (this.len - this.pos > 4) { // fast route (hi)\r\n        for (; i < 5; ++i) {\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    } else {\r\n        for (; i < 5; ++i) {\r\n            /* istanbul ignore next */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    }\r\n    /* istanbul ignore next */\r\n    throw Error(\"invalid varint encoding\");\r\n}\r\n\r\nfunction read_int64_long() {\r\n    return readLongVarint.call(this).toLong();\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_int64_number() {\r\n    return readLongVarint.call(this).toNumber();\r\n}\r\n\r\nfunction read_uint64_long() {\r\n    return readLongVarint.call(this).toLong(true);\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_uint64_number() {\r\n    return readLongVarint.call(this).toNumber(true);\r\n}\r\n\r\nfunction read_sint64_long() {\r\n    return readLongVarint.call(this).zzDecode().toLong();\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_sint64_number() {\r\n    return readLongVarint.call(this).zzDecode().toNumber();\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads a varint as a signed 64 bit value.\r\n * @name Reader#int64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as an unsigned 64 bit value.\r\n * @name Reader#uint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 64 bit value.\r\n * @name Reader#sint64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as a boolean.\r\n * @returns {boolean} Value read\r\n */\r\nReader.prototype.bool = function read_bool() {\r\n    return this.uint32() !== 0;\r\n};\r\n\r\nfunction readFixed32(buf, end) {\r\n    return (buf[end - 4]\r\n          | buf[end - 3] << 8\r\n          | buf[end - 2] << 16\r\n          | buf[end - 1] << 24) >>> 0;\r\n}\r\n\r\n/**\r\n * Reads fixed 32 bits as a number.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.fixed32 = function read_fixed32() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32(this.buf, this.pos += 4);\r\n};\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 32 bits as a number.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.sfixed32 = function read_sfixed32() {\r\n    var value = this.fixed32();\r\n    return value >>> 1 ^ -(value & 1);\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readFixed64(/* this: Reader */) {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 8);\r\n\r\n    return new LongBits(readFixed32(this.buf, this.pos += 4), readFixed32(this.buf, this.pos += 4));\r\n}\r\n\r\nfunction read_fixed64_long() {\r\n    return readFixed64.call(this).toLong(true);\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_fixed64_number() {\r\n    return readFixed64.call(this).toNumber(true);\r\n}\r\n\r\nfunction read_sfixed64_long() {\r\n    return readFixed64.call(this).zzDecode().toLong();\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction read_sfixed64_number() {\r\n    return readFixed64.call(this).zzDecode().toNumber();\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads fixed 64 bits.\r\n * @name Reader#fixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 64 bits.\r\n * @name Reader#sfixed64\r\n * @function\r\n * @returns {Long|number} Value read\r\n */\r\n\r\nvar readFloat = typeof Float32Array !== \"undefined\"\r\n    ? (function() {\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function readFloat_f32(buf, pos) {\r\n                f8b[0] = buf[pos    ];\r\n                f8b[1] = buf[pos + 1];\r\n                f8b[2] = buf[pos + 2];\r\n                f8b[3] = buf[pos + 3];\r\n                return f32[0];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function readFloat_f32_le(buf, pos) {\r\n                f8b[3] = buf[pos    ];\r\n                f8b[2] = buf[pos + 1];\r\n                f8b[1] = buf[pos + 2];\r\n                f8b[0] = buf[pos + 3];\r\n                return f32[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function readFloat_ieee754(buf, pos) {\r\n        var uint = readFixed32(buf, pos + 4),\r\n            sign = (uint >> 31) * 2 + 1,\r\n            exponent = uint >>> 23 & 255,\r\n            mantissa = uint & 8388607;\r\n        return exponent === 255\r\n            ? mantissa\r\n              ? NaN\r\n              : sign * Infinity\r\n            : exponent === 0 // denormal\r\n              ? sign * 1.401298464324817e-45 * mantissa\r\n              : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n    };\r\n\r\n/**\r\n * Reads a float (32 bit) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.float = function read_float() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = readFloat(this.buf, this.pos);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\nvar readDouble = typeof Float64Array !== \"undefined\"\r\n    ? (function() {\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function readDouble_f64(buf, pos) {\r\n                f8b[0] = buf[pos    ];\r\n                f8b[1] = buf[pos + 1];\r\n                f8b[2] = buf[pos + 2];\r\n                f8b[3] = buf[pos + 3];\r\n                f8b[4] = buf[pos + 4];\r\n                f8b[5] = buf[pos + 5];\r\n                f8b[6] = buf[pos + 6];\r\n                f8b[7] = buf[pos + 7];\r\n                return f64[0];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function readDouble_f64_le(buf, pos) {\r\n                f8b[7] = buf[pos    ];\r\n                f8b[6] = buf[pos + 1];\r\n                f8b[5] = buf[pos + 2];\r\n                f8b[4] = buf[pos + 3];\r\n                f8b[3] = buf[pos + 4];\r\n                f8b[2] = buf[pos + 5];\r\n                f8b[1] = buf[pos + 6];\r\n                f8b[0] = buf[pos + 7];\r\n                return f64[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function readDouble_ieee754(buf, pos) {\r\n        var lo = readFixed32(buf, pos + 4),\r\n            hi = readFixed32(buf, pos + 8);\r\n        var sign = (hi >> 31) * 2 + 1,\r\n            exponent = hi >>> 20 & 2047,\r\n            mantissa = 4294967296 * (hi & 1048575) + lo;\r\n        return exponent === 2047\r\n            ? mantissa\r\n              ? NaN\r\n              : sign * Infinity\r\n            : exponent === 0 // denormal\r\n              ? sign * 5e-324 * mantissa\r\n              : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n    };\r\n\r\n/**\r\n * Reads a double (64 bit float) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.double = function read_double() {\r\n\r\n    /* istanbul ignore next */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = readDouble(this.buf, this.pos);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @returns {Uint8Array} Value read\r\n */\r\nReader.prototype.bytes = function read_bytes() {\r\n    var length = this.uint32(),\r\n        start  = this.pos,\r\n        end    = this.pos + length;\r\n\r\n    /* istanbul ignore next */\r\n    if (end > this.len)\r\n        throw indexOutOfRange(this, length);\r\n\r\n    this.pos += length;\r\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\r\n        ? new this.buf.constructor(0)\r\n        : this._slice.call(this.buf, start, end);\r\n};\r\n\r\n/**\r\n * Reads a string preceeded by its byte length as a varint.\r\n * @returns {string} Value read\r\n */\r\nReader.prototype.string = function read_string() {\r\n    var bytes = this.bytes();\r\n    return utf8.read(bytes, 0, bytes.length);\r\n};\r\n\r\n/**\r\n * Skips the specified number of bytes if specified, otherwise skips a varint.\r\n * @param {number} [length] Length if known, otherwise a varint is assumed\r\n * @returns {Reader} `this`\r\n */\r\nReader.prototype.skip = function skip(length) {\r\n    if (typeof length === \"number\") {\r\n        /* istanbul ignore next */\r\n        if (this.pos + length > this.len)\r\n            throw indexOutOfRange(this, length);\r\n        this.pos += length;\r\n    } else {\r\n        /* istanbul ignore next */\r\n        do {\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n        } while (this.buf[this.pos++] & 128);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Skips the next element of the specified wire type.\r\n * @param {number} wireType Wire type received\r\n * @returns {Reader} `this`\r\n */\r\nReader.prototype.skipType = function(wireType) {\r\n    switch (wireType) {\r\n        case 0:\r\n            this.skip();\r\n            break;\r\n        case 1:\r\n            this.skip(8);\r\n            break;\r\n        case 2:\r\n            this.skip(this.uint32());\r\n            break;\r\n        case 3:\r\n            do { // eslint-disable-line no-constant-condition\r\n                if ((wireType = this.uint32() & 7) === 4)\r\n                    break;\r\n                this.skipType(wireType);\r\n            } while (true);\r\n            break;\r\n        case 5:\r\n            this.skip(4);\r\n            break;\r\n\r\n        /* istanbul ignore next */\r\n        default:\r\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\r\n    }\r\n    return this;\r\n};\r\n\r\nReader._configure = function(BufferReader_) {\r\n    BufferReader = BufferReader_;\r\n\r\n    /* istanbul ignore else */\r\n    if (util.Long) {\r\n        Reader.prototype.int64 = read_int64_long;\r\n        Reader.prototype.uint64 = read_uint64_long;\r\n        Reader.prototype.sint64 = read_sint64_long;\r\n        Reader.prototype.fixed64 = read_fixed64_long;\r\n        Reader.prototype.sfixed64 = read_sfixed64_long;\r\n    } else {\r\n        Reader.prototype.int64 = read_int64_number;\r\n        Reader.prototype.uint64 = read_uint64_number;\r\n        Reader.prototype.sint64 = read_sint64_number;\r\n        Reader.prototype.fixed64 = read_fixed64_number;\r\n        Reader.prototype.sfixed64 = read_sfixed64_number;\r\n    }\r\n};\r\n","\"use strict\";\r\nmodule.exports = BufferReader;\r\n\r\n// extends Reader\r\nvar Reader = require(24);\r\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\r\n\r\nvar util = require(34);\r\n\r\n/**\r\n * Constructs a new buffer reader instance.\r\n * @classdesc Wire format reader using node buffers.\r\n * @extends Reader\r\n * @constructor\r\n * @param {Buffer} buffer Buffer to read from\r\n */\r\nfunction BufferReader(buffer) {\r\n    Reader.call(this, buffer);\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @name BufferReader#buf\r\n     * @type {Buffer}\r\n     */\r\n}\r\n\r\n/* istanbul ignore else */\r\nif (util.Buffer)\r\n    BufferReader.prototype._slice = util.Buffer.prototype.slice;\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReader.prototype.string = function read_string_buffer() {\r\n    var len = this.uint32(); // modifies pos\r\n    return this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len));\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @name BufferReader#bytes\r\n * @function\r\n * @returns {Buffer} Value read\r\n */\r\n","\"use strict\";\r\nmodule.exports = Root;\r\n\r\n// extends Namespace\r\nvar Namespace = require(21);\r\n((Root.prototype = Object.create(Namespace.prototype)).constructor = Root).className = \"Root\";\r\n\r\nvar Field   = require(15),\r\n    Enum    = require(14),\r\n    util    = require(32);\r\n\r\nvar Type,   // cyclic\r\n    parse,  // might be excluded\r\n    common; // \"\r\n\r\n/**\r\n * Constructs a new root namespace instance.\r\n * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {Object.<string,*>} [options] Top level options\r\n */\r\nfunction Root(options) {\r\n    Namespace.call(this, \"\", options);\r\n\r\n    /**\r\n     * Deferred extension fields.\r\n     * @type {Field[]}\r\n     */\r\n    this.deferred = [];\r\n\r\n    /**\r\n     * Resolved file names of loaded files.\r\n     * @type {string[]}\r\n     */\r\n    this.files = [];\r\n}\r\n\r\n/**\r\n * Loads a JSON definition into a root namespace.\r\n * @param {Object.<string,*>} json JSON definition\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted\r\n * @returns {Root} Root namespace\r\n */\r\nRoot.fromJSON = function fromJSON(json, root) {\r\n    if (!root)\r\n        root = new Root();\r\n    if (json.options)\r\n        root.setOptions(json.options);\r\n    return root.addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * Resolves the path of an imported file, relative to the importing origin.\r\n * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.\r\n * @function\r\n * @param {string} origin The file name of the importing file\r\n * @param {string} target The file name being imported\r\n * @returns {?string} Resolved path to `target` or `null` to skip the file\r\n */\r\nRoot.prototype.resolvePath = util.path.resolve;\r\n\r\n// A symbol-like function to safely signal synchronous loading\r\n/* istanbul ignore next */\r\nfunction SYNC() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} options Parse options\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nRoot.prototype.load = function load(filename, options, callback) {\r\n    if (typeof options === \"function\") {\r\n        callback = options;\r\n        options = undefined;\r\n    }\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(load, self, filename);\r\n    \r\n    var sync = callback === SYNC; // undocumented\r\n\r\n    // Finishes loading by calling the callback (exactly once)\r\n    function finish(err, root) {\r\n        /* istanbul ignore next */\r\n        if (!callback)\r\n            return;\r\n        var cb = callback;\r\n        callback = null;\r\n        if (sync)\r\n            throw err;\r\n        cb(err, root);\r\n    }\r\n\r\n    // Processes a single file\r\n    function process(filename, source) {\r\n        try {\r\n            if (util.isString(source) && source.charAt(0) === \"{\")\r\n                source = JSON.parse(source);\r\n            if (!util.isString(source))\r\n                self.setOptions(source.options).addJSON(source.nested);\r\n            else {\r\n                parse.filename = filename;\r\n                var parsed = parse(source, self, options),\r\n                    resolved,\r\n                    i = 0;\r\n                if (parsed.imports)\r\n                    for (; i < parsed.imports.length; ++i)\r\n                        if (resolved = self.resolvePath(filename, parsed.imports[i]))\r\n                            fetch(resolved);\r\n                if (parsed.weakImports)\r\n                    for (i = 0; i < parsed.weakImports.length; ++i)\r\n                        if (resolved = self.resolvePath(filename, parsed.weakImports[i]))\r\n                            fetch(resolved, true);\r\n            }\r\n        } catch (err) {\r\n            finish(err);\r\n        }\r\n        if (!sync && !queued)\r\n            finish(null, self); // only once anyway\r\n    }\r\n\r\n    // Fetches a single file\r\n    function fetch(filename, weak) {\r\n\r\n        // Strip path if this file references a bundled definition\r\n        var idx = filename.lastIndexOf(\"google/protobuf/\");\r\n        if (idx > -1) {\r\n            var altname = filename.substring(idx);\r\n            if (altname in common)\r\n                filename = altname;\r\n        }\r\n\r\n        // Skip if already loaded / attempted\r\n        if (self.files.indexOf(filename) > -1)\r\n            return;\r\n        self.files.push(filename);\r\n\r\n        // Shortcut bundled definitions\r\n        if (filename in common) {\r\n            if (sync)\r\n                process(filename, common[filename]);\r\n            else {\r\n                ++queued;\r\n                setTimeout(function() {\r\n                    --queued;\r\n                    process(filename, common[filename]);\r\n                });\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Otherwise fetch from disk or network\r\n        if (sync) {\r\n            var source;\r\n            try {\r\n                source = util.fs.readFileSync(filename).toString(\"utf8\");\r\n            } catch (err) {\r\n                if (!weak)\r\n                    finish(err);\r\n                return;\r\n            }\r\n            process(filename, source);\r\n        } else {\r\n            ++queued;\r\n            util.fetch(filename, function(err, source) {\r\n                --queued;\r\n                /* istanbul ignore next */\r\n                if (!callback)\r\n                    return; // terminated meanwhile\r\n                if (err) {\r\n                    if (!weak)\r\n                        finish(err);\r\n                    else if (!queued)\r\n                        finish(null, self);\r\n                    return;\r\n                }\r\n                process(filename, source);\r\n            });\r\n        }\r\n    }\r\n    var queued = 0;\r\n\r\n    // Assembling the root namespace doesn't require working type\r\n    // references anymore, so we can load everything in parallel\r\n    if (util.isString(filename))\r\n        filename = [ filename ];\r\n    for (var i = 0, resolved; i < filename.length; ++i)\r\n        if (resolved = self.resolvePath(\"\", filename[i]))\r\n            fetch(resolved);\r\n\r\n    if (sync)\r\n        return self;\r\n    if (!queued)\r\n        finish(null, self);\r\n    return undefined;\r\n};\r\n// function load(filename:string, options:ParseOptions, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.\r\n * @name Root#load\r\n * @function\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @variation 3\r\n */\r\n// function load(filename:string, [options:ParseOptions]):Promise<Root>\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace (node only).\r\n * @name Root#loadSync\r\n * @function\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {ParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n */\r\nRoot.prototype.loadSync = function loadSync(filename, options) {\r\n    if (!util.isNode)\r\n        throw Error(\"not supported\");\r\n    return this.load(filename, options, SYNC);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nRoot.prototype.resolveAll = function resolveAll() {\r\n    if (this.deferred.length)\r\n        throw Error(\"unresolvable extensions: \" + this.deferred.map(function(field) {\r\n            return \"'extend \" + field.extend + \"' in \" + field.parent.fullName;\r\n        }).join(\", \"));\r\n    return Namespace.prototype.resolveAll.call(this);\r\n};\r\n\r\n// only uppercased (and thus conflict-free) children are exposed, see below\r\nvar exposeRe = /^[A-Z]/;\r\n\r\n/**\r\n * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.\r\n * @param {Root} root Root instance\r\n * @param {Field} field Declaring extension field witin the declaring type\r\n * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise\r\n * @inner\r\n * @ignore\r\n */\r\nfunction tryHandleExtension(root, field) {   \r\n    var extendedType = field.parent.lookup(field.extend);\r\n    if (extendedType) {\r\n        var sisterField = new Field(field.fullName, field.id, field.type, field.rule, undefined, field.options);\r\n        sisterField.declaringField = field;\r\n        field.extensionField = sisterField;\r\n        extendedType.add(sisterField);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Called when any object is added to this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object added\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRoot.prototype._handleAdd = function _handleAdd(object) {\r\n    if (object instanceof Field) {\r\n\r\n        if (/* an extension field (implies not part of a oneof) */ object.extend !== undefined && /* not already handled */ !object.extensionField)\r\n            if (!tryHandleExtension(this, object))\r\n                this.deferred.push(object);\r\n\r\n    } else if (object instanceof Enum) {\r\n\r\n        if (exposeRe.test(object.name))\r\n            object.parent[object.name] = object.values; // expose enum values as property of its parent\r\n\r\n    } else /* everything else is a namespace */ {\r\n\r\n        if (object instanceof Type) // Try to handle any deferred extensions\r\n            for (var i = 0; i < this.deferred.length;)\r\n                if (tryHandleExtension(this, this.deferred[i]))\r\n                    this.deferred.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        for (var j = 0; j < /* initializes */ object.nestedArray.length; ++j) // recurse into the namespace\r\n            this._handleAdd(object._nestedArray[j]);\r\n        if (exposeRe.test(object.name))\r\n            object.parent[object.name] = object; // expose namespace as property of its parent\r\n    }\r\n\r\n    // The above also adds uppercased (and thus conflict-free) nested types, services and enums as\r\n    // properties of namespaces just like static code does. This allows using a .d.ts generated for\r\n    // a static module with reflection-based solutions where the condition is met.\r\n};\r\n\r\n/**\r\n * Called when any object is removed from this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object removed\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRoot.prototype._handleRemove = function _handleRemove(object) {\r\n    if (object instanceof Field) {\r\n\r\n        if (/* an extension field */ object.extend !== undefined) {\r\n            if (/* already handled */ object.extensionField) { // remove its sister field\r\n                object.extensionField.parent.remove(object.extensionField);\r\n                object.extensionField = null;\r\n            } else { // cancel the extension\r\n                var index = this.deferred.indexOf(object);\r\n                /* istanbul ignore else */\r\n                if (index > -1)\r\n                    this.deferred.splice(index, 1);\r\n            }\r\n        }\r\n\r\n    } else if (object instanceof Enum) {\r\n\r\n        if (exposeRe.test(object.name))\r\n            delete object.parent[object.name]; // unexpose enum values\r\n\r\n    } else if (object instanceof Namespace) {\r\n\r\n        for (var i = 0; i < /* initializes */ object.nestedArray.length; ++i) // recurse into the namespace\r\n            this._handleRemove(object._nestedArray[i]);\r\n\r\n        if (exposeRe.test(object.name))\r\n            delete object.parent[object.name]; // unexpose namespaces\r\n\r\n    }\r\n};\r\n\r\nRoot._configure = function(Type_, parse_, common_) {\r\n    Type = Type_;\r\n    parse = parse_;\r\n    common = common_;\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Streaming RPC helpers.\r\n * @namespace\r\n */\r\nvar rpc = exports;\r\n\r\n/**\r\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\r\n * @typedef RPCImpl\r\n * @type {function}\r\n * @param {Method|rpc.ServiceMethod} method Reflected or static method being called\r\n * @param {Uint8Array} requestData Request data\r\n * @param {RPCImplCallback} callback Callback function\r\n * @returns {undefined}\r\n * @example\r\n * function rpcImpl(method, requestData, callback) {\r\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\r\n *         throw Error(\"no such method\");\r\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\r\n *         callback(err, responseData);\r\n *     });\r\n * }\r\n */\r\n\r\n/**\r\n * Node-style callback as used by {@link RPCImpl}.\r\n * @typedef RPCImplCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {?Uint8Array} [response] Response data or `null` to signal end of stream, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\nrpc.Service = require(28);\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\nvar util = require(34);\r\n\r\n// Extends EventEmitter\r\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\r\n\r\n/**\r\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\r\n * \r\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\r\n * @typedef rpc.ServiceMethodCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any\r\n * @param {?Message} [response] Response message\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * A service method part of a {@link rpc.ServiceMethodMixin|ServiceMethodMixin} and thus {@link rpc.Service} as created by {@link Service.create}.\r\n * @typedef rpc.ServiceMethod\r\n * @type {function}\r\n * @param {Message|Object} request Request message or plain object\r\n * @param {rpc.ServiceMethodCallback} [callback] Node-style callback called with the error, if any, and the response message\r\n * @returns {Promise<Message>} Promise if `callback` has been omitted, otherwise `undefined`\r\n */\r\n\r\n/**\r\n * A service method mixin.\r\n * \r\n * When using TypeScript, mixed in service methods are only supported directly with a type definition of a static module (used with reflection). Otherwise, explicit casting is required.\r\n * @typedef rpc.ServiceMethodMixin\r\n * @type {Object.<string,rpc.ServiceMethod>}\r\n * @example\r\n * // Explicit casting with TypeScript\r\n * (myRpcService[\"myMethod\"] as protobuf.rpc.ServiceMethod)(...)\r\n */\r\n\r\n/**\r\n * Constructs a new RPC service instance.\r\n * @classdesc An RPC service as returned by {@link Service#create}.\r\n * @exports rpc.Service\r\n * @extends util.EventEmitter\r\n * @augments rpc.ServiceMethodMixin\r\n * @constructor\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n */\r\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\r\n\r\n    if (typeof rpcImpl !== \"function\")\r\n        throw TypeError(\"rpcImpl must be a function\");\r\n\r\n    util.EventEmitter.call(this);\r\n\r\n    /**\r\n     * RPC implementation. Becomes `null` once the service is ended.\r\n     * @type {?RPCImpl}\r\n     */\r\n    this.rpcImpl = rpcImpl;\r\n\r\n    /**\r\n     * Whether requests are length-delimited.\r\n     * @type {boolean}\r\n     */\r\n    this.requestDelimited = Boolean(requestDelimited);\r\n\r\n    /**\r\n     * Whether responses are length-delimited.\r\n     * @type {boolean}\r\n     */\r\n    this.responseDelimited = Boolean(responseDelimited);\r\n}\r\n\r\n/**\r\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\r\n * @param {Method|rpc.ServiceMethod} method Reflected or static method\r\n * @param {function} requestCtor Request constructor\r\n * @param {function} responseCtor Response constructor\r\n * @param {Message|Object} request Request message or plain object\r\n * @param {rpc.ServiceMethodCallback} callback Service callback\r\n * @returns {undefined}\r\n */\r\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\r\n\r\n    if (!request)\r\n        throw TypeError(\"request must be specified\");\r\n\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\r\n\r\n    if (!self.rpcImpl) {\r\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\r\n        return undefined;\r\n    }\r\n\r\n    try {\r\n        return self.rpcImpl(\r\n            method,\r\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\r\n            function rpcCallback(err, response) {\r\n\r\n                if (err) {\r\n                    self.emit(\"error\", err, method);\r\n                    return callback(err);\r\n                }\r\n\r\n                if (response === null) {\r\n                    self.end(/* endedByRPC */ true);\r\n                    return undefined;\r\n                }\r\n\r\n                if (!(response instanceof responseCtor)) {\r\n                    try {\r\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\r\n                    } catch (err) {\r\n                        self.emit(\"error\", err, method);\r\n                        return callback(err);\r\n                    }\r\n                }\r\n\r\n                self.emit(\"data\", response, method);\r\n                return callback(null, response);\r\n            }\r\n        );\r\n    } catch (err) {\r\n        self.emit(\"error\", err, method);\r\n        setTimeout(function() { callback(err); }, 0);\r\n        return undefined;\r\n    }\r\n};\r\n\r\n/**\r\n * Ends this service and emits the `end` event.\r\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\r\n * @returns {rpc.Service} `this`\r\n */\r\nService.prototype.end = function end(endedByRPC) {\r\n    if (this.rpcImpl) {\r\n        if (!endedByRPC) // signal end to rpcImpl\r\n            this.rpcImpl(null, null, null);\r\n        this.rpcImpl = null;\r\n        this.emit(\"end\").off();\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\n// extends Namespace\r\nvar Namespace = require(21);\r\n((Service.prototype = Object.create(Namespace.prototype)).constructor = Service).className = \"Service\";\r\n\r\nvar Method = require(20),\r\n    util   = require(32),\r\n    rpc    = require(27);\r\n\r\n/**\r\n * Constructs a new service instance.\r\n * @classdesc Reflected service.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Service name\r\n * @param {Object.<string,*>} [options] Service options\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nfunction Service(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Service methods.\r\n     * @type {Object.<string,Method>}\r\n     */\r\n    this.methods = {}; // toJSON, marker\r\n\r\n    /**\r\n     * Cached methods as an array.\r\n     * @type {?Method[]}\r\n     * @private\r\n     */\r\n    this._methodsArray = null;\r\n}\r\n\r\n/**\r\n * Constructs a service from JSON.\r\n * @param {string} name Service name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Service} Created service\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nService.fromJSON = function fromJSON(name, json) {\r\n    var service = new Service(name, json.options);\r\n    /* istanbul ignore else */\r\n    if (json.methods)\r\n        for (var names = Object.keys(json.methods), i = 0; i < names.length; ++i)\r\n            service.add(Method.fromJSON(names[i], json.methods[names[i]]));\r\n    return service;\r\n};\r\n\r\n/**\r\n * Methods of this service as an array for iteration.\r\n * @name Service#methodsArray\r\n * @type {Method[]}\r\n * @readonly\r\n */\r\nObject.defineProperty(Service.prototype, \"methodsArray\", {\r\n    get: function() {\r\n        return this._methodsArray || (this._methodsArray = util.toArray(this.methods));\r\n    }\r\n});\r\n\r\nfunction clearCache(service) {\r\n    service._methodsArray = null;\r\n    return service;\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.toJSON = function toJSON() {\r\n    var inherited = Namespace.prototype.toJSON.call(this);\r\n    return {\r\n        options : inherited && inherited.options || undefined,\r\n        methods : Namespace.arrayToJSON(this.methodsArray) || /* istanbul ignore next */ {},\r\n        nested  : inherited && inherited.nested || undefined\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.get = function get(name) {\r\n    return this.methods[name]\r\n        || Namespace.prototype.get.call(this, name);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.resolveAll = function resolveAll() {\r\n    var methods = this.methodsArray;\r\n    for (var i = 0; i < methods.length; ++i)\r\n        methods[i].resolve();\r\n    return Namespace.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.add = function add(object) {\r\n    /* istanbul ignore next */\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n    if (object instanceof Method) {\r\n        this.methods[object.name] = object;\r\n        object.parent = this;\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.remove = function remove(object) {\r\n    if (object instanceof Method) {\r\n\r\n        /* istanbul ignore next */\r\n        if (this.methods[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n\r\n        delete this.methods[object.name];\r\n        object.parent = null;\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * Creates a runtime service using the specified rpc implementation.\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n * @returns {rpc.Service} RPC service. Useful where requests and/or responses are streamed.\r\n */\r\nService.prototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {\r\n    var rpcService = new rpc.Service(rpcImpl, requestDelimited, responseDelimited);\r\n    for (var i = 0; i < /* initializes */ this.methodsArray.length; ++i) {\r\n        rpcService[util.lcFirst(this._methodsArray[i].resolve().name)] = util.codegen(\"r\",\"c\")(\"return this.rpcCall(m,q,s,r,c)\").eof(util.lcFirst(this._methodsArray[i].name), {\r\n            m: this._methodsArray[i],\r\n            q: this._methodsArray[i].resolvedRequestType.ctor,\r\n            s: this._methodsArray[i].resolvedResponseType.ctor\r\n        });\r\n    }\r\n    return rpcService;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Type;\r\n\r\n// extends Namespace\r\nvar Namespace = require(21);\r\n((Type.prototype = Object.create(Namespace.prototype)).constructor = Type).className = \"Type\";\r\n\r\nvar Enum      = require(14),\r\n    OneOf     = require(23),\r\n    Field     = require(15),\r\n    MapField  = require(18),\r\n    Service   = require(29),\r\n    Class     = require(10),\r\n    Message   = require(19),\r\n    Reader    = require(24),\r\n    Writer    = require(36),\r\n    util      = require(32),\r\n    encoder   = require(13),\r\n    decoder   = require(12),\r\n    verifier  = require(35),\r\n    converter = require(11);\r\n\r\n/**\r\n * Creates a type from JSON.\r\n * @param {string} name Message name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Type} Created message type\r\n */\r\nType.fromJSON = function fromJSON(name, json) {\r\n    var type = new Type(name, json.options);\r\n    type.extensions = json.extensions;\r\n    type.reserved = json.reserved;\r\n    var names = Object.keys(json.fields),\r\n        i = 0;\r\n    for (; i < names.length; ++i)\r\n        type.add(\r\n            ( typeof json.fields[names[i]].keyType !== \"undefined\"\r\n            ? MapField.fromJSON\r\n            : Field.fromJSON )(names[i], json.fields[names[i]])\r\n        );\r\n    if (json.oneofs)\r\n        for (names = Object.keys(json.oneofs), i = 0; i < names.length; ++i)\r\n            type.add(OneOf.fromJSON(names[i], json.oneofs[names[i]]));\r\n    if (json.nested)\r\n        for (names = Object.keys(json.nested), i = 0; i < names.length; ++i) {\r\n            var nested = json.nested[names[i]];\r\n            type.add( // most to least likely\r\n                ( nested.id !== undefined\r\n                ? Field.fromJSON\r\n                : nested.fields !== undefined\r\n                ? Type.fromJSON\r\n                : nested.values !== undefined\r\n                ? Enum.fromJSON\r\n                : nested.methods !== undefined\r\n                ? Service.fromJSON\r\n                : Namespace.fromJSON )(names[i], nested)\r\n            );\r\n        }\r\n    if (json.extensions && json.extensions.length)\r\n        type.extensions = json.extensions;\r\n    if (json.reserved && json.reserved.length)\r\n        type.reserved = json.reserved;\r\n    if (json.group)\r\n        type.group = true;\r\n    return type;\r\n};\r\n\r\n/**\r\n * Constructs a new reflected message type instance.\r\n * @classdesc Reflected message type.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Message name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Type(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Message fields.\r\n     * @type {Object.<string,Field>}\r\n     */\r\n    this.fields = {};  // toJSON, marker\r\n\r\n    /**\r\n     * Oneofs declared within this namespace, if any.\r\n     * @type {Object.<string,OneOf>}\r\n     */\r\n    this.oneofs = undefined; // toJSON\r\n\r\n    /**\r\n     * Extension ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.extensions = undefined; // toJSON\r\n\r\n    /**\r\n     * Reserved ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.reserved = undefined; // toJSON\r\n\r\n    /*?\r\n     * Whether this type is a legacy group.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.group = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached fields by id.\r\n     * @type {?Object.<number,Field>}\r\n     * @private\r\n     */\r\n    this._fieldsById = null;\r\n\r\n    /**\r\n     * Cached fields as an array.\r\n     * @type {?Field[]}\r\n     * @private\r\n     */\r\n    this._fieldsArray = null;\r\n\r\n    /**\r\n     * Cached oneofs as an array.\r\n     * @type {?OneOf[]}\r\n     * @private\r\n     */\r\n    this._oneofsArray = null;\r\n\r\n    /**\r\n     * Cached constructor.\r\n     * @type {*}\r\n     * @private\r\n     */\r\n    this._ctor = null;\r\n}\r\n\r\nObject.defineProperties(Type.prototype, {\r\n\r\n    /**\r\n     * Message fields by id.\r\n     * @name Type#fieldsById\r\n     * @type {Object.<number,Field>}\r\n     * @readonly\r\n     */\r\n    fieldsById: {\r\n        get: function() {\r\n            /* istanbul ignore next */\r\n            if (this._fieldsById)\r\n                return this._fieldsById;\r\n            this._fieldsById = {};\r\n            for (var names = Object.keys(this.fields), i = 0; i < names.length; ++i) {\r\n                var field = this.fields[names[i]],\r\n                    id = field.id;\r\n\r\n                /* istanbul ignore next */\r\n                if (this._fieldsById[id])\r\n                    throw Error(\"duplicate id \" + id + \" in \" + this);\r\n\r\n                this._fieldsById[id] = field;\r\n            }\r\n            return this._fieldsById;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Fields of this message as an array for iteration.\r\n     * @name Type#fieldsArray\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    fieldsArray: {\r\n        get: function() {\r\n            return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Oneofs of this message as an array for iteration.\r\n     * @name Type#oneofsArray\r\n     * @type {OneOf[]}\r\n     * @readonly\r\n     */\r\n    oneofsArray: {\r\n        get: function() {\r\n            return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * The registered constructor, if any registered, otherwise a generic constructor.\r\n     * @name Type#ctor\r\n     * @type {Class}\r\n     */\r\n    ctor: {\r\n        get: function() {\r\n            return this._ctor || (this._ctor = Class(this).constructor);\r\n        },\r\n        set: function(ctor) {\r\n            if (ctor && !(ctor.prototype instanceof Message))\r\n                throw TypeError(\"ctor must be a Message constructor\");\r\n            if (!ctor.from)\r\n                ctor.from = Message.from;\r\n            this._ctor = ctor;\r\n        }\r\n    }\r\n});\r\n\r\nfunction clearCache(type) {\r\n    type._fieldsById = type._fieldsArray = type._oneofsArray = type._ctor = null;\r\n    delete type.encode;\r\n    delete type.decode;\r\n    delete type.verify;\r\n    return type;\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nType.prototype.toJSON = function toJSON() {\r\n    var inherited = Namespace.prototype.toJSON.call(this);\r\n    return {\r\n        options    : inherited && inherited.options || undefined,\r\n        oneofs     : Namespace.arrayToJSON(this.oneofsArray),\r\n        fields     : Namespace.arrayToJSON(this.fieldsArray.filter(function(obj) { return !obj.declaringField; })) || {},\r\n        extensions : this.extensions && this.extensions.length ? this.extensions : undefined,\r\n        reserved   : this.reserved && this.reserved.length ? this.reserved : undefined,\r\n        group      : this.group || undefined,\r\n        nested     : inherited && inherited.nested || undefined\r\n    };\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nType.prototype.resolveAll = function resolveAll() {\r\n    var fields = this.fieldsArray, i = 0;\r\n    while (i < fields.length)\r\n        fields[i++].resolve();\r\n    var oneofs = this.oneofsArray; i = 0;\r\n    while (i < oneofs.length)\r\n        oneofs[i++].resolve();\r\n    return Namespace.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nType.prototype.get = function get(name) {\r\n    return this.fields[name]\r\n        || this.oneofs && this.oneofs[name]\r\n        || this.nested && this.nested[name]\r\n        || null;\r\n};\r\n\r\n/**\r\n * Adds a nested object to this type.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name or, if a field, when there is already a field with this id\r\n */\r\nType.prototype.add = function add(object) {\r\n\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // NOTE: Extension fields aren't actual fields on the declaring type, but nested objects.\r\n        // The root object takes care of adding distinct sister-fields to the respective extended\r\n        // type instead.\r\n\r\n        if (this.fieldsById[object.id])\r\n            throw Error(\"duplicate id \" + object.id + \" in \" + this);\r\n\r\n        if (object.parent)\r\n            object.parent.remove(object);\r\n        this.fields[object.name] = object;\r\n        object.message = this;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    if (object instanceof OneOf) {\r\n        if (!this.oneofs)\r\n            this.oneofs = {};\r\n        this.oneofs[object.name] = object;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this type.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this type\r\n */\r\nType.prototype.remove = function remove(object) {\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // See Type#add for the reason why extension fields are excluded here.\r\n        /* istanbul ignore next */\r\n        if (!this.fields || this.fields[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n        delete this.fields[object.name];\r\n        object.parent = null;\r\n        object.onRemove(this);\r\n        return clearCache(this);\r\n    }\r\n    if (object instanceof OneOf) {\r\n        /* istanbul ignore next */\r\n        if (!this.oneofs || this.oneofs[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n        delete this.oneofs[object.name];\r\n        object.parent = null;\r\n        object.onRemove(this);\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type using the specified properties.\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @returns {Message} Runtime message\r\n */\r\nType.prototype.create = function create(properties) {\r\n    return new this.ctor(properties);\r\n};\r\n\r\n/**\r\n * Sets up {@link Type#encode|encode}, {@link Type#decode|decode} and {@link Type#verify|verify}.\r\n * @returns {Type} `this`\r\n */\r\nType.prototype.setup = function setup() {\r\n    // Sets up everything at once so that the prototype chain does not have to be re-evaluated\r\n    // multiple times (V8, soft-deopt prototype-check).\r\n    var fullName = this.fullName,\r\n        types    = [];\r\n    for (var i = 0; i < /* initializes */ this.fieldsArray.length; ++i)\r\n        types.push(this._fieldsArray[i].resolve().resolvedType);\r\n    this.encode = encoder(this).eof(fullName + \"$encode\", {\r\n        Writer : Writer,\r\n        types  : types,\r\n        util   : util\r\n    });\r\n    this.decode = decoder(this).eof(fullName + \"$decode\", {\r\n        Reader : Reader,\r\n        types  : types,\r\n        util   : util\r\n    });\r\n    this.verify = verifier(this).eof(fullName + \"$verify\", {\r\n        types : types,\r\n        util  : util\r\n    });\r\n    this.fromObject = this.from = converter.fromObject(this).eof(fullName + \"$fromObject\", {\r\n        types : types,\r\n        util  : util\r\n    });\r\n    this.toObject = converter.toObject(this).eof(fullName + \"$toObject\", {\r\n        types : types,\r\n        util  : util\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @param {Message|Object} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nType.prototype.encode = function encode_setup(message, writer) {\r\n    return this.setup().encode(message, writer); // overrides this method\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Message|Object} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nType.prototype.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer && writer.len ? writer.fork() : writer).ldelim();\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\r\n * @param {number} [length] Length of the message, if known beforehand\r\n * @returns {Message} Decoded message\r\n */\r\nType.prototype.decode = function decode_setup(reader, length) {\r\n    return this.setup().decode(reader, length); // overrides this method\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\r\n * @returns {Message} Decoded message\r\n */\r\nType.prototype.decodeDelimited = function decodeDelimited(reader) {\r\n    if (!(reader instanceof Reader))\r\n        reader = Reader.create(reader);\r\n    return this.decode(reader, reader.uint32());\r\n};\r\n\r\n/**\r\n * Verifies that field values are valid and that required fields are present.\r\n * @param {Message|Object} message Message to verify\r\n * @returns {?string} `null` if valid, otherwise the reason why it is not\r\n */\r\nType.prototype.verify = function verify_setup(message) {\r\n    return this.setup().verify(message); // overrides this method\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\nType.prototype.fromObject = function fromObject(object) {\r\n    return this.setup().fromObject(object);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * This is an alias of {@link Type#fromObject}.\r\n * @function\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message} Message instance\r\n */\r\nType.prototype.from = Type.prototype.fromObject;\r\n\r\n/**\r\n * Conversion options as used by {@link Type#toObject} and {@link Message.toObject}.\r\n * @typedef ConversionOptions\r\n * @type {Object}\r\n * @property {*} [longs] Long conversion type.\r\n * Valid values are `String` and `Number` (the global types).\r\n * Defaults to copy the present value, which is a possibly unsafe number without and a {@link Long} with a long library.\r\n * @property {*} [enums] Enum value conversion type.\r\n * Only valid value is `String` (the global type).\r\n * Defaults to copy the present value, which is the numeric id.\r\n * @property {*} [bytes] Bytes value conversion type.\r\n * Valid values are `Array` and (a base64 encoded) `String` (the global types).\r\n * Defaults to copy the present value, which usually is a Buffer under node and an Uint8Array in the browser.\r\n * @property {boolean} [defaults=false] Also sets default values on the resulting object\r\n * @property {boolean} [arrays=false] Sets empty arrays for missing repeated fields even if `defaults=false`\r\n * @property {boolean} [objects=false] Sets empty objects for missing map fields even if `defaults=false`\r\n */\r\n\r\n/**\r\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\r\n * @param {Message} message Message instance\r\n * @param {ConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n */\r\nType.prototype.toObject = function toObject(message, options) {\r\n    return this.setup().toObject(message, options);\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Common type constants.\r\n * @namespace\r\n */\r\nvar types = exports;\r\n\r\nvar util = require(32);\r\n\r\nvar s = [\r\n    \"double\",   // 0\r\n    \"float\",    // 1\r\n    \"int32\",    // 2\r\n    \"uint32\",   // 3\r\n    \"sint32\",   // 4\r\n    \"fixed32\",  // 5\r\n    \"sfixed32\", // 6\r\n    \"int64\",    // 7\r\n    \"uint64\",   // 8\r\n    \"sint64\",   // 9\r\n    \"fixed64\",  // 10\r\n    \"sfixed64\", // 11\r\n    \"bool\",     // 12\r\n    \"string\",   // 13\r\n    \"bytes\"     // 14\r\n];\r\n\r\nfunction bake(values, offset) {\r\n    var i = 0, o = {};\r\n    offset |= 0;\r\n    while (i < values.length) o[s[i + offset]] = values[i++];\r\n    return o;\r\n}\r\n\r\n/**\r\n * Basic type wire types.\r\n * @type {Object.<string,number>}\r\n * @property {number} double=1 Fixed64 wire type\r\n * @property {number} float=5 Fixed32 wire type\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n * @property {number} string=2 Ldelim wire type\r\n * @property {number} bytes=2 Ldelim wire type\r\n */\r\ntypes.basic = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2,\r\n    /* bytes    */ 2\r\n]);\r\n\r\n/**\r\n * Basic type defaults.\r\n * @type {Object.<string,*>}\r\n * @property {number} double=0 Double default\r\n * @property {number} float=0 Float default\r\n * @property {number} int32=0 Int32 default\r\n * @property {number} uint32=0 Uint32 default\r\n * @property {number} sint32=0 Sint32 default\r\n * @property {number} fixed32=0 Fixed32 default\r\n * @property {number} sfixed32=0 Sfixed32 default\r\n * @property {number} int64=0 Int64 default\r\n * @property {number} uint64=0 Uint64 default\r\n * @property {number} sint64=0 Sint32 default\r\n * @property {number} fixed64=0 Fixed64 default\r\n * @property {number} sfixed64=0 Sfixed64 default\r\n * @property {boolean} bool=false Bool default\r\n * @property {string} string=\"\" String default\r\n * @property {Array.<number>} bytes=Array(0) Bytes default\r\n * @property {Message} message=null Message default\r\n */\r\ntypes.defaults = bake([\r\n    /* double   */ 0,\r\n    /* float    */ 0,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 0,\r\n    /* sfixed32 */ 0,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 0,\r\n    /* sfixed64 */ 0,\r\n    /* bool     */ false,\r\n    /* string   */ \"\",\r\n    /* bytes    */ util.emptyArray,\r\n    /* message  */ null\r\n]);\r\n\r\n/**\r\n * Basic long type wire types.\r\n * @type {Object.<string,number>}\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n */\r\ntypes.long = bake([\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1\r\n], 7);\r\n\r\n/**\r\n * Allowed types for map keys with their associated wire type.\r\n * @type {Object.<string,number>}\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n * @property {number} string=2 Ldelim wire type\r\n */\r\ntypes.mapKey = bake([\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2\r\n], 2);\r\n\r\n/**\r\n * Allowed types for packed repeated fields with their associated wire type.\r\n * @type {Object.<string,number>}\r\n * @property {number} double=1 Fixed64 wire type\r\n * @property {number} float=5 Fixed32 wire type\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n */\r\ntypes.packed = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0\r\n]);\r\n","\"use strict\";\r\n\r\n/**\r\n * Various utility functions.\r\n * @namespace\r\n */\r\nvar util = module.exports = require(34);\r\n\r\nutil.codegen = require(3);\r\nutil.fetch   = require(5);\r\nutil.path    = require(7);\r\n\r\n/**\r\n * Node's fs module if available.\r\n * @type {Object.<string,*>}\r\n */\r\nutil.fs = util.inquire(\"fs\");\r\n\r\n/**\r\n * Converts an object's values to an array.\r\n * @param {Object.<string,*>} object Object to convert\r\n * @returns {Array.<*>} Converted array\r\n */\r\nutil.toArray = function toArray(object) {\r\n    var array = [];\r\n    if (object)\r\n        for (var keys = Object.keys(object), i = 0; i < keys.length; ++i)\r\n            array.push(object[keys[i]]);\r\n    return array;\r\n};\r\n\r\n/**\r\n * Returns a safe property accessor for the specified properly name.\r\n * @param {string} prop Property name\r\n * @returns {string} Safe accessor\r\n */\r\nutil.safeProp = function safeProp(prop) {\r\n    return \"[\\\"\" + prop.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, \"\\\\\\\"\") + \"\\\"]\";\r\n};\r\n\r\n/**\r\n * Converts the first character of a string to upper case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.ucFirst = function ucFirst(str) {\r\n    return str.charAt(0).toUpperCase() + str.substring(1);\r\n};\r\n","\"use strict\";\r\nmodule.exports = LongBits;\r\n\r\nvar util = require(34);\r\n\r\n/**\r\n * Any compatible Long instance.\r\n * \r\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\r\n * @typedef Long\r\n * @type {Object}\r\n * @property {number} low Low bits\r\n * @property {number} high High bits\r\n * @property {boolean} unsigned Whether unsigned or not\r\n */\r\n\r\n/**\r\n * Constructs new long bits.\r\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\r\n * @memberof util\r\n * @constructor\r\n * @param {number} lo Low bits\r\n * @param {number} hi High bits\r\n */\r\nfunction LongBits(lo, hi) { // make sure to always call this with unsigned 32bits for proper optimization\r\n\r\n    /**\r\n     * Low bits.\r\n     * @type {number}\r\n     */\r\n    this.lo = lo;\r\n\r\n    /**\r\n     * High bits.\r\n     * @type {number}\r\n     */\r\n    this.hi = hi;\r\n}\r\n\r\n/**\r\n * Zero bits.\r\n * @memberof util.LongBits\r\n * @type {util.LongBits}\r\n */\r\nvar zero = LongBits.zero = new LongBits(0, 0);\r\n\r\nzero.toNumber = function() { return 0; };\r\nzero.zzEncode = zero.zzDecode = function() { return this; };\r\nzero.length = function() { return 1; };\r\n\r\n/**\r\n * Zero hash.\r\n * @memberof util.LongBits\r\n * @type {string}\r\n */\r\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\r\n\r\n/**\r\n * Constructs new long bits from the specified number.\r\n * @param {number} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.fromNumber = function fromNumber(value) {\r\n    if (value === 0)\r\n        return zero;\r\n    var sign = value < 0;\r\n    if (sign)\r\n        value = -value;\r\n    var lo = value >>> 0,\r\n        hi = (value - lo) / 4294967296 >>> 0; \r\n    if (sign) {\r\n        hi = ~hi >>> 0;\r\n        lo = ~lo >>> 0;\r\n        if (++lo > 4294967295) {\r\n            lo = 0;\r\n            if (++hi > 4294967295)\r\n                hi = 0;\r\n        }\r\n    }\r\n    return new LongBits(lo, hi);\r\n};\r\n\r\n/**\r\n * Constructs new long bits from a number, long or string.\r\n * @param {Long|number|string} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.from = function from(value) {\r\n    if (typeof value === \"number\")\r\n        return LongBits.fromNumber(value);\r\n    if (util.isString(value)) {\r\n        /* istanbul ignore else */\r\n        if (util.Long)\r\n            value = util.Long.fromString(value);\r\n        else\r\n            return LongBits.fromNumber(parseInt(value, 10));\r\n    }\r\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a possibly unsafe JavaScript number.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {number} Possibly unsafe number\r\n */\r\nLongBits.prototype.toNumber = function toNumber(unsigned) {\r\n    if (!unsigned && this.hi >>> 31) {\r\n        var lo = ~this.lo + 1 >>> 0,\r\n            hi = ~this.hi     >>> 0;\r\n        if (!lo)\r\n            hi = hi + 1 >>> 0;\r\n        return -(lo + hi * 4294967296);\r\n    }\r\n    return this.lo + this.hi * 4294967296;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a long.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long} Long\r\n */\r\nLongBits.prototype.toLong = function toLong(unsigned) {\r\n    return util.Long\r\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\r\n        /* istanbul ignore next */\r\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\r\n};\r\n\r\nvar charCodeAt = String.prototype.charCodeAt;\r\n\r\n/**\r\n * Constructs new long bits from the specified 8 characters long hash.\r\n * @param {string} hash Hash\r\n * @returns {util.LongBits} Bits\r\n */\r\nLongBits.fromHash = function fromHash(hash) {\r\n    if (hash === zeroHash)\r\n        return zero;\r\n    return new LongBits(\r\n        ( charCodeAt.call(hash, 0)\r\n        | charCodeAt.call(hash, 1) << 8\r\n        | charCodeAt.call(hash, 2) << 16\r\n        | charCodeAt.call(hash, 3) << 24) >>> 0\r\n    ,\r\n        ( charCodeAt.call(hash, 4)\r\n        | charCodeAt.call(hash, 5) << 8\r\n        | charCodeAt.call(hash, 6) << 16\r\n        | charCodeAt.call(hash, 7) << 24) >>> 0\r\n    );\r\n};\r\n\r\n/**\r\n * Converts this long bits to a 8 characters long hash.\r\n * @returns {string} Hash\r\n */\r\nLongBits.prototype.toHash = function toHash() {\r\n    return String.fromCharCode(\r\n        this.lo        & 255,\r\n        this.lo >>> 8  & 255,\r\n        this.lo >>> 16 & 255,\r\n        this.lo >>> 24      ,\r\n        this.hi        & 255,\r\n        this.hi >>> 8  & 255,\r\n        this.hi >>> 16 & 255,\r\n        this.hi >>> 24\r\n    );\r\n};\r\n\r\n/**\r\n * Zig-zag encodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBits.prototype.zzEncode = function zzEncode() {\r\n    var mask =   this.hi >> 31;\r\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\r\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Zig-zag decodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBits.prototype.zzDecode = function zzDecode() {\r\n    var mask = -(this.lo & 1);\r\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\r\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Calculates the length of this longbits when encoded as a varint.\r\n * @returns {number} Length\r\n */\r\nLongBits.prototype.length = function length() {\r\n    var part0 =  this.lo,\r\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\r\n        part2 =  this.hi >>> 24;\r\n    return part2 === 0\r\n         ? part1 === 0\r\n           ? part0 < 16384\r\n             ? part0 < 128 ? 1 : 2\r\n             : part0 < 2097152 ? 3 : 4\r\n           : part1 < 16384\r\n             ? part1 < 128 ? 5 : 6\r\n             : part1 < 2097152 ? 7 : 8\r\n         : part2 < 128 ? 9 : 10;\r\n};\r\n","\"use strict\";\r\nvar util = exports;\r\n\r\n// used to return a Promise where callback is omitted\r\nutil.asPromise = require(1);\r\n\r\n// converts to / from base64 encoded strings\r\nutil.base64 = require(2);\r\n\r\n// base class of rpc.Service\r\nutil.EventEmitter = require(4);\r\n\r\n// requires modules optionally and hides the call from bundlers\r\nutil.inquire = require(6);\r\n\r\n// convert to / from utf8 encoded strings\r\nutil.utf8 = require(9);\r\n\r\n// provides a node-like buffer pool in the browser\r\nutil.pool = require(8);\r\n\r\n// utility to work with the low and high bits of a 64 bit value\r\nutil.LongBits = require(33);\r\n\r\n/**\r\n * An immuable empty array.\r\n * @memberof util\r\n * @type {Array.<*>}\r\n */\r\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\r\n\r\n/**\r\n * An immutable empty object.\r\n * @type {Object}\r\n */\r\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\r\n\r\n/**\r\n * Whether running within node or not.\r\n * @memberof util\r\n * @type {boolean}\r\n */\r\nutil.isNode = Boolean(global.process && global.process.versions && global.process.versions.node);\r\n\r\n/**\r\n * Tests if the specified value is an integer.\r\n * @function\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is an integer\r\n */\r\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\r\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a string.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a string\r\n */\r\nutil.isString = function isString(value) {\r\n    return typeof value === \"string\" || value instanceof String;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a non-null object.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a non-null object\r\n */\r\nutil.isObject = function isObject(value) {\r\n    return value && typeof value === \"object\";\r\n};\r\n\r\n/**\r\n * Node's Buffer class if available.\r\n * @type {?function(new: Buffer)}\r\n */\r\nutil.Buffer = (function() {\r\n    try {\r\n        var Buffer = util.inquire(\"buffer\").Buffer;\r\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\r\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\r\n    } catch (e) {\r\n        /* istanbul ignore next */\r\n        return null;\r\n    }\r\n})();\r\n\r\n/**\r\n * Internal alias of or polyfull for Buffer.from.\r\n * @type {?function}\r\n * @param {string|number[]} value Value\r\n * @param {string} [encoding] Encoding if value is a string\r\n * @returns {Uint8Array}\r\n * @private\r\n */\r\nutil._Buffer_from = null;\r\n\r\n/**\r\n * Internal alias of or polyfill for Buffer.allocUnsafe.\r\n * @type {?function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array}\r\n * @private\r\n */\r\nutil._Buffer_allocUnsafe = null;\r\n\r\n/**\r\n * Creates a new buffer of whatever type supported by the environment.\r\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\r\n * @returns {Uint8Array|Buffer} Buffer\r\n */\r\nutil.newBuffer = function newBuffer(sizeOrArray) {\r\n    /* istanbul ignore next */\r\n    return typeof sizeOrArray === \"number\"\r\n        ? util.Buffer\r\n            ? util._Buffer_allocUnsafe(sizeOrArray)\r\n            : new util.Array(sizeOrArray)\r\n        : util.Buffer\r\n            ? util._Buffer_from(sizeOrArray)\r\n            : typeof Uint8Array === \"undefined\"\r\n                ? sizeOrArray\r\n                : new Uint8Array(sizeOrArray);\r\n};\r\n\r\n/**\r\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\r\n * @type {?function(new: Uint8Array, *)}\r\n */\r\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\r\n\r\n/**\r\n * Long.js's Long class if available.\r\n * @type {?function(new: Long)}\r\n */\r\nutil.Long = /* istanbul ignore next */ global.dcodeIO && /* istanbul ignore next */ global.dcodeIO.Long || util.inquire(\"long\");\r\n\r\n/**\r\n * Converts a number or long to an 8 characters long hash string.\r\n * @param {Long|number} value Value to convert\r\n * @returns {string} Hash\r\n */\r\nutil.longToHash = function longToHash(value) {\r\n    return value\r\n        ? util.LongBits.from(value).toHash()\r\n        : util.LongBits.zeroHash;\r\n};\r\n\r\n/**\r\n * Converts an 8 characters long hash string to a long or number.\r\n * @param {string} hash Hash\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long|number} Original value\r\n */\r\nutil.longFromHash = function longFromHash(hash, unsigned) {\r\n    var bits = util.LongBits.fromHash(hash);\r\n    if (util.Long)\r\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\r\n    return bits.toNumber(Boolean(unsigned));\r\n};\r\n\r\n/**\r\n * Merges the properties of the source object into the destination object.\r\n * @param {Object.<string,*>} dst Destination object\r\n * @param {Object.<string,*>} src Source object\r\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\r\n * @returns {Object.<string,*>} Destination object\r\n */\r\nutil.merge = function merge(dst, src, ifNotSet) { // used by converters\r\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\r\n        if (dst[keys[i]] === undefined || !ifNotSet)\r\n            dst[keys[i]] = src[keys[i]];\r\n    return dst;\r\n};\r\n\r\n/**\r\n * Converts the first character of a string to lower case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.lcFirst = function lcFirst(str) {\r\n    return str.charAt(0).toLowerCase() + str.substring(1);\r\n};\r\n\r\n/**\r\n * Builds a getter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {function():string|undefined} Unbound getter\r\n */\r\nutil.oneOfGetter = function getOneOf(fieldNames) {\r\n    var fieldMap = {};\r\n    for (var i = 0; i < fieldNames.length; ++i)\r\n        fieldMap[fieldNames[i]] = 1;\r\n\r\n    /**\r\n     * @returns {string|undefined} Set field name, if any\r\n     * @this Object\r\n     * @ignore\r\n     */\r\n    return function() { // eslint-disable-line consistent-return\r\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\r\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\r\n                return keys[i];\r\n    };\r\n};\r\n\r\n/**\r\n * Builds a setter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {function(?string):undefined} Unbound setter\r\n */\r\nutil.oneOfSetter = function setOneOf(fieldNames) {\r\n\r\n    /**\r\n     * @param {string} name Field name\r\n     * @returns {undefined}\r\n     * @this Object\r\n     * @ignore\r\n     */\r\n    return function(name) {\r\n        for (var i = 0; i < fieldNames.length; ++i)\r\n            if (fieldNames[i] !== name)\r\n                delete this[fieldNames[i]];\r\n    };\r\n};\r\n\r\n/**\r\n * Lazily resolves fully qualified type names against the specified root.\r\n * @param {Root} root Root instanceof\r\n * @param {Object.<number,string|ReflectionObject>} lazyTypes Type names\r\n * @returns {undefined}\r\n */\r\nutil.lazyResolve = function lazyResolve(root, lazyTypes) {\r\n    for (var i = 0; i < lazyTypes.length; ++i) {\r\n        for (var keys = Object.keys(lazyTypes[i]), j = 0; j < keys.length; ++j) {\r\n            var path = lazyTypes[i][keys[j]].split(\".\"),\r\n                ptr  = root;\r\n            while (path.length)\r\n                ptr = ptr[path.shift()];\r\n            lazyTypes[i][keys[j]] = ptr;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Default conversion options used for toJSON implementations. Converts longs, enums and bytes to strings.\r\n * @type {ConversionOptions}\r\n */\r\nutil.toJSONOptions = {\r\n    longs: String,\r\n    enums: String,\r\n    bytes: String\r\n};\r\n\r\nutil._configure = function() {\r\n    var Buffer = util.Buffer;\r\n    if (!Buffer) {\r\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\r\n        return;\r\n    }\r\n    // because node 4.x buffers are incompatible & immutable\r\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\r\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\r\n        /* istanbul ignore next */\r\n        function Buffer_from(value, encoding) {\r\n            return new Buffer(value, encoding);\r\n        };\r\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\r\n        /* istanbul ignore next */\r\n        function Buffer_allocUnsafe(size) {\r\n            return new Buffer(size);\r\n        };\r\n};\r\n","\"use strict\";\r\nmodule.exports = verifier;\r\n\r\nvar Enum      = require(14),\r\n    util      = require(32);\r\n\r\nfunction invalid(field, expected) {\r\n    return field.name + \": \" + expected + (field.repeated && expected !== \"array\" ? \"[]\" : field.map && expected !== \"object\" ? \"{k:\"+field.keyType+\"}\" : \"\") + \" expected\";\r\n}\r\n\r\n/**\r\n * Generates a partial value verifier.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genVerifyValue(gen, field, fieldIndex, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) { gen\r\n            (\"switch(%s){\", ref)\r\n                (\"default:\")\r\n                    (\"return%j\", invalid(field, \"enum value\"));\r\n            for (var keys = Object.keys(field.resolvedType.values), j = 0; j < keys.length; ++j) gen\r\n                (\"case %d:\", field.resolvedType.values[keys[j]]);\r\n            gen\r\n                    (\"break\")\r\n            (\"}\");\r\n        } else gen\r\n            (\"var e=types[%d].verify(%s);\", fieldIndex, ref)\r\n            (\"if(e)\")\r\n                (\"return%j+e\", field.name + \".\");\r\n    } else {\r\n        switch (field.type) {\r\n            case \"int32\":\r\n            case \"uint32\":\r\n            case \"sint32\":\r\n            case \"fixed32\":\r\n            case \"sfixed32\": gen\r\n                (\"if(!util.isInteger(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"integer\"));\r\n                break;\r\n            case \"int64\":\r\n            case \"uint64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n                (\"if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))\", ref, ref, ref, ref)\r\n                    (\"return%j\", invalid(field, \"integer|Long\"));\r\n                break;\r\n            case \"float\":\r\n            case \"double\": gen\r\n                (\"if(typeof %s!==\\\"number\\\")\", ref)\r\n                    (\"return%j\", invalid(field, \"number\"));\r\n                break;\r\n            case \"bool\": gen\r\n                (\"if(typeof %s!==\\\"boolean\\\")\", ref)\r\n                    (\"return%j\", invalid(field, \"boolean\"));\r\n                break;\r\n            case \"string\": gen\r\n                (\"if(!util.isString(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"string\"));\r\n                break;\r\n            case \"bytes\": gen\r\n                (\"if(!(%s&&typeof %s.length===\\\"number\\\"||util.isString(%s)))\", ref, ref, ref)\r\n                    (\"return%j\", invalid(field, \"buffer\"));\r\n                break;\r\n        }\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\n/**\r\n * Generates a partial key verifier.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genVerifyKey(gen, field, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    switch (field.keyType) {\r\n        case \"int32\":\r\n        case \"uint32\":\r\n        case \"sint32\":\r\n        case \"fixed32\":\r\n        case \"sfixed32\": gen\r\n            (\"if(!/^-?(?:0|[1-9][0-9]*)$/.test(%s))\", ref) // it's important not to use any literals here that might be confused with short variable names by pbjs' beautify\r\n                (\"return%j\", invalid(field, \"integer key\"));\r\n            break;\r\n        case \"int64\":\r\n        case \"uint64\":\r\n        case \"sint64\":\r\n        case \"fixed64\":\r\n        case \"sfixed64\": gen\r\n            (\"if(!/^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/.test(%s))\", ref) // see comment above: x is ok, d is not\r\n                (\"return%j\", invalid(field, \"integer|Long key\"));\r\n            break;\r\n        case \"bool\": gen\r\n            (\"if(!/^true|false|0|1$/.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"boolean key\"));\r\n            break;\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\n/**\r\n * Generates a verifier specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction verifier(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n\r\n    if (/* initializes */ !mtype.fieldsArray.length)\r\n        return util.codegen()(\"return null\");\r\n    var gen = util.codegen(\"m\");\r\n\r\n    for (var i = 0; i < mtype._fieldsArray.length; ++i) {\r\n        var field = mtype._fieldsArray[i].resolve(),\r\n            ref   = \"m\" + util.safeProp(field.name);\r\n\r\n        // map fields\r\n        if (field.map) { gen\r\n            (\"if(%s!==undefined){\", ref)\r\n                (\"if(!util.isObject(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"object\"))\r\n                (\"var k=Object.keys(%s)\", ref)\r\n                (\"for(var i=0;i<k.length;++i){\");\r\n                    genVerifyKey(gen, field, \"k[i]\");\r\n                    genVerifyValue(gen, field, i, ref + \"[k[i]]\")\r\n                (\"}\")\r\n            (\"}\");\r\n\r\n        // repeated fields\r\n        } else if (field.repeated) { gen\r\n            (\"if(%s!==undefined){\", ref)\r\n                (\"if(!Array.isArray(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"array\"))\r\n                (\"for(var i=0;i<%s.length;++i){\", ref);\r\n                    genVerifyValue(gen, field, i, ref + \"[i]\")\r\n                (\"}\")\r\n            (\"}\");\r\n\r\n        // required or present fields\r\n        } else {\r\n            if (!field.required) {\r\n                if (field.resolvedType && !(field.resolvedType instanceof Enum)) gen\r\n            (\"if(%s!==undefined&&%s!==null){\", ref, ref);\r\n                else gen\r\n            (\"if(%s!==undefined){\", ref);\r\n            }\r\n                genVerifyValue(gen, field, i, ref);\r\n            if (!field.required) gen\r\n            (\"}\");\r\n        }\r\n    } return gen\r\n    (\"return null\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n}","\"use strict\";\r\nmodule.exports = Writer;\r\n\r\nvar util      = require(34);\r\n\r\nvar BufferWriter; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    base64    = util.base64,\r\n    utf8      = util.utf8;\r\n\r\n/**\r\n * Constructs a new writer operation instance.\r\n * @classdesc Scheduled writer operation.\r\n * @constructor\r\n * @param {function(*, Uint8Array, number)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {*} val Value to write\r\n * @ignore\r\n */\r\nfunction Op(fn, len, val) {\r\n\r\n    /**\r\n     * Function to call.\r\n     * @type {function(Uint8Array, number, *)}\r\n     */\r\n    this.fn = fn;\r\n\r\n    /**\r\n     * Value byte length.\r\n     * @type {number}\r\n     */\r\n    this.len = len;\r\n\r\n    /**\r\n     * Next operation.\r\n     * @type {Writer.Op|undefined}\r\n     */\r\n    this.next = undefined;\r\n\r\n    /**\r\n     * Value to write.\r\n     * @type {*}\r\n     */\r\n    this.val = val; // type varies\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction noop() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Constructs a new writer state instance.\r\n * @classdesc Copied writer state.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {Writer} writer Writer to copy state from\r\n * @private\r\n * @ignore\r\n */\r\nfunction State(writer) {\r\n\r\n    /**\r\n     * Current head.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.head = writer.head;\r\n\r\n    /**\r\n     * Current tail.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.tail = writer.tail;\r\n\r\n    /**\r\n     * Current buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = writer.len;\r\n\r\n    /**\r\n     * Next state.\r\n     * @type {?State}\r\n     */\r\n    this.next = writer.states;\r\n}\r\n\r\n/**\r\n * Constructs a new writer instance.\r\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n */\r\nfunction Writer() {\r\n\r\n    /**\r\n     * Current length.\r\n     * @type {number}\r\n     */\r\n    this.len = 0;\r\n\r\n    /**\r\n     * Operations head.\r\n     * @type {Object}\r\n     */\r\n    this.head = new Op(noop, 0, 0);\r\n\r\n    /**\r\n     * Operations tail\r\n     * @type {Object}\r\n     */\r\n    this.tail = this.head;\r\n\r\n    /**\r\n     * Linked forked states.\r\n     * @type {?Object}\r\n     */\r\n    this.states = null;\r\n\r\n    // When a value is written, the writer calculates its byte length and puts it into a linked\r\n    // list of operations to perform when finish() is called. This both allows us to allocate\r\n    // buffers of the exact required size and reduces the amount of work we have to do compared\r\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\r\n    // part is just a linked list walk calling operations with already prepared values.\r\n}\r\n\r\n/**\r\n * Creates a new writer.\r\n * @function\r\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\r\n */\r\nWriter.create = util.Buffer\r\n    ? function create_buffer_setup() {\r\n        return (Writer.create = function create_buffer() {\r\n            return new BufferWriter();\r\n        })();\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array() {\r\n        return new Writer();\r\n    };\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nWriter.alloc = function alloc(size) {\r\n    return new util.Array(size);\r\n};\r\n\r\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\r\n/* istanbul ignore else */\r\nif (util.Array !== Array)\r\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\r\n\r\n/**\r\n * Pushes a new operation to the queue.\r\n * @param {function(Uint8Array, number, *)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.push = function push(fn, len, val) {\r\n    this.tail = this.tail.next = new Op(fn, len, val);\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\nfunction writeByte(val, buf, pos) {\r\n    buf[pos] = val & 255;\r\n}\r\n\r\nfunction writeVarint32(val, buf, pos) {\r\n    while (val > 127) {\r\n        buf[pos++] = val & 127 | 128;\r\n        val >>>= 7;\r\n    }\r\n    buf[pos] = val;\r\n}\r\n\r\n/**\r\n * Constructs a new varint writer operation instance.\r\n * @classdesc Scheduled varint writer operation.\r\n * @extends Op\r\n * @constructor\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @ignore\r\n */\r\nfunction VarintOp(len, val) {\r\n    this.len = len;\r\n    this.next = undefined;\r\n    this.val = val;\r\n}\r\n\r\nVarintOp.prototype = Object.create(Op.prototype);\r\nVarintOp.prototype.fn = writeVarint32;\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as a varint.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.uint32 = function write_uint32(value) {\r\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\r\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\r\n    this.len += (this.tail = this.tail.next = new VarintOp(\r\n        (value = value >>> 0)\r\n                < 128       ? 1\r\n        : value < 16384     ? 2\r\n        : value < 2097152   ? 3\r\n        : value < 268435456 ? 4\r\n        :                     5,\r\n    value)).len;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as a varint.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.int32 = function write_int32(value) {\r\n    return value < 0\r\n        ? this.push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\r\n        : this.uint32(value);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as a varint, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.sint32 = function write_sint32(value) {\r\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\r\n};\r\n\r\nfunction writeVarint64(val, buf, pos) {\r\n    while (val.hi) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\r\n        val.hi >>>= 7;\r\n    }\r\n    while (val.lo > 127) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = val.lo >>> 7;\r\n    }\r\n    buf[pos++] = val.lo;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as a varint.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.uint64 = function write_uint64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.int64 = Writer.prototype.uint64;\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.sint64 = function write_sint64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a boolish value as a varint.\r\n * @param {boolean} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.bool = function write_bool(value) {\r\n    return this.push(writeByte, 1, value ? 1 : 0);\r\n};\r\n\r\nfunction writeFixed32(val, buf, pos) {\r\n    buf[pos++] =  val         & 255;\r\n    buf[pos++] =  val >>> 8   & 255;\r\n    buf[pos++] =  val >>> 16  & 255;\r\n    buf[pos  ] =  val >>> 24;\r\n}\r\n\r\n/**\r\n * Writes a 32 bit value as fixed 32 bits.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.fixed32 = function write_fixed32(value) {\r\n    return this.push(writeFixed32, 4, value >>> 0);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as fixed 32 bits, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.sfixed32 = function write_sfixed32(value) {\r\n    return this.push(writeFixed32, 4, value << 1 ^ value >> 31);\r\n};\r\n\r\n/**\r\n * Writes a 64 bit value as fixed 64 bits.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.fixed64 = function write_fixed64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this.push(writeFixed32, 4, bits.lo).push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\n/**\r\n * Writes a 64 bit value as fixed 64 bits, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.sfixed64 = function write_sfixed64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this.push(writeFixed32, 4, bits.lo).push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\nvar writeFloat = typeof Float32Array !== \"undefined\"\r\n    ? (function() {\r\n        var f32 = new Float32Array(1),\r\n            f8b = new Uint8Array(f32.buffer);\r\n        f32[0] = -0;\r\n        return f8b[3] // already le?\r\n            ? function writeFloat_f32(val, buf, pos) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos  ] = f8b[3];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function writeFloat_f32_le(val, buf, pos) {\r\n                f32[0] = val;\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function writeFloat_ieee754(value, buf, pos) {\r\n        var sign = value < 0 ? 1 : 0;\r\n        if (sign)\r\n            value = -value;\r\n        if (value === 0)\r\n            writeFixed32(1 / value > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n        else if (isNaN(value))\r\n            writeFixed32(2147483647, buf, pos);\r\n        else if (value > 3.4028234663852886e+38) // +-Infinity\r\n            writeFixed32((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n        else if (value < 1.1754943508222875e-38) // denormal\r\n            writeFixed32((sign << 31 | Math.round(value / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n        else {\r\n            var exponent = Math.floor(Math.log(value) / Math.LN2),\r\n                mantissa = Math.round(value * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n            writeFixed32((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n        }\r\n    };\r\n\r\n/**\r\n * Writes a float (32 bit).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.float = function write_float(value) {\r\n    return this.push(writeFloat, 4, value);\r\n};\r\n\r\nvar writeDouble = typeof Float64Array !== \"undefined\"\r\n    ? (function() {\r\n        var f64 = new Float64Array(1),\r\n            f8b = new Uint8Array(f64.buffer);\r\n        f64[0] = -0;\r\n        return f8b[7] // already le?\r\n            ? function writeDouble_f64(val, buf, pos) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[0];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos  ] = f8b[7];\r\n            }\r\n            /* istanbul ignore next */\r\n            : function writeDouble_f64_le(val, buf, pos) {\r\n                f64[0] = val;\r\n                buf[pos++] = f8b[7];\r\n                buf[pos++] = f8b[6];\r\n                buf[pos++] = f8b[5];\r\n                buf[pos++] = f8b[4];\r\n                buf[pos++] = f8b[3];\r\n                buf[pos++] = f8b[2];\r\n                buf[pos++] = f8b[1];\r\n                buf[pos  ] = f8b[0];\r\n            };\r\n    })()\r\n    /* istanbul ignore next */\r\n    : function writeDouble_ieee754(value, buf, pos) {\r\n        var sign = value < 0 ? 1 : 0;\r\n        if (sign)\r\n            value = -value;\r\n        if (value === 0) {\r\n            writeFixed32(0, buf, pos);\r\n            writeFixed32(1 / value > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + 4);\r\n        } else if (isNaN(value)) {\r\n            writeFixed32(4294967295, buf, pos);\r\n            writeFixed32(2147483647, buf, pos + 4);\r\n        } else if (value > 1.7976931348623157e+308) { // +-Infinity\r\n            writeFixed32(0, buf, pos);\r\n            writeFixed32((sign << 31 | 2146435072) >>> 0, buf, pos + 4);\r\n        } else {\r\n            var mantissa;\r\n            if (value < 2.2250738585072014e-308) { // denormal\r\n                mantissa = value / 5e-324;\r\n                writeFixed32(mantissa >>> 0, buf, pos);\r\n                writeFixed32((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + 4);\r\n            } else {\r\n                var exponent = Math.floor(Math.log(value) / Math.LN2);\r\n                if (exponent === 1024)\r\n                    exponent = 1023;\r\n                mantissa = value * Math.pow(2, -exponent);\r\n                writeFixed32(mantissa * 4503599627370496 >>> 0, buf, pos);\r\n                writeFixed32((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + 4);\r\n            }\r\n        }\r\n    };\r\n\r\n/**\r\n * Writes a double (64 bit float).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.double = function write_double(value) {\r\n    return this.push(writeDouble, 8, value);\r\n};\r\n\r\nvar writeBytes = util.Array.prototype.set\r\n    ? function writeBytes_set(val, buf, pos) {\r\n        buf.set(val, pos); // also works for plain array values\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytes_for(val, buf, pos) {\r\n        for (var i = 0; i < val.length; ++i)\r\n            buf[pos + i] = val[i];\r\n    };\r\n\r\n/**\r\n * Writes a sequence of bytes.\r\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.bytes = function write_bytes(value) {\r\n    var len = value.length >>> 0;\r\n    if (!len)\r\n        return this.push(writeByte, 1, 0);\r\n    if (util.isString(value)) {\r\n        var buf = Writer.alloc(len = base64.length(value));\r\n        base64.decode(value, buf, 0);\r\n        value = buf;\r\n    }\r\n    return this.uint32(len).push(writeBytes, len, value);\r\n};\r\n\r\n/**\r\n * Writes a string.\r\n * @param {string} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.string = function write_string(value) {\r\n    var len = utf8.length(value);\r\n    return len\r\n        ? this.uint32(len).push(utf8.write, len, value)\r\n        : this.push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Forks this writer's state by pushing it to a stack.\r\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.fork = function fork() {\r\n    this.states = new State(this);\r\n    this.head = this.tail = new Op(noop, 0, 0);\r\n    this.len = 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets this instance to the last state.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.reset = function reset() {\r\n    if (this.states) {\r\n        this.head   = this.states.head;\r\n        this.tail   = this.states.tail;\r\n        this.len    = this.states.len;\r\n        this.states = this.states.next;\r\n    } else {\r\n        this.head = this.tail = new Op(noop, 0, 0);\r\n        this.len  = 0;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.ldelim = function ldelim() {\r\n    var head = this.head,\r\n        tail = this.tail,\r\n        len  = this.len;\r\n    this.reset().uint32(len);\r\n    if (len) {\r\n        this.tail.next = head.next; // skip noop\r\n        this.tail = tail;\r\n        this.len += len;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @returns {Uint8Array} Finished buffer\r\n */\r\nWriter.prototype.finish = function finish() {\r\n    var head = this.head.next, // skip noop\r\n        buf  = this.constructor.alloc(this.len),\r\n        pos  = 0;\r\n    while (head) {\r\n        head.fn(head.val, buf, pos);\r\n        pos += head.len;\r\n        head = head.next;\r\n    }\r\n    // this.head = this.tail = null;\r\n    return buf;\r\n};\r\n\r\nWriter._configure = function(BufferWriter_) {\r\n    BufferWriter = BufferWriter_;\r\n};\r\n","\"use strict\";\r\nmodule.exports = BufferWriter;\r\n\r\n// extends Writer\r\nvar Writer = require(36);\r\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\r\n\r\nvar util = require(34);\r\n\r\nvar Buffer = util.Buffer;\r\n\r\n/**\r\n * Constructs a new buffer writer instance.\r\n * @classdesc Wire format writer using node buffers.\r\n * @extends Writer\r\n * @constructor\r\n */\r\nfunction BufferWriter() {\r\n    Writer.call(this);\r\n}\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Buffer} Buffer\r\n */\r\nBufferWriter.alloc = function alloc_buffer(size) {\r\n    return (BufferWriter.alloc = util._Buffer_allocUnsafe)(size);\r\n};\r\n\r\nvar writeBytesBuffer = Buffer && Buffer.prototype instanceof Uint8Array && Buffer.prototype.set.name === \"set\"\r\n    ? function writeBytesBuffer_set(val, buf, pos) {\r\n        buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\r\n                           // also works for plain array values\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytesBuffer_copy(val, buf, pos) {\r\n        if (val.copy) // Buffer values\r\n            val.copy(buf, pos, 0, val.length);\r\n        else for (var i = 0; i < val.length;) // plain array values\r\n            buf[pos++] = val[i++];\r\n    };\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\r\n    if (util.isString(value))\r\n        value = util._Buffer_from(value, \"base64\");\r\n    var len = value.length >>> 0;\r\n    this.uint32(len);\r\n    if (len)\r\n        this.push(writeBytesBuffer, len, value);\r\n    return this;\r\n};\r\n\r\nfunction writeStringBuffer(val, buf, pos) {\r\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\r\n        util.utf8.write(val, buf, pos);\r\n    else\r\n        buf.utf8Write(val, pos);\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriter.prototype.string = function write_string_buffer(value) {\r\n    var len = Buffer.byteLength(value);\r\n    this.uint32(len);\r\n    if (len)\r\n        this.push(writeStringBuffer, len, value);\r\n    return this;\r\n};\r\n\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @name BufferWriter#finish\r\n * @function\r\n * @returns {Buffer} Finished buffer\r\n */\r\n"],"sourceRoot":"."}