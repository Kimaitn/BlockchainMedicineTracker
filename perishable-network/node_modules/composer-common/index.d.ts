export class AclFile {
  constructor(arg0?: any, arg1?: any, arg2?: any);
  getIdentifier(): any;
  accept(arg0?: any, arg1?: any): any;
  getModelManager(): any;
  validate(): any;
  getAclRules(): any;
  getDefinitions(): any;
}
export class AclManager {
  constructor(arg0?: any);
  accept(arg0?: any, arg1?: any): any;
  createAclFile(arg0?: any, arg1?: any): any;
  setAclFile(arg0?: any): any;
  getAclFile(): any;
  getAclRules(): any;
}
export class AclRule {
  constructor(arg0?: any, arg1?: any);
  accept(arg0?: any, arg1?: any): any;
  getAclFile(): any;
  process(): any;
  validate(): any;
  getName(): any;
  getNoun(): any;
  getVerbs(): any;
  getParticipant(): any;
  getTransaction(): any;
  getPredicate(): any;
  getAction(): any;
  getDescription(): any;
}
export class AssetDeclaration {
  constructor(arg0?: any, arg1?: any);
  isRelationshipTarget(): any;
  getSystemType(): any;
  validate(): any;
}
export class BaseException {
  constructor(arg0?: any);
}
export class BaseFileException {
  constructor(arg0?: any, arg1?: any, arg2?: any);
  getFileLocation(): any;
  getShortMessage(): any;
}
export class BusinessNetworkCardStore {
  static getDefaultCardName(arg0?: any): any;
  constructor();
  get(arg0?: any): any;
  put(arg0?: any, arg1?: any): any;
  has(arg0?: any): any;
  getAll(): any;
  delete(arg0?: any): any;
}
export class BusinessNetworkDefinition {
  static fromArchive(arg0?: any): any;
  static _getPackageJson(arg0?: any): any;
  static _processDependencies(arg0?: any, arg1?: any, arg2?: any, arg3?: any, arg4?: any): any;
  static _processModelFiles(arg0?: any, arg1?: any, arg2?: any, arg3?: any): any;
  static _processScriptFiles(arg0?: any, arg1?: any, arg2?: any, arg3?: any): any;
  static _processPermissionsAcl(arg0?: any, arg1?: any, arg2?: any, arg3?: any): any;
  static _processQueryFile(arg0?: any, arg1?: any, arg2?: any, arg3?: any): any;
  static _processReadme(arg0?: any): any;
  static fromDirectory(arg0?: any, arg1?: any): any;
  static processDirectory(arg0?: any, arg1?: any): any;
  static processFile(arg0?: any, arg1?: any): any;
  static walkSync(arg0?: any, arg1?: any, arg2?: any): any;
  constructor(arg0?: any, arg1?: any, arg2?: any, arg3?: any);
  getIdentifier(): any;
  getMetadata(): any;
  getName(): any;
  getVersion(): any;
  getDescription(): any;
  toArchive(arg0?: any): any;
  accept(arg0?: any, arg1?: any): any;
  getIntrospector(): any;
  getFactory(): any;
  getSerializer(): any;
  getScriptManager(): any;
  getAclManager(): any;
  getModelManager(): any;
  getQueryManager(): any;
  setReadme(arg0?: any): any;
  setPackageJson(arg0?: any): any;
}
export class BusinessNetworkMetadata {
  constructor(arg0?: any, arg1?: any);
  _validName(arg0?: any): any;
  getREADME(): any;
  getPackageJson(): any;
  getName(): any;
  getDescription(): any;
  getVersion(): any;
  getIdentifier(): any;
}
export class ClassDeclaration {
  constructor(arg0?: any, arg1?: any);
  getModelFile(): any;
  process(): any;
  _resolveSuperType(): any;
  validate(): any;
  getSystemType(): any;
  isAbstract(): any;
  isEnum(): any;
  isConcept(): any;
  isEvent(): any;
  isRelationshipTarget(): any;
  isSystemRelationshipTarget(): any;
  isSystemType(): any;
  isSystemCoreType(): any;
  getName(): any;
  getNamespace(): any;
  getFullyQualifiedName(): any;
  getIdentifierFieldName(): any;
  getOwnProperty(arg0?: any): any;
  getOwnProperties(): any;
  getSuperType(): any;
  getSuperTypeDeclaration(): any;
  getAssignableClassDeclarations(): any;
  getAllSuperTypeDeclarations(): any;
  getProperty(arg0?: any): any;
  getProperties(): any;
  getNestedProperty(arg0?: any): any;
  toString(): any;
}
export class Concept {
  constructor(arg0?: any, arg1?: any, arg2?: any, arg3?: any);
  isConcept(): any;
}
export class ConceptDeclaration {
  constructor(arg0?: any, arg1?: any);
  isConcept(): any;
}
export class Connection {
  constructor(arg0?: any, arg1?: any, arg2?: any);
  getConnectionManager(): any;
  getIdentifier(): any;
  disconnect(): any;
  _disconnect(arg0?: any): any;
  login(arg0?: any, arg1?: any): any;
  _login(arg0?: any, arg1?: any, arg2?: any): any;
  install(arg0?: any, arg1?: any, arg2?: any): any;
  _install(arg0?: any, arg1?: any, arg2?: any, arg3?: any): any;
  start(arg0?: any, arg1?: any, arg2?: any, arg3?: any): any;
  _start(arg0?: any, arg1?: any, arg2?: any, arg3?: any, arg4?: any): any;
  deploy(arg0?: any, arg1?: any, arg2?: any, arg3?: any): any;
  _deploy(arg0?: any, arg1?: any, arg2?: any, arg3?: any, arg4?: any): any;
  update(arg0?: any, arg1?: any): any;
  reset(arg0?: any, arg1?: any): any;
  setLogLevel(arg0?: any, arg1?: any): any;
  upgrade(arg0?: any): any;
  _upgrade(arg0?: any, arg1?: any): any;
  undeploy(arg0?: any, arg1?: any): any;
  _undeploy(arg0?: any, arg1?: any, arg2?: any): any;
  ping(arg0?: any): any;
  _ping(arg0?: any, arg1?: any): any;
  queryChainCode(arg0?: any, arg1?: any, arg2?: any): any;
  _queryChainCode(arg0?: any, arg1?: any, arg2?: any, arg3?: any): any;
  invokeChainCode(arg0?: any, arg1?: any, arg2?: any, arg3?: any): any;
  _invokeChainCode(arg0?: any, arg1?: any, arg2?: any, arg3?: any, arg4?: any): any;
  createIdentity(arg0?: any, arg1?: any, arg2?: any): any;
  _createIdentity(arg0?: any, arg1?: any, arg2?: any, arg3?: any): any;
  list(arg0?: any): any;
  _list(arg0?: any, arg1?: any): any;
  createTransactionId(arg0?: any): any;
  _createTransactionId(arg0?: any, arg1?: any): any;
}
export class ConnectionManager {
  constructor(arg0?: any);
  getConnectionProfileManager(): any;
  connect(arg0?: any, arg1?: any, arg2?: any): any;
  _connect(arg0?: any, arg1?: any, arg2?: any, arg3?: any): any;
  importIdentity(arg0?: any, arg1?: any, arg2?: any, arg3?: any, arg4?: any): any;
  _importIdentity(arg0?: any, arg1?: any, arg2?: any, arg3?: any, arg4?: any, arg5?: any): any;
  requestIdentity(arg0?: any, arg1?: any, arg2?: any, arg3?: any): any;
  _requestIdentity(arg0?: any, arg1?: any, arg2?: any, arg3?: any, arg4?: any): any;
  exportIdentity(arg0?: any, arg1?: any, arg2?: any): any;
  _exportIdentity(arg0?: any, arg1?: any, arg2?: any, arg3?: any): any;
  removeIdentity(arg0?: any, arg1?: any, arg2?: any): any;
  _removeIdentity(arg0?: any, arg1?: any, arg2?: any, arg3?: any): any;
}
export class ConnectionProfileManager {
  static registerConnectionManagerLoader(arg0?: any): any;
  static registerConnectionManager(arg0?: any, arg1?: any): any;
  static removeAllConnectionManagers(): any;
  constructor();
  addConnectionManager(arg0?: any, arg1?: any): any;
  getConnectionManagerByType(arg0?: any): any;
  connect(arg0?: any, arg1?: any, arg2?: any): any;
  connectWithData(arg0?: any, arg1?: any, arg2?: any): any;
}
export class ConsoleLogger {
  constructor();
  format(arg0?: any, arg1?: any, arg2?: any): any;
  log(arg0?: any, arg1?: any, arg2?: any, arg3?: any): any;
}
export class EnumDeclaration {
  constructor(arg0?: any, arg1?: any);
  isEnum(): any;
  toString(): any;
}
export class EnumValueDeclaration {
  constructor(arg0?: any, arg1?: any);
  validate(arg0?: any): any;
}
export class EventDeclaration {
  constructor(arg0?: any, arg1?: any);
  getSystemType(): any;
  validate(): any;
  isEvent(): any;
}
export class Factory {
  constructor(arg0?: any);
  newResource(arg0?: any, arg1?: any, arg2?: any, arg3?: any): any;
  newConcept(arg0?: any, arg1?: any, arg2?: any): any;
  newRelationship(arg0?: any, arg1?: any, arg2?: any): any;
  newTransaction(arg0?: any, arg1?: any, arg2?: any, arg3?: any): any;
  newEvent(arg0?: any, arg1?: any, arg2?: any, arg3?: any): any;
  initializeNewObject(arg0?: any, arg1?: any, arg2?: any): any;
  parseGenerateOptions(arg0?: any): any;
}
export class Field {
  constructor(arg0?: any, arg1?: any);
  process(): any;
  getValidator(): any;
  getDefaultValue(): any;
  toString(): any;
}
export class FileSystemCardStore {
  constructor(arg0?: any);
  _cardPath(arg0?: any): any;
  get(arg0?: any): any;
  put(arg0?: any, arg1?: any): any;
  has(arg0?: any): any;
  getAll(): any;
  delete(arg0?: any): any;
}
export class FileWallet {
  static getHomeDirectory(): any;
  constructor(arg0?: any);
  list(): any;
  contains(arg0?: any): any;
  get(arg0?: any): any;
  add(arg0?: any, arg1?: any): any;
  update(arg0?: any, arg1?: any): any;
  remove(arg0?: any): any;
}
export class FileWriter {
  constructor(arg0?: any);
  openFile(arg0?: any): any;
  openRelativeFile(arg0?: any, arg1?: any): any;
  writeLine(arg0?: any, arg1?: any): any;
  writeBeforeLine(arg0?: any, arg1?: any): any;
  closeFile(): any;
}
export class FunctionDeclaration {
  constructor(arg0?: any, arg1?: any, arg2?: any, arg3?: any, arg4?: any, arg5?: any, arg6?: any, arg7?: any, arg8?: any, arg9?: any);
  accept(arg0?: any, arg1?: any): any;
  getFunctionText(): any;
  getThrows(): any;
  getLanguage(): any;
  getDecorators(): any;
  getVisibility(): any;
  getReturnType(): any;
  validate(): any;
  getName(): any;
  getTransactionDeclarationName(): any;
  getParameterNames(): any;
  getParameterTypes(): any;
}
export class Globalize {
  static messageFormatter(arg0?: any): any;
  static formatMessage(arg0?: any): any;
  constructor(arg0?: any);
}
export class IdCard {
  static fromArchive(arg0?: any): any;
  static fromDirectory(arg0?: any, arg1?: any): any;
  constructor(arg0?: any, arg1?: any);
  getUserName(): any;
  getDescription(): any;
  getBusinessNetworkName(): any;
  getConnectionProfile(): any;
  getCredentials(): any;
  setCredentials(arg0?: any): any;
  getEnrollmentCredentials(): any;
  getRoles(): any;
  toArchive(arg0?: any): any;
  toDirectory(arg0?: any, arg1?: any): any;
}
export class Introspector {
  constructor(arg0?: any);
  accept(arg0?: any, arg1?: any): any;
  getClassDeclarations(): any;
  getClassDeclaration(arg0?: any): any;
  getModelManager(): any;
}
export class Limit {
  constructor(arg0?: any, arg1?: any);
  accept(arg0?: any, arg1?: any): any;
  getSelect(): any;
  process(): any;
  validate(): any;
  getAST(): any;
}
export class Logger {
  static setLogLevel(arg0?: any): any;
  static getSelectionTree(): any;
  static setSelectionTree(arg0?: any): any;
  static getFunctionalLogger(): any;
  static setFunctionalLogger(arg0?: any): any;
  static getDebugEnv(): any;
  static getLoggerConfig(): any;
  static getLog(arg0?: any): any;
  static _setupLog(arg0?: any): any;
  static _parseLoggerConfig(arg0?: any): any;
  static _loadLogger(arg0?: any): any;
  static reset(): any;
  constructor(arg0?: any);
  padRight(arg0?: any, arg1?: any): any;
  intlog(arg0?: any, arg1?: any, arg2?: any): any;
  _intLogMain(arg0?: any, arg1?: any, arg2?: any): any;
  _intLogFirst(arg0?: any, arg1?: any, arg2?: any): any;
  debug(arg0?: any, arg1?: any, arg2?: any): any;
  warn(arg0?: any, arg1?: any, arg2?: any): any;
  info(arg0?: any, arg1?: any, arg2?: any): any;
  verbose(arg0?: any, arg1?: any, arg2?: any): any;
  error(arg0?: any, arg1?: any, arg2?: any): any;
  entry(arg0?: any, arg1?: any): any;
  exit(arg0?: any, arg1?: any): any;
}
export class LoopbackVisitor {
  static toLoopbackType(arg0?: any): any;
  constructor(arg0?: any);
  visit(arg0?: any, arg1?: any): any;
  visitModelManager(arg0?: any, arg1?: any): any;
  visitModelFile(arg0?: any, arg1?: any): any;
  visitAssetDeclaration(arg0?: any, arg1?: any): any;
  visitParticipantDeclaration(arg0?: any, arg1?: any): any;
  visitConceptDeclaration(arg0?: any, arg1?: any): any;
  visitTransactionDeclaration(arg0?: any, arg1?: any): any;
  visitEventDeclaration(arg0?: any, arg1?: any): any;
  visitClassDeclarationCommon(arg0?: any, arg1?: any, arg2?: any): any;
  visitField(arg0?: any, arg1?: any): any;
  visitEnumDeclaration(arg0?: any, arg1?: any): any;
  visitEnumValueDeclaration(arg0?: any, arg1?: any): any;
  visitRelationshipDeclaration(arg0?: any, arg1?: any): any;
}
export class MemoryCardStore {
  constructor();
  get(arg0?: any): any;
  put(arg0?: any, arg1?: any): any;
  has(arg0?: any): any;
  getAll(): any;
  delete(arg0?: any): any;
}
export class ModelFile {
  constructor(arg0?: any, arg1?: any, arg2?: any);
  accept(arg0?: any, arg1?: any): any;
  getModelManager(): any;
  getImports(): any;
  validate(): any;
  resolveType(arg0?: any, arg1?: any): any;
  isLocalType(arg0?: any): any;
  isImportedType(arg0?: any): any;
  resolveImport(arg0?: any): any;
  isDefined(arg0?: any): any;
  getType(arg0?: any): any;
  getFullyQualifiedTypeName(arg0?: any): any;
  getLocalType(arg0?: any): any;
  getAssetDeclaration(arg0?: any): any;
  getTransactionDeclaration(arg0?: any): any;
  getEventDeclaration(arg0?: any): any;
  getParticipantDeclaration(arg0?: any): any;
  getNamespace(): any;
  getName(): any;
  getAssetDeclarations(): any;
  getTransactionDeclarations(): any;
  getEventDeclarations(): any;
  getParticipantDeclarations(): any;
  getConceptDeclarations(): any;
  getEnumDeclarations(): any;
  getDeclarations(arg0?: any): any;
  getAllDeclarations(): any;
  getDefinitions(): any;
  isSystemModelFile(): any;
}
export class ModelManager {
  constructor();
  addSystemModels(): any;
  accept(arg0?: any, arg1?: any): any;
  validateModelFile(arg0?: any, arg1?: any): any;
  addModelFile(arg0?: any, arg1?: any): any;
  updateModelFile(arg0?: any, arg1?: any): any;
  deleteModelFile(arg0?: any): any;
  addModelFiles(arg0?: any, arg1?: any): any;
  getModelFiles(): any;
  resolveType(arg0?: any, arg1?: any): any;
  clearModelFiles(): any;
  getModelFile(arg0?: any): any;
  getNamespaces(): any;
  getType(arg0?: any): any;
  getSystemTypes(): any;
  getAssetDeclarations(): any;
  getTransactionDeclarations(): any;
  getEventDeclarations(): any;
  getParticipantDeclarations(): any;
  getEnumDeclarations(): any;
  getConceptDeclarations(): any;
}
export class ModelUtil {
  static getShortName(arg0?: any): any;
  static isWildcardName(arg0?: any): any;
  static isRecursiveWildcardName(arg0?: any): any;
  static isMatchingType(arg0?: any, arg1?: any): any;
  static getNamespace(arg0?: any): any;
  static getSystemNamespace(): any;
  static isPrimitiveType(arg0?: any): any;
  static isAssignableTo(arg0?: any, arg1?: any, arg2?: any): any;
  static capitalizeFirstLetter(arg0?: any): any;
  static isEnum(arg0?: any): any;
  static getFullyQualifiedName(arg0?: any, arg1?: any): any;
  constructor();
}
export class OrderBy {
  constructor(arg0?: any, arg1?: any);
  accept(arg0?: any, arg1?: any): any;
  getSelect(): any;
  process(): any;
  validate(): any;
  getSortCriteria(): any;
}
export class ParticipantDeclaration {
  constructor(arg0?: any, arg1?: any);
  isRelationshipTarget(): any;
  getSystemType(): any;
  validate(): any;
}
export class Property {
  constructor(arg0?: any, arg1?: any);
  getParent(): any;
  process(): any;
  validate(arg0?: any): any;
  getName(): any;
  getType(): any;
  isOptional(): any;
  getFullyQualifiedTypeName(): any;
  getFullyQualifiedName(): any;
  getNamespace(): any;
  isArray(): any;
  isTypeEnum(): any;
  isPrimitive(): any;
}
export class Query {
  static buildQuery(arg0?: any, arg1?: any, arg2?: any, arg3?: any): any;
  constructor(arg0?: any, arg1?: any);
  accept(arg0?: any, arg1?: any): any;
  getQueryFile(): any;
  process(): any;
  validate(): any;
  getName(): any;
  getDescription(): any;
  getSelect(): any;
}
export class QueryAnalyzer {
  constructor(arg0?: any);
  analyze(): any;
  visit(arg0?: any, arg1?: any): any;
  visitQuery(arg0?: any, arg1?: any): any;
  visitSelect(arg0?: any, arg1?: any): any;
  visitWhere(arg0?: any, arg1?: any): any;
  visitOrderBy(arg0?: any, arg1?: any): any;
  visitLimit(arg0?: any, arg1?: any): any;
  visitSkip(arg0?: any, arg1?: any): any;
  visitBinaryExpression(arg0?: any, arg1?: any): any;
  visitArrayCombinationOperator(arg0?: any, arg1?: any): any;
  visitContainsOperator(arg0?: any, arg1?: any): any;
  visitConditionOperator(arg0?: any, arg1?: any): any;
  visitIdentifier(arg0?: any, arg1?: any): any;
  visitLiteral(arg0?: any, arg1?: any): any;
  visitArrayExpression(arg0?: any, arg1?: any): any;
  visitMemberExpression(arg0?: any, arg1?: any): any;
  getParameterType(arg0?: any, arg1?: any): any;
}
export class QueryFile {
  constructor(arg0?: any, arg1?: any, arg2?: any);
  getIdentifier(): any;
  accept(arg0?: any, arg1?: any): any;
  getModelManager(): any;
  validate(): any;
  getQueries(): any;
  getDefinitions(): any;
  buildQuery(arg0?: any, arg1?: any, arg2?: any): any;
}
export class QueryManager {
  constructor(arg0?: any);
  accept(arg0?: any, arg1?: any): any;
  createQueryFile(arg0?: any, arg1?: any): any;
  setQueryFile(arg0?: any): any;
  getQueryFile(): any;
  getQueries(): any;
  deleteQueryFile(): any;
  getQuery(arg0?: any): any;
}
export class Relationship {
  static fromURI(arg0?: any, arg1?: any, arg2?: any, arg3?: any): any;
  constructor(arg0?: any, arg1?: any, arg2?: any, arg3?: any, arg4?: any);
  toString(): any;
  isRelationship(): any;
}
export class RelationshipDeclaration {
  constructor(arg0?: any, arg1?: any);
  validate(arg0?: any): any;
  toString(): any;
}
export class Resource {
  constructor(arg0?: any, arg1?: any, arg2?: any, arg3?: any, arg4?: any);
  toString(): any;
  isResource(): any;
}
export class Script {
  constructor(arg0?: any, arg1?: any, arg2?: any, arg3?: any);
  accept(arg0?: any, arg1?: any): any;
  getIdentifier(): any;
  getName(): any;
  getLanguage(): any;
  getContents(): any;
  getFunctionDeclarations(): any;
  getTokens(): any;
}
export class ScriptManager {
  constructor(arg0?: any);
  accept(arg0?: any, arg1?: any): any;
  createScript(arg0?: any, arg1?: any, arg2?: any): any;
  addScript(arg0?: any): any;
  updateScript(arg0?: any): any;
  deleteScript(arg0?: any): any;
  getScripts(): any;
  clearScripts(): any;
  getScript(arg0?: any): any;
  getScriptIdentifiers(): any;
}
export class SecurityContext {
  constructor(arg0?: any);
  getConnection(): any;
  getUser(): any;
}
export class SecurityException {
  constructor(arg0?: any);
}
export class Select {
  constructor(arg0?: any, arg1?: any);
  accept(arg0?: any, arg1?: any): any;
  getQuery(): any;
  process(): any;
  validate(): any;
  getResource(): any;
  getResourceClassDeclaration(): any;
  getRegistry(): any;
  getWhere(): any;
  getOrderBy(): any;
  getLimit(): any;
  getSkip(): any;
  getText(): any;
  getAST(): any;
}
export class Serializer {
  constructor(arg0?: any, arg1?: any);
  toJSON(arg0?: any, arg1?: any): any;
  fromJSON(arg0?: any, arg1?: any): any;
}
export class Skip {
  constructor(arg0?: any, arg1?: any);
  accept(arg0?: any, arg1?: any): any;
  getSelect(): any;
  process(): any;
  validate(): any;
  getAST(): any;
}
export class Sort {
  constructor(arg0?: any, arg1?: any);
  accept(arg0?: any, arg1?: any): any;
  getOrderBy(): any;
  process(): any;
  validate(): any;
  getPropertyPath(): any;
  getDirection(): any;
}
export class TransactionDeclaration {
  constructor(arg0?: any, arg1?: any);
  getSystemType(): any;
  validate(): any;
}
export class TypescriptVisitor {
  constructor();
  visit(arg0?: any, arg1?: any): any;
  visitBusinessNetworkDefinition(arg0?: any, arg1?: any): any;
  visitModelManager(arg0?: any, arg1?: any): any;
  visitModelFile(arg0?: any, arg1?: any): any;
  visitEnumDeclaration(arg0?: any, arg1?: any): any;
  visitClassDeclaration(arg0?: any, arg1?: any): any;
  visitField(arg0?: any, arg1?: any): any;
  visitEnumValueDeclaration(arg0?: any, arg1?: any): any;
  visitRelationship(arg0?: any, arg1?: any): any;
  toTsType(arg0?: any): any;
}
export class Util {
  static securityCheck(arg0?: any): any;
  static queryChainCode(arg0?: any, arg1?: any, arg2?: any): any;
  static invokeChainCode(arg0?: any, arg1?: any, arg2?: any, arg3?: any): any;
  static isNull(arg0?: any): any;
  static createTransactionId(arg0?: any): any;
  static homeDirectory(): any;
  constructor();
}
export class Wallet {
  static getWallet(): any;
  static setWallet(arg0?: any): any;
  constructor();
  list(): any;
  contains(arg0?: any): any;
  get(arg0?: any): any;
  add(arg0?: any, arg1?: any): any;
  update(arg0?: any, arg1?: any): any;
  remove(arg0?: any): any;
}
export class Where {
  constructor(arg0?: any, arg1?: any);
  accept(arg0?: any, arg1?: any): any;
  getSelect(): any;
  process(): any;
  validate(): any;
  getAST(): any;
}
export class Writer {
  constructor();
  writeBeforeLine(arg0?: any, arg1?: any): any;
  writeLine(arg0?: any, arg1?: any): any;
  getLineCount(): any;
  writeIndented(arg0?: any, arg1?: any): any;
  write(arg0?: any): any;
  getBuffer(): any;
  clearBuffer(): any;
}
