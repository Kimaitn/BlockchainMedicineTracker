/**
  * A business network for shipping perishable goods
  * The cargo is temperature controlled and contracts
  * can be negociated based on the temperature
  * readings received for the cargo
  */

namespace org.mat

/**
 * A concept for a simple street address
 */
concept Address {
  o String city
  o String country
  o String street
  o String zip
}

/**
 * The status of a shipment
 */
enum Status {
  o CREATED
  o IN_TRANSIT
  o ARRIVED
}

enum BusinessType {
  o Manufacturer
  o Retailer
  o Carrier
}

/**
 * MAYBE
 */
enum UoM {
  o mL
  o g
}

/**
 * The commodity is pretty much the product type that jasper had
 * the idea is that a commodity is a drug type such as adderall and 
 * tylenol. You would then have it's name that they call it. the UoM 
 * mL for liquids and g for tablets/powders. THe commoditymedid is used
 * to go into the lookup table and find the commodity name
 * ProductType --> Commodity
 */
asset ItemType identified by itemTypeId {
  o String itemTypeId
  o String itemTypeName
  o UoM itemTypeUoM
  o Integer itemTypeMedId
}

/**
 * An item is the actual product. Such as a bottle of tylenol that contains
 * 1000 mL. The relationship to the commodity type allows us to simply send a 
 * parameter with the commodity identifier number and fetch the data. 
 */
asset Item identified by itemId {
  o String itemId
  o Double itemAmount
  o String packageType 
  o Business currentOwner
  --> ItemType itemType
}
/**
 * This is an order, an order can have mulitple items in it
 */
asset Order identified by orderId {
  o String orderId
  o String requester
  o String provider
  o Address destinationAddress
  o Address sourceAddress
  o Address[] locations
  o Address billingAddress
  o Status status
  o Business receiver
  o Business sender
  --> Contract[] itemContracts
}

/**
 * shipments can have multiple orders since multiple orders may be going to the same
 * place or shipped together since they are near each other
 */
asset Shipment identified by shipmentId {
  o String shipmentId
  o Status status
  o Business sender
  o Business receiver
  o Address destinationAddress
  o Address sourceAddress
  o Address[] locations
  --> Order[] orders
}

/**
 * Defines a contract between a Manufacturer and an Retailer to ship using
 * a Carrier, paying a set unit price. The unit price is multiplied by
 * a penality factor proportional to the deviation from the min and max
 * negociated temperatures for the shipment.
 * A contract will be made for each itemType. This is the agreement of what price will be paid. 
 */
asset Contract identified by contractId {
  o String contractId
  --> Business business
  --> Item[] items //these all have to be the same - in the logic file we have to ensure that all items in the contract are                     the same itemType
  o DateTime requestedArrivalDateTime
  o DateTime actualArrivalDateTime
  o Double unitPrice
  o Double estimatedPrice
  o Double minPrice optional
  o Double maxPrice optional
  o Double minPenaltyFactor optional
  o Double maxPenaltyFactor optional
  o Double pricePaid 
}

/**
 * An abstract participant type in this business network
 */
participant Business identified by businessId {
  o String businessId
  o String name
  o String PoCName optional
  o String PoCEmail optional
  o Address address optional
  o Double accountBalance
  o BusinessType businessType
  --> Item[] inventory
}

/**
//  * A Manufacturer is a type of participant in the network
//  */
// participant Manufacturer extends Business {
// }

// /**
//  * A Carrier is a type of participant in the network
//  */
// participant Carrier extends Business {
// }

// /**
//  * An Retailer is a type of participant in the network
//  */
// participant Retailer extends Business {
// }

/**
 * An abstract transaction that is related to a Shipment
 */
abstract transaction ShipmentTransaction {
    --> Shipment shipment
}

/**
 * An temperature reading for a shipment. E.g. received from a
 * device within a temperature controlled shipping container
 */
transaction TemperatureReading extends ShipmentTransaction {
  o Double centigrade
}

/**
 * A notification that a shipment has been received by the
 * Retailer and that funds should be transferred from the Retailer
 * to the Manufacturer to pay for the shipment.
 */
transaction ShipmentReceived extends ShipmentTransaction {
}

transaction TransferLocation extends ShipmentTransaction {
  o Warehouse warehouse
  o DateTime arrivalDateTime
}

asset Warehouse identified by id {
  o String id
  o Address address
}

/**
 * JUST FOR INITIALIZING A DEMO
 */
transaction SetupDemo {
}
