/**
  * A business network for shipping perishable goods
  * The cargo is temperature controlled and contracts
  * can be negociated based on the temperature
  * readings received for the cargo
  */

namespace org.mat

/**
 * A concept for a simple street address
 */
concept Address 
{
  o String city
  o String country
  o String street
  o String zip
}

/**
 * The status of a shipment
 */
enum Status 
{
  o CREATED
  o IN_TRANSIT
  o ARRIVED
}

// enum BusinessType 
// {
//   o Manufacturer
//   o Distributor
//   o Carrier
// }

/**
 * MAYBE
 */
enum UoM 
{
  o mL
  o g
}

/**
 * The commodity is pretty much the product type that jasper had
 * the idea is that a commodity is a drug type such as adderall and 
 * tylenol. You would then have it's name that they call it. the UoM 
 * mL for liquids and g for tablets/powders. THe commoditymedid is used
 * to go into the lookup table and find the commodity name
 * ProductType --> Commodity
 */
asset ItemType identified by itemTypeId 
{
  o String itemTypeId
  o String itemTypeName
  o UoM itemTypeUoM
  o Integer itemTypeMedId
}

/**
 * An item is the actual product. Such as a bottle of tylenol that contains
 * 1000 mL. The relationship to the commodity type allows us to simply send a 
 * parameter with the commodity identifier number and fetch the data. 
 */
asset Item identified by itemId 
{
  o String itemId
  o String packageType 
  o Business currentOwner
  --> ItemType itemType
}
/**
 * This is an order, an order can have mulitple items in it
 */
asset Order identified by orderId 
{
  o String orderId
  o Employee requester
  o Employee provider
  o Address destinationAddress
  o Address sourceAddress
  o Address[] locations
  o Address billingAddress
  o Status status
  o Business receiver
  o Business sender
  --> Contract[] itemContracts
}

/**
 * shipments can have multiple orders since multiple orders may be going to the same
 * place or shipped together since they are near each other
 */
asset Shipment identified by shipmentId 
{
  o String shipmentId
  o Status status
  o Business sender
  o Business receiver
  o Business currentOwner
  o Address destinationAddress
  o Address sourceAddress
  o Address[] locations
  --> Order[] orders
}

/**
 * Defines a contract between a Manufacturer and an Distributor to ship using
 * a Carrier, paying a set unit price. The unit price is multiplied by
 * a penality factor proportional to the deviation from the min and max
 * negociated temperatures for the shipment.
 * A contract will be made for each itemType. This is the agreement of what price will be paid. 
 */
asset Contract identified by contractId 
{
  o String contractId
  o ItemType itemToBuy
  o Business sellingBusiness
  o Business buyingBusiness
  o Double unitPrice
  o Double quantity
}

/**
 * An abstract participant type in this business network
 */
abstract participant Business identified by businessId 
{
  o String businessId
  o String name
  o String PoCName optional
  o String PoCEmail optional
  o Address address optional
  o Double accountBalance
  --> Item[] inventory
  --> Employee[] employees
}

participant Manufacturer extends Business
{
}


participant Distributor extends Business
{
}


participant Carrier extends Business
{
}

participant Employee identified by employeeId
{
  o String employeeId
  o String firstName
  o String lastName
  o String email
  o String phoneNumber optional
  o Business worksFor
}

participant Admin identified by adminId
{
  o String adminId
  o String firstName
  o String lastName
  o String email
  o String phoneNumber
  o Business worksFor optional
}

transaction itemTransaction
{
  o Integer itemTransactionID
  o Business currentOwner
  o Business newOwner
  o Item item
}

transaction shipmentTransaction
{
  o Integer shipmentTransaction
  o Business currentOwner
  o Business newOwner
  o Shipment shipment
}

/**
 * JUST FOR INITIALIZING A DEMO
 */
transaction SetupDemo {
}
