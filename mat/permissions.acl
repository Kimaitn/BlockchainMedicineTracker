rule SystemAllowRestrictingHistorian {
    description: "Grant all read access to system resources"
    participant(p): "org.mat.Employee"
    operation: READ
    resource(r): "org.hyperledger.composer.system.HistorianRecord"
    condition: (r.participantInvoking.worksFor == p.worksFor)
    action: ALLOW
}

rule System {
    description: "Grant all read access to system resources"
    participant: "org.**"
    operation: READ
    resource: "org.hyperledger.composer.system.**"
    action: ALLOW
}

rule ParticipantsSeeThemSelves {
    description: "Let participants see themselves"
    participant(p): "org.hyperledger.composer.system.Participant"
    operation: ALL
    resource(r): "org.hyperledger.composer.system.Participant"
    condition: (r.getIdentifier() == p.getIdentifier())
    action: ALLOW
}

rule LetEmployeesSeeOtherEmployeesForSameBusiness {
    description: "Let participants see other employess in their business"
    participant(p): "org.mat.Employee"
    operation: ALL
    resource(r): "org.hyperledger.composer.system.Participant"
    condition: (r.worksFor == p.worksFor)
    action: ALLOW
}

rule NetworkAdminUser
{
  description:  "Network admin is given business and network permissions"
  participant: "org.hyperledger.composer.system.NetworkAdmin"
  operation: ALL
  resource: "**"
  action: ALLOW  
}

rule AdminEmployeeCREATEtransactions
{
  description: "Allow ANY employee with type Admin to Create a transaction"
  participant(e): "org.mat.Employee"
  operation: CREATE
  resource(oe): "org.hyperledger.composer.system.HistorianRecord"
  condition: (e.employeeType == "Admin")
  action: ALLOW
}


rule AdminEmployeeCREATEAssets
{
  description: "Allow ANY employee with type Admin to Create a transaction"
  participant(e): "org.mat.Employee"
  operation: CREATE
  resource(oe): "org.hyperledger.composer.system.AddAsset"
  condition: (e.employeeType == "Admin")
  action: ALLOW
}

rule EmployeeREADAccess
{
  description: "Allow employee READ access "
  participant: "org.mat.Employee"
  operation: READ
  resource: "org.hyperledger.composer.system.**"
  action: ALLOW
}

rule LoginCheckerREADUser
{
  description: "lets the login checker verify the user"
  participant: "org.mat.LoginChecker"
  operation: READ
  resource: "org.mat.User"
  action: ALLOW
}

rule EmployeeNoReadUser
{
  description: "lets the employee not verify the user"
  participant: "org.mat.Employee"
  operation: READ
  resource: "org.mat.User"
  action: DENY
}  
  
rule AdminEmployeeCRUDItemType
{
  description: "Allow an admin employee to be able to CRUD item types"
  participant(e): "org.mat.Employee"
  operation: CREATE, READ, UPDATE, DELETE
  resource: "org.mat.ItemType"
  condition: (e.employeeType == "Admin")
  action: ALLOW
}

rule EmployeeCRUDItem
{
  description: "Allow ANY employee to CRUD an item that belongs to their business"
  participant(e): "org.mat.Employee"
  operation: CREATE, READ, UPDATE, DELETE
  resource(i): "org.mat.Item"
  condition: (e.worksFor == i.currentOwner)
  action: ALLOW
  }

rule EmployeeCreateItemViaUpdateItemOwner
{
  description: "Allow ANY employee to UPDATE an item that belongs to their business via the UpdateItemOwner transaction"
  participant(e): "org.mat.Employee"
  operation: UPDATE
  resource(i): "org.mat.UpdateItemOwner"
  condition: (e.worksFor == i.currentOwner.businessId)
  action: ALLOW
}

rule EmployeeUPDATEItemViaUpdateItemOwner
{
  description: "Allow ANY employee to UPDATE an item that belongs to their business via the UpdateItemOwner transaction"
  participant(e): "org.mat.Employee"
  operation: UPDATE
  resource(i): "org.mat.Item"
  transaction: "org.mat.UpdateItemOwner"
  condition: (e.worksFor == i.currentOwner)
  action: ALLOW
}

rule EmployeeCRContract
{
  description: "Allow ANY employee to CR a contract that belongs to their business"
  participant(e): "org.mat.Employee"
  operation: CREATE, READ
  resource(c): "org.mat.Contract"
  condition: ((e.worksFor == c.sellingBusiness.businessId) || (e.worksFor == c.buyingBusiness.businessId) || (e.worksFor == c.shipments[0].carryingBusiness.businessId))
  action: ALLOW
}

/*rule LogInCheckerUPDATEUserViaUpdateUserEmail
{
  description: "Allow LogInChecker to UPDATE a user email via the UpdateUserEmail transaction"
  participant(e): "org.mat.LoginChecker"
  operation: CREATE, UPDATE
  resource(c): "org.mat.UpdateUserEmail"
  action: ALLOW
}*/

rule EmployeeUPDATEContractViaUpdateShipment
{
  description: "Allow ANY employee to UPDATE a contract that belongs to their business via the UpdateShipment transaction"
  participant(e): "org.mat.Employee"
  operation: UPDATE
  resource(c): "org.mat.Contract"
  transaction: "org.mat.UpdateShipment"
  condition: ((e.worksFor == c.sellingBusiness.businessId))
  action: ALLOW
}

rule EmployeeCREATEContractViaUpdateShipment
{
  description: "Allow ANY employee to UPDATE a contract that belongs to their business via the UpdateShipment transaction"
  participant(e): "org.mat.Employee"
  operation: CREATE
  resource(c): "org.mat.UpdateShipment"
  condition: ((e.worksFor == c.contract.sellingBusiness.businessId))
  action: ALLOW
}

rule EmployeeApproveShipmentViaApproveShipments
{
  description: "Allow buying business employee to APPROVE shipments that that have arrived via the apporveShiipments transaction"
  participant(e): "org.mat.Employee"
  operation: UPDATE
  resource(c): "org.mat.Contract"
  transaction: "org.mat.ApproveShipments"
  condition: ((e.worksFor == c.buyingBusiness.businessId))
  action: ALLOW
}

rule EmployeeCreateApproveShipments
{
  description: "Allow buying business employee to APPROVE shipments that that have arrived via the apporveShiipments transaction"
  participant(e): "org.mat.Employee"
  operation: CREATE
  resource(c): "org.mat.ApproveShipments"
  condition: ((e.worksFor == c.contract.buyingBusiness.businessId))
  action: ALLOW
}

rule EmployeeApproveShipmentStatusViaUpdateShipmentStatus
{
  description: "Allow buying business employee to APPROVE shipments that that have arrived via the apporveShiipments transaction"
  participant(e): "org.mat.Employee"
  operation: UPDATE
  resource(c): "org.mat.Contract"
  transaction: "org.mat.UpdateShipmentStatus"
  condition: ((e.worksFor == c.shipments[0].carryingBusiness.businessId))
  action: ALLOW
}

rule EmployeeApproveShipmentStatusViaCreateUpdateShipmentStatus
{
  description: "Allow buying business employee to APPROVE shipments that that have arrived via the apporveShiipments transaction"
  participant(e): "org.mat.Employee"
  operation: CREATE
  resource(c): "org.mat.UpdateShipmentStatus"
  condition: ((e.worksFor == c.contract.shipments[0].carryingBusiness.businessId))
  action: ALLOW
}

rule EmployeeUPDATEContractViaUpdateItemRequest
{
  description: "Allow ANY employee to UPDATE a contract that belongs to their business via the UpdateItemRequest transaction"
  participant(e): "org.mat.Employee"
  operation: UPDATE
  resource(c): "org.mat.Contract"
  transaction: "org.mat.UpdateItemRequest"
  condition: ((e.worksFor == c.sellingBusiness.businessId) || (e.worksFor == c.buyingBusiness.businessId))
  action: ALLOW
}

rule EmployeeCreateUpdateItemRequest
{
  description: "Allow ANY employee to UPDATE a contract that belongs to their business via the UpdateItemRequest transaction"
  participant(e): "org.mat.Employee"
  operation: CREATE
  resource(c): "org.mat.UpdateItemRequest"
  condition: ((e.worksFor == c.contract.sellingBusiness.businessId) || (e.worksFor == c.contract.buyingBusiness.businessId))
  action: ALLOW
}

rule AdminEmployeeUPDATEContractViaApproveContractChanges
{
  description: "Allow an Admin employee to UPDATE a contract that belongs to their business via the ApproveContractChanges transaction"
  participant(e): "org.mat.Employee"
  operation: UPDATE, CREATE
  resource(c): "org.mat.Contract"
  transaction: "org.mat.ApproveContractChanges"
  condition: ((e.employeeType=="Admin") && ((e.worksFor == c.sellingBusiness.businessId) || (e.worksFor == c.buyingBusiness.businessId)))
  action: ALLOW
}

rule AdminEmployeeCREATEApproveContractChanges
{
  description: "Allow an Admin employee to UPDATE a contract that belongs to their business via the ApproveContractChanges transaction"
  participant(e): "org.mat.Employee"
  operation: CREATE
  resource(c): "org.mat.ApproveContractChanges"
  condition: ((e.employeeType=="Admin")  && ((e.worksFor == c.contract.sellingBusiness.businessId) || (e.worksFor == c.contract.buyingBusiness.businessId)))
  action: ALLOW
}

rule AdminEmployeeUPDATEContractViaCancelContract
{
  description: "Allow an Admin employee to deny a contract that belongs to their business via the CancelContract transaction"
  participant(e): "org.mat.Employee"
  operation: UPDATE
  resource(c): "org.mat.Contract"
  transaction: "org.mat.CancelContract"
  condition: ((e.employeeType=="Admin") && ((e.worksFor == c.sellingBusiness.businessId) || (e.worksFor == c.buyingBusiness.businessId)))
  action: ALLOW
}

rule AdminEmployeeCreateCancelContract
{
  description: "Allow an Admin employee to deny a contract that belongs to their business via the CancelContract transaction"
  participant(e): "org.mat.Employee"
  operation: CREATE
  resource(c): "org.mat.CancelContract"
  condition: ((e.employeeType=="Admin") && ((e.worksFor == c.contract.sellingBusiness.businessId) || (e.worksFor == c.contract.buyingBusiness.businessId)))
  action: ALLOW
}

rule AdminEmployeeUPDATEContractViaCompleteContract
{
  description: "Allow an Admin employee to UPDATE a contract that belongs to their business via the CompleteContract transaction"
  participant(e): "org.mat.Employee"
  operation: UPDATE
  resource(c): "org.mat.Contract"
  transaction: "org.mat.CompleteContract"
  condition: ((e.employeeType=="Admin") && (e.worksFor == c.sellingBusiness.businessId) || (e.worksFor == c.buyingBusiness.businessId))
  action: ALLOW
}

rule AdminEmployeeCreateCompleteContract
{
  description: "Allow an Admin employee to UPDATE a contract that belongs to their business via the CompleteContract transaction"
  participant(e): "org.mat.Employee"
  operation: CREATE
  resource(c): "org.mat.CompleteContract"
  condition: ((e.employeeType=="Admin") && ((e.worksFor == c.contract.sellingBusiness.businessId) || (e.worksFor == c.contract.buyingBusiness.businessId)))
  action: ALLOW
}

rule EmployeeUPDATEContractViaUpdateContractArrivalDateTime
{
  description: "Allow ANY employee to UPDATE a contract that belongs to their business via the UpdateContractArrivalDateTime transaction"
  participant(e): "org.mat.Employee"
  operation: UPDATE
  resource(c): "org.mat.Contract"
  transaction: "org.mat.UpdateContractArrivalDateTime"
  condition: ((e.worksFor == c.sellingBusiness.businessId) || (e.worksFor == c.buyingBusiness.businessId))
  action: ALLOW
}

rule EmployeeCREATEContractViaUpdateContractArrivalDateTime
{
  description: "Allow ANY employee to UPDATE a contract that belongs to their business via the UpdateContractArrivalDateTime transaction"
  participant(e): "org.mat.Employee"
  operation: CREATE
  resource(c): "org.mat.UpdateContractArrivalDateTime"
  condition: ((e.worksFor == c.contract.sellingBusiness.businessId) || (e.worksFor == c.contract.buyingBusiness.businessId))
  action: ALLOW
}


rule EmployeeUPDATEContractViaAddShipmentToShipmentList
{
  description: "Allow ANY SELLING business employee to UPDATE a contract that belongs to their business via the AddShipmentToShipmentList transaction"
  participant(e): "org.mat.Employee"
  operation: UPDATE
  resource(c): "org.mat.Contract"
  transaction: "org.mat.AddShipmentToShipmentList"
  condition: ((e.worksFor == c.sellingBusiness.businessId))
  action: ALLOW
}

rule EmployeeCREATEContractAddShipmentToShipmentList
{
  description: "Allow ANY SELLING business employee to CREATE a contract that belongs to their business via the AddShipmentToShipmentList transaction"
  participant(e): "org.mat.Employee"
  operation: CREATE
  resource(c): "org.mat.AddShipmentToShipmentList"
  condition: ((e.worksFor == c.contract.buyingBusiness.businessId) || (e.worksFor == c.contract.sellingBusiness.businessId) )
  action: ALLOW
}

rule EmployeeUPDATEContractViaRemoveShipmentFromShipmentList
{
  description: "Allow ANY SELLING business employee to UPDATE a contract that belongs to their business via the RemoveShipmentFromShipmentList transaction"
  participant(e): "org.mat.Employee"
  operation: UPDATE
  resource(c): "org.mat.Contract"
  transaction: "org.mat.RemoveShipmentFromShipmentList"
  condition: ((e.worksFor == c.sellingBusiness.businessId))
  action: ALLOW
}

rule EmployeeCreateRemoveShipmentFromShipmentList
{
  description: "Allow ANY SELLING business employee to UPDATE a contract that belongs to their business via the RemoveShipmentFromShipmentList transaction"
  participant(e): "org.mat.Employee"
  operation: CREATE
  resource(c): "org.mat.RemoveShipmentFromShipmentList"
  condition: ((e.worksFor == c.contract.sellingBusiness.businessId))
  action: ALLOW
}

rule EmployeeUPDATEContractViaAddItemRequestsToRequestedItemsList
{
  description: "Allow ANY employee to UPDATE a contract that belongs to their business via the AddItemRequestToRequestedItems transaction"
  participant(e): "org.mat.Employee"
  operation: UPDATE
  resource(c): "org.mat.Contract"
  transaction: "org.mat.AddItemRequestsToRequestedItemsList"
  condition: ((e.worksFor == c.sellingBusiness.businessId) || (e.worksFor == c.buyingBusiness.businessId))
  action: ALLOW
}

rule EmployeeCreateAddItemRequestsToRequestedItemsList
{
  description: "Allow ANY employee to CREATE a contract that belongs to their business via the AddItemRequestToRequestedItems transaction"
  participant(e): "org.mat.Employee"
  operation: CREATE
  resource(c): "org.mat.AddItemRequestsToRequestedItemsList"
  condition: ((e.worksFor == c.contract.sellingBusiness.businessId) || (e.worksFor == c.contract.buyingBusiness.businessId))
  action: ALLOW
}

rule EmployeeUPDATEContractViaRemoveItemRequestsFromRequestedItems
{
  description: "Allow ANY employee to UPDATE a contract that belongs to their business via the RemoveItemRequestFromRequestedItems transaction"
  participant(e): "org.mat.Employee"
  operation: UPDATE
  resource(c): "org.mat.Contract"
  transaction: "org.mat.RemoveItemRequestsFromRequestedItemsList"
  condition: ((e.worksFor == c.sellingBusiness.businessId) || (e.worksFor == c.buyingBusiness.businessId))
  action: ALLOW
}

rule EmployeeCreateRemoveItemRequestsFromRequestedItems
{
  description: "Allow ANY employee to CREATE a contract that belongs to their business via the RemoveItemRequestFromRequestedItems transaction"
  participant(e): "org.mat.Employee"
  operation: CREATE
  resource(c): "org.mat.RemoveItemRequestsFromRequestedItemsList"
  condition: ((e.worksFor == c.contract.sellingBusiness.businessId) || (e.worksFor == c.contract.buyingBusiness.businessId))
  action: ALLOW
}

//Allows an employee to be able to READ the business info that they belong to.
//Allows an employee to be able to READ the inventory and the employees that belong to.
rule EmployeeREADBusiness
{
  description: "Allow ANY employee to READ a business's info that it belongs to"
  participant(e): "org.mat.Employee" 
  operation: READ
  resource(b): "org.mat.Business"
  condition: (e.worksFor == b.businessId)
  action: ALLOW
}

rule EmployeeUPDATEBusinessViaRemoveItemFromInventory
{
  description: "Allow ANY employee to remove from a business's inventory that belongs to their business via RemoveItemFromInventory"
  participant(e): "org.mat.Employee"
  operation: UPDATE
  resource(b): "org.mat.Business"
  transaction(tx): "org.mat.RemoveItemFromInventory"
  condition: (e.worksFor == tx.business.businessId)
  action: ALLOW
}

rule EmployeeCREATEBusinessViaRemoveItemFromInventory
{
  description: "Allow ANY employee to remove from a business's inventory that belongs to their business via RemoveItemFromInventory"
  participant(e): "org.mat.Employee"
  operation: CREATE
  resource(b): "org.mat.RemoveItemFromInventory"
  condition: (e.worksFor == b.business.businessId)
  action: ALLOW
}

rule EmployeeUPDATEBusinessViaAddItemToInventory
{
  description: "Allow ANY employee to UPDATE a business that belongs to their business via RemoveItemFromInventory"
  participant(e): "org.mat.Employee"
  operation: UPDATE
  resource(b): "org.mat.Business"
  transaction(tx): "org.mat.AddItemToInventory"
  condition: (e.worksFor == tx.business.businessId)
  action: ALLOW
}

rule EmployeeCreateAddItemToInventory
{
  description: "Allow ANY employee to CREATE a business that belongs to their business via RemoveItemFromInventory"
  participant(e): "org.mat.Employee"
  operation: CREATE
  resource(b): "org.mat.AddItemToInventory"
  condition: (e.worksFor == b.business.businessId)
  action: ALLOW
}

rule AdminEmployeerRUBusiness
{
  description: "Allow an ADMIN employee to READ and UPDATE a business"
  participant(e): "org.mat.Employee"
  operation: READ, UPDATE
  resource(b): "org.mat.Business"
  condition: ((e.employeeType == "Admin") && (e.worksFor == b.businessId))
  action: ALLOW
}

rule AdminEmployeeCREATEBusinessViaRemoveEmployeeFromBusiness
{
  description: "Allow an ADMIN employee to UPDATE a business via RemoveEmployeeFromBusiness"
  participant(e): "org.mat.Employee"
  operation: CREATE
  resource(b): "org.mat.RemoveEmployeeFromBusiness"
  condition: ((e.employeeType == "Admin") && (e.worksFor == b.business.businessId))
  action: ALLOW
}

rule AdminEmployeeUPDATEBusinessViaRemoveEmployeeFromBusiness
{
  description: "Allow an ADMIN employee to UPDATE a business via RemoveEmployeeFromBusiness"
  participant(e): "org.mat.Employee"
  operation: UPDATE
  resource(b): "org.mat.Business"
  transaction(tx): "org.mat.RemoveEmployeeFromBusiness"
  condition: ((e.employeeType == "Admin") && (e.worksFor == tx.business.businessId) && (e.worksFor == b.businessId))
  action: ALLOW
}

rule AdminEmployeeCREATEBusinessViaAddEmployeeToBusiness
{
  description: "Allow an ADMIN employee to UPDATE a business via AddEmployeeToBusiness"
  participant(e): "org.mat.Employee"
  operation: CREATE
  resource(b): "org.mat.AddEmployeeToBusiness"
  condition: ((e.employeeType == "Admin") && (e.worksFor == b.business.businessId))
  action: ALLOW
}

rule AdminEmployeeUPDATEBusinessViaAddEmployeeToBusiness
{
  description: "Allow an ADMIN employee to UPDATE a business via AddEmployeeToBusiness"
  participant(e): "org.mat.Employee"
  operation: UPDATE
  resource(b): "org.mat.Business"
  transaction(tx): "org.mat.AddEmployeeToBusiness"
  condition: ((e.employeeType == "Admin") && (e.worksFor == b.businessId))
  action: ALLOW
}

rule AdminEmployeeCreateBusinessViaUpdateBusinessInfo
{
  description: "Allow an ADMIN employee to UPDATE a business via AddEmployeeToBusiness"
  participant(e): "org.mat.Employee"
  operation: CREATE
  resource(b): "org.mat.UpdateBusinessInfo"
  condition: ((e.employeeType == "Admin") && (e.worksFor == b.business.businessId))
  action: ALLOW
}

rule AdminEmployeeUPDATEBusinessViaUpdateBusinessInfo
{
  description: "Allow an ADMIN employee to UPDATE a business via AddEmployeeToBusiness"
  participant(e): "org.mat.Employee"
  operation: UPDATE
  resource(b): "org.mat.Business"
  transaction(tx): "org.mat.UpdateBusinessInfo"
  condition: ((e.employeeType == "Admin") && (e.worksFor == b.businessId))
  action: ALLOW
}

rule AdminEmployeeUPDATEBusinessViaUpdateBusinessAccBalance
{
  description: "Allow an ADMIN employee to UPDATE a business via UpdateBusinessAccBalance"
  participant(e): "org.mat.Employee"
  operation: UPDATE
  resource(b): "org.mat.Business"
  transaction(tx): "org.mat.UpdateBusinessAccBalance"
  condition: ((e.employeeType == "Admin") && (e.worksFor == tx.business.businessId) && (e.worksFor == b.businessId))
  action: ALLOW
}

rule AdminEmployeeCREATEBusinessViaUpdateBusinessAccBalance
{
  description: "Allow an ADMIN employee to UPDATE a business via UpdateBusinessAccBalance"
  participant(e): "org.mat.Employee"
  operation: CREATE
  resource(b): "org.mat.UpdateBusinessAccBalance"
  condition: ((e.employeeType == "Admin") && (e.worksFor == b.business.businessId))
  action: ALLOW
}

rule AdminEmployeeCRUDUser
{
  description: "Allow an ADMIN employee to CRUD a user"
  participant(e): "org.mat.Employee"
  operation: CREATE, READ, UPDATE, DELETE
  resource(u): "org.mat.User"
  condition: (e.employeeType == "Admin")
  action: ALLOW
}

rule EmployeeUPDATEEmployeeInfo
{
  description: "Allow ANY employee to UPDATE their employee info"
  participant(e): "org.mat.Employee"
  operation: UPDATE
  resource(e): "org.mat.Employee"
  transaction(tx): "org.mat.UpdateEmployeeInfo"
  condition: (e.employeeId == tx.employee.employeeId)
  action: ALLOW
}

rule EmployeeCreateEmployeeInfo
{
  description: "Allow ANY employee to CREATE transaction their employee info"
  participant(e): "org.mat.Employee"
  operation: CREATE
  resource(r): "org.mat.UpdateEmployeeInfo"
  condition: (e.employeeId == r.employee.employeeId)
  action: ALLOW
}

rule AdminEmployeeUPDATEEmployeeType
{
  description: "Allow ANY employee with type Admin to UPDATE Employee Type"
  participant(e): "org.mat.Employee"
  operation: UPDATE
  resource(oe): "org.mat.Employee"
  transaction(tx): "org.mat.UpdateEmployeeType"
  condition: ((e.employeeType == "Admin") && (e.worksFor == tx.employee.worksFor))
  action: ALLOW
}

rule AdminEmployeeCreateEmployeeType
{
  description: "Allow ANY employee with type Admin to UPDATE Employee Type"
  participant(e): "org.mat.Employee"
  operation: CREATE
  resource(r): "org.mat.UpdateEmployeeType"
  condition: ((e.employeeType == "Admin") && (e.worksFor == r.employee.worksFor))
  action: ALLOW
}

rule AdminEmployeeCreateBulkLoad
{
  description: "Allow ANY employee to use BulkLoad"
  participant(e): "org.mat.Employee"
  operation: CREATE
  resource(r): "org.mat.BulkLoad"
  condition: (e.worksFor == r.addingBusiness.businessId)
  action: ALLOW
}

rule UsersUpdatesPasswordViaTransactionUpdatePassword
{
  description: "Allow ANY user to update their own password"
  participant(e): "org.mat.Employee"
  operation: UPDATE
  resource(oe): "org.mat.User"
  transaction: "org.mat.UpdateEmployeeType"
  condition: (e.employeeId == oe.employeeId)
  action: ALLOW
}

rule UsersUpdatesPassword
{
  description: "Allow ANY user to update their own password"
  participant(e): "org.mat.Employee"
  operation: CREATE
  resource(oe): "org.mat.UpdateUserPassword"
  condition: (e.employeeId == oe.user.employeeId)
  action: ALLOW
}

rule UsersUpdatesEmailViaTransactionUpdateUserEmail
{
  description: "Allow ANY user to update their own password"
  participant(e): "org.mat.Employee"
  operation: CREATE
  resource(oe): "org.mat.User"
  transaction: "org.mat.UpdateUserEmail"
  condition: (e.employeeId == oe.user.employeeId)
  action: ALLOW
}

rule UsersUpdatesEmail
{
  description: "Allow ANY user to update their own password"
  participant(e): "org.mat.Employee"
  operation: CREATE
  resource(oe): "org.mat.UpdateUserEmail"
  condition: (e.employeeId == oe.user.employeeId)
  action: ALLOW
}